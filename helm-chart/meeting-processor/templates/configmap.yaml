apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "meeting-processor.fullname" . }}-config
  namespace: {{ .Values.namespace }}
  labels:
    {{- include "meeting-processor.labels" . | nindent 4 }}
    app.kubernetes.io/component: config
data:
  config.json: |
    {
      "paths": {
        "input_file": "",
        "output_dir": "meeting_output",
        "names_config": "names_config.json",
        "templates_config": "templates_config.json",
        "api_keys_config": "api_keys.json",
        "team_config": "team_config.json"
      },
      "settings": {
        "keep_audio_file": {{ .Values.config.processing.keepAudioFile }},
        "language": {{ .Values.config.deepgram.language | quote }},
        "deepgram_model": {{ .Values.config.deepgram.model | quote }},
        "claude_model": {{ .Values.config.claude.model | quote }},
        "deepgram_timeout_seconds": {{ .Values.config.processing.deepgramTimeoutSeconds }},
        "chunk_duration_minutes": {{ .Values.config.processing.chunkDurationMinutes }},
        "max_file_size_mb": {{ .Values.config.processing.maxFileSizeMb }},
        "max_duration_minutes": {{ .Values.config.processing.maxDurationMinutes }},
        "request_pause_seconds": {{ .Values.config.processing.requestPauseSeconds }},
        "max_retries": {{ .Values.config.processing.maxRetries }},
        "template_type": "standard"
      },
      "deepgram_options": {
        "punctuate": {{ .Values.config.deepgram.punctuate }},
        "diarize": {{ .Values.config.deepgram.diarize }},
        "smart_format": {{ .Values.config.deepgram.smartFormat }},
        "paragraphs": {{ .Values.config.deepgram.paragraphs }},
        "utterances": {{ .Values.config.deepgram.utterances }},
        "summarize": {{ .Values.config.deepgram.summarize }},
        "detect_language": {{ .Values.config.deepgram.detectLanguage }}
      },
      "template_settings": {
        "auto_detect_meeting_type": {{ .Values.templates.templateSettings.autoDetectMeetingType }},
        "include_technical_info": {{ .Values.templates.templateSettings.includeTechnicalInfo }},
        "include_file_datetime": {{ .Values.templates.templateSettings.includeFileDatetime }},
        "max_tokens": {{ .Values.templates.templateSettings.maxTokens }},
        "fallback_template": {{ .Values.templates.autoDetectionSettings.fallbackTemplate | quote }}
      },
      "supported_formats": {{ .Values.config.processing.supportedFormats | toJson }}
    }
  templates_config.json: |
    {
      "default_template": {{ .Values.templates.defaultTemplate | quote }},
      "template_settings": {
        "include_technical_info": {{ .Values.templates.templateSettings.includeTechnicalInfo }},
        "include_file_datetime": {{ .Values.templates.templateSettings.includeFileDatetime }},
        "language": {{ .Values.templates.templateSettings.language | quote }},
        "max_tokens": {{ .Values.templates.templateSettings.maxTokens }},
        "auto_detect_meeting_type": {{ .Values.templates.templateSettings.autoDetectMeetingType }}
      },
      "template_descriptions": {{ .Values.templates.templateDescriptions | toJson }},
      "meeting_type_keywords": {{ .Values.templates.meetingTypeKeywords | toJson }},
      "auto_detection_settings": {{ .Values.templates.autoDetectionSettings | toJson }}
    }
  gunicorn.conf.py: |
    # Gunicorn configuration –¥–ª—è Meeting Processor
    import os
    import multiprocessing
    
    # Server socket
    bind = f"0.0.0.0:{os.environ.get('PORT', 8000)}"
    backlog = 2048
    
    # Worker processes
    workers = int(os.environ.get('GUNICORN_WORKERS', {{ .Values.web.gunicorn.workers }}))
    worker_class = "sync"
    worker_connections = 1000
    max_requests = {{ .Values.web.gunicorn.maxRequests }}
    max_requests_jitter = {{ .Values.web.gunicorn.maxRequestsJitter }}
    timeout = int(os.environ.get('GUNICORN_TIMEOUT', {{ .Values.web.gunicorn.timeout }}))
    keepalive = 2
    
    # Restart workers
    max_requests = int(os.environ.get('GUNICORN_MAX_REQUESTS', {{ .Values.web.gunicorn.maxRequests }}))
    max_requests_jitter = int(os.environ.get('GUNICORN_MAX_REQUESTS_JITTER', {{ .Values.web.gunicorn.maxRequestsJitter }}))
    preload_app = True
    
    # Logging
    loglevel = os.environ.get('LOG_LEVEL', 'info')
    accesslog = '-'  # stdout
    errorlog = '-'   # stderr
    access_log_format = '%(h)s %(l)s %(u)s %(t)s "%(r)s" %(s)s %(b)s "%(f)s" "%(a)s" %(D)s'
    
    # Process naming
    proc_name = 'meeting_processor_web'
    
    # Server mechanics
    daemon = False
    pidfile = '/tmp/gunicorn.pid'
    user = None
    group = None
    tmp_upload_dir = None
    
    # SSL (–¥–ª—è HTTPS)
    keyfile = os.environ.get('SSL_KEYFILE')
    certfile = os.environ.get('SSL_CERTFILE')
    
    # Worker tuning
    worker_tmp_dir = '/dev/shm'  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å RAM –¥–ª—è temporary files
    
    def when_ready(server):
        server.log.info("üöÄ Meeting Processor Server –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    
    def worker_int(worker):
        worker.log.info("üíÄ Worker –ø–æ–ª—É—á–∏–ª SIGINT")
    
    def pre_fork(server, worker):
        server.log.info(f"üë∂ Worker {worker.pid} —Å–æ–∑–¥–∞–µ—Ç—Å—è")
    
    def post_fork(server, worker):
        server.log.info(f"‚úÖ Worker {worker.pid} –∑–∞–ø—É—â–µ–Ω")
    
    def pre_exec(server):
        server.log.info("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞")
    
    def on_exit(server):
        server.log.info("üëã Meeting Processor Server –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")