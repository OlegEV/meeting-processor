#!/usr/bin/env python3
"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
"""

import os
import datetime
from pathlib import Path
from typing import Dict

class FileUtils:
    """–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏"""
    
    @staticmethod
    def get_file_datetime_info(file_path: str) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"""
        try:
            file_path = Path(file_path)
            stat = file_path.stat()
            
            # –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è (Windows) –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ (Unix)
            if hasattr(stat, 'st_birthtime'):  # macOS
                creation_time = datetime.datetime.fromtimestamp(stat.st_birthtime)
            elif hasattr(stat, 'st_ctime'):  # Windows/Linux
                creation_time = datetime.datetime.fromtimestamp(stat.st_ctime)
            else:
                creation_time = None
            
            # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
            modification_time = datetime.datetime.fromtimestamp(stat.st_mtime)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ, –∏–Ω–∞—á–µ –≤—Ä–µ–º—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
            file_datetime = creation_time if creation_time else modification_time
            
            return {
                "datetime": file_datetime,
                "date": file_datetime.strftime("%d.%m.%Y"),
                "time": file_datetime.strftime("%H:%M:%S"),
                "datetime_full": file_datetime.strftime("%d.%m.%Y %H:%M:%S"),
                "weekday": file_datetime.strftime("%A"),
                "weekday_ru": FileUtils._get_russian_weekday(file_datetime.weekday()),
                "month_ru": FileUtils._get_russian_month(file_datetime.month)
            }
            
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ —Ñ–∞–π–ª–∞: {e}")
            now = datetime.datetime.now()
            return {
                "datetime": now,
                "date": now.strftime("%d.%m.%Y"),
                "time": now.strftime("%H:%M:%S"),
                "datetime_full": now.strftime("%d.%m.%Y %H:%M:%S"),
                "weekday": now.strftime("%A"),
                "weekday_ru": FileUtils._get_russian_weekday(now.weekday()),
                "month_ru": FileUtils._get_russian_month(now.month)
            }
    
    @staticmethod
    def _get_russian_weekday(weekday_index: int) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º"""
        weekdays = {
            0: "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", 1: "–≤—Ç–æ—Ä–Ω–∏–∫", 2: "—Å—Ä–µ–¥–∞", 3: "—á–µ—Ç–≤–µ—Ä–≥",
            4: "–ø—è—Ç–Ω–∏—Ü–∞", 5: "—Å—É–±–±–æ—Ç–∞", 6: "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
        }
        return weekdays.get(weekday_index, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    
    @staticmethod
    def _get_russian_month(month_index: int) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º"""
        months = {
            1: "—è–Ω–≤–∞—Ä—è", 2: "—Ñ–µ–≤—Ä–∞–ª—è", 3: "–º–∞—Ä—Ç–∞", 4: "–∞–ø—Ä–µ–ª—è",
            5: "–º–∞—è", 6: "–∏—é–Ω—è", 7: "–∏—é–ª—è", 8: "–∞–≤–≥—É—Å—Ç–∞", 
            9: "—Å–µ–Ω—Ç—è–±—Ä—è", 10: "–æ–∫—Ç—è–±—Ä—è", 11: "–Ω–æ—è–±—Ä—è", 12: "–¥–µ–∫–∞–±—Ä—è"
        }
        return months.get(month_index, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    
    @staticmethod
    def save_transcript(transcript_path: str, transcript: str, file_datetime_info: Dict, 
                       template_type: str, team_identification: Dict = None):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º"""
        # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞
        transcript_header = f"""–¢–†–ê–ù–°–ö–†–ò–ü–¢ –í–°–¢–†–ï–ß–ò
–î–∞—Ç–∞: {file_datetime_info['date']} ({file_datetime_info['weekday_ru']})
–í—Ä–µ–º—è: {file_datetime_info['time']}
–§–∞–π–ª: {Path(transcript_path).stem.replace('_transcript', '')}
–®–∞–±–ª–æ–Ω: {template_type}"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        if team_identification and team_identification.get("identified", False):
            stats = team_identification.get("statistics", {})
            avg_confidence = FileUtils._calculate_average_confidence(team_identification)
            transcript_header += f"""
–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã: ‚úÖ –í–∫–ª—é—á–µ–Ω–∞
–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ: {stats.get('total_identified', 0)}
–ö–æ–º–∞–Ω–¥—ã: {', '.join(stats.get('teams_present', []))}
–°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å: {avg_confidence:.0%}"""
        else:
            transcript_header += f"""
–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã: ‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–º–µ–Ω—è–ª–∞—Å—å"""
        
        transcript_with_header = f"{transcript_header}\n\n{'-' * 80}\n\n{transcript}"
        
        with open(transcript_path, "w", encoding="utf-8") as f:
            f.write(transcript_with_header)
        print(f"‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {transcript_path}")
    
    @staticmethod
    def save_team_info(team_info_path: str, team_identification: Dict, 
                      file_datetime_info: Dict, input_file_path: str, template_type: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ"""
        team_info_content = f"""–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ö–û–ú–ê–ù–î–ï
–î–∞—Ç–∞: {file_datetime_info['date']} ({file_datetime_info['weekday_ru']})
–í—Ä–µ–º—è: {file_datetime_info['time']}
–§–∞–π–ª: {Path(input_file_path).name}
–®–∞–±–ª–æ–Ω: {template_type}

{team_identification.get('participant_summary', '')}

–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–î–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò:
- –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ: {team_identification['statistics']['total_identified']}
- –ö–æ–º–∞–Ω–¥—ã –Ω–∞ –≤—Å—Ç—Ä–µ—á–µ: {', '.join(team_identification['statistics']['teams_present'])}
- –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: {FileUtils._calculate_average_confidence(team_identification):.0%}

–î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –ü–û –£–ß–ê–°–¢–ù–ò–ö–ê–ú:
"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–µ
        for speaker_id, member_info in team_identification.get('speakers', {}).items():
            confidence = team_identification.get('confidence_scores', {}).get(speaker_id, 0)
            team_info_content += f"""
{speaker_id}:
  - –ò–º—è: {member_info.get('full_name', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
  - –†–æ–ª—å: {member_info.get('role', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
  - –ö–æ–º–∞–Ω–¥–∞: {member_info.get('team_name', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
  - –¢–æ—á–Ω–æ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: {confidence:.0%}
"""
        
        team_info_content += f"""
–ó–ê–ú–ï–ù–´ –í –¢–†–ê–ù–°–ö–†–ò–ü–¢–ï:
"""
        for old_speaker, new_speaker in team_identification.get('replacements', {}).items():
            team_info_content += f"- {old_speaker} ‚Üí {new_speaker}\n"
        
        with open(team_info_path, "w", encoding="utf-8") as f:
            f.write(team_info_content)
        print(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∞–Ω–¥–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {team_info_path}")
    
    @staticmethod
    def _calculate_average_confidence(team_identification: Dict) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ä–µ–¥–Ω—é—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        confidence_scores = team_identification.get("confidence_scores", {})
        if not confidence_scores:
            return 0.0
        
        return sum(confidence_scores.values()) / len(confidence_scores)
    
    @staticmethod
    def cleanup_temp_files(temp_audio_created: bool, audio_file_path: str, keep_audio_file: bool):
        """–û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
        if temp_audio_created and not keep_audio_file:
            try:
                os.remove(audio_file_path)
                print("üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")
            except:
                pass
        elif temp_audio_created and keep_audio_file:
            print(f"üíæ –ê—É–¥–∏–æ—Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {audio_file_path}")
