#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Ñ–∞–π–ª–æ–≤
"""

import os
from pathlib import Path
from meeting_processor import MeetingProcessor, load_config

def test_file_format(file_path: str):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞"""
    if not os.path.exists(file_path):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        return
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    processor = MeetingProcessor("test", "test")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª
    file_type, file_ext, file_info = processor.get_audio_info(file_path)
    
    file_size_mb = os.path.getsize(file_path) / (1024 * 1024)
    
    print(f"\nüìÅ –§–∞–π–ª: {Path(file_path).name}")
    print(f"üìä –†–∞–∑–º–µ—Ä: {file_size_mb:.1f} MB")
    print(f"üîç –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ: {file_ext}")
    print(f"‚öôÔ∏è –¢–∏–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏: {file_type}")
    print(f"‚ÑπÔ∏è  {file_info}")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
    if file_type == "native_audio":
        print("‚ú® üöÄ –û–ü–¢–ò–ú–ê–õ–¨–ù–û! –ù–∞—Ç–∏–≤–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ Deepgram")
        print("   ‚ö° –ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ–∑ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
        print("   üéØ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ")
        
    elif file_type == "convert_audio":
        print("üîÑ –¢—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ WAV")
        print("   ‚è±Ô∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é")
        print("   üíΩ –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫–µ")
        
    elif file_type == "video":
        print("üé¨ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫–∏")
        print("   ‚è±Ô∏è –í—Ä–µ–º—è –Ω–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ")
        print("   üíΩ –í—Ä–µ–º–µ–Ω–Ω—ã–π WAV —Ñ–∞–π–ª")
        
    else:
        print("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç")
        return
    
    # –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if file_size_mb < 5:
        time_estimate = "< 1 –º–∏–Ω—É—Ç—ã"
    elif file_size_mb < 15:
        time_estimate = "1-3 –º–∏–Ω—É—Ç—ã"  
    elif file_size_mb < 50:
        time_estimate = "3-10 –º–∏–Ω—É—Ç"
    else:
        time_estimate = "> 10 –º–∏–Ω—É—Ç"
    
    print(f"‚è±Ô∏è –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {time_estimate}")

def show_format_comparison():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–æ–≤"""
    print("üìä –°–†–ê–í–ù–ï–ù–ò–ï –§–û–†–ú–ê–¢–û–í")
    print("=" * 60)
    
    formats = [
        ("MP3", "native_audio", "‚ö°‚ö°‚ö°", "üéØ", "‚úÖ –ù–∞—Ç–∏–≤–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞"),
        ("WAV", "native_audio", "‚ö°‚ö°‚ö°", "üéØ", "‚úÖ –ù–∞—Ç–∏–≤–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞"),
        ("FLAC", "native_audio", "‚ö°‚ö°‚ö°", "üéØ", "‚úÖ –ù–∞—Ç–∏–≤–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞"),
        ("AAC", "native_audio", "‚ö°‚ö°‚ö°", "üéØ", "‚úÖ –ù–∞—Ç–∏–≤–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞"),
        ("M4A", "native_audio", "‚ö°‚ö°‚ö°", "üéØ", "‚úÖ –ù–∞—Ç–∏–≤–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞"),
        ("OGG", "native_audio", "‚ö°‚ö°‚ö°", "üéØ", "‚úÖ –ù–∞—Ç–∏–≤–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞"),
        ("WMA", "convert_audio", "‚ö°‚ö°", "üîÑ", "üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ WAV"),
        ("OPUS", "convert_audio", "‚ö°‚ö°", "üîÑ", "üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ WAV"),
        ("MP4", "video", "‚ö°", "üé¨", "üé¨ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ"),
        ("AVI", "video", "‚ö°", "üé¨", "üé¨ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ"),
        ("MOV", "video", "‚ö°", "üé¨", "üé¨ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ")
    ]
    
    print(f"{'–§–æ—Ä–º–∞—Ç':<8} {'–°–∫–æ—Ä–æ—Å—Ç—å':<10} {'–ö–∞—á–µ—Å—Ç–≤–æ':<10} {'–û–±—Ä–∞–±–æ—Ç–∫–∞'}")
    print("-" * 60)
    
    for fmt, ftype, speed, quality, processing in formats:
        print(f"{fmt:<8} {speed:<10} {quality:<10} {processing}")
    
    print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print(f"ü•á –õ—É—á—à–∏–π –≤—ã–±–æ—Ä: MP3, WAV, FLAC - –Ω–∞—Ç–∏–≤–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞")
    print(f"ü•à –•–æ—Ä–æ—à–∏–π –≤—ã–±–æ—Ä: AAC, M4A, OGG - –Ω–∞—Ç–∏–≤–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞") 
    print(f"ü•â –°—Ä–µ–¥–Ω–∏–π –≤—ã–±–æ—Ä: WMA, OPUS - —Ç—Ä–µ–±—É—é—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
    print(f"üìπ –í–∏–¥–µ–æ: –í—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ")

def show_deepgram_native_formats():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç—ã —Å –Ω–∞—Ç–∏–≤–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Deepgram"""
    print("\nüé§ –ù–ê–¢–ò–í–ù–ê–Ø –ü–û–î–î–ï–†–ñ–ö–ê DEEPGRAM")
    print("=" * 50)
    
    native_formats = [
        ("MP3", "–°–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –æ—Ç–ª–∏—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞"),
        ("WAV", "–ù–µ—Å–∂–∞—Ç—ã–π —Ñ–æ—Ä–º–∞—Ç, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ"),
        ("FLAC", "Lossless —Å–∂–∞—Ç–∏–µ, –æ—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ"),
        ("AAC", "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, —Ö–æ—Ä–æ—à–µ–µ —Å–∂–∞—Ç–∏–µ"),
        ("M4A", "Apple —Ñ–æ—Ä–º–∞—Ç, —Ö–æ—Ä–æ—à–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞"),
        ("OGG", "–û—Ç–∫—Ä—ã—Ç—ã–π —Ñ–æ—Ä–º–∞—Ç, —Ö–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ")
    ]
    
    for fmt, description in native_formats:
        print(f"‚úÖ {fmt:<6} - {description}")
    
    print(f"\nüöÄ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –Ω–∞—Ç–∏–≤–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏:")
    print(f"   ‚ö° –ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ–∑ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
    print(f"   üéØ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞")
    print(f"   üíΩ –≠–∫–æ–Ω–æ–º–∏—è –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞")
    print(f"   üîí –ë–æ–ª—å—à–∞—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–∞")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ –¢–ï–°–¢ –ü–û–î–î–ï–†–ñ–ö–ò –§–û–†–ú–ê–¢–û–í –§–ê–ô–õ–û–í")
    print("=" * 50)
    
    print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
    print("1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª")
    print("2. –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–æ–≤")
    print("3. –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã Deepgram")
    print("4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ")
    print("5. –í—ã–π—Ç–∏")
    
    choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-5): ").strip()
    
    if choice == "1":
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        file_path = input("üìÅ –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É: ").strip().strip('"')
        test_file_format(file_path)
        
    elif choice == "2":
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–æ–≤
        show_format_comparison()
        
    elif choice == "3":
        # –ù–∞—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        show_deepgram_native_formats()
        
    elif choice == "4":
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ
        folder_path = input("üìÅ –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ: ").strip().strip('"')
        
        if os.path.exists(folder_path):
            media_extensions = {'.mp3', '.wav', '.flac', '.aac', '.m4a', '.ogg', 
                              '.wma', '.opus', '.mp4', '.avi', '.mov', '.mkv', '.wmv', '.webm'}
            
            files_found = []
            for file_path in Path(folder_path).iterdir():
                if file_path.suffix.lower() in media_extensions:
                    files_found.append(str(file_path))
            
            if files_found:
                print(f"\nüîç –ù–∞–π–¥–µ–Ω–æ {len(files_found)} –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤:")
                for file_path in sorted(files_found):
                    test_file_format(file_path)
            else:
                print("‚ùå –ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ")
        else:
            print("‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
    elif choice == "5":
        print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
        return
        
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å –µ—â–µ —Ä–∞–∑
    if input(f"\n–ó–∞–ø—É—Å—Ç–∏—Ç—å –µ—â–µ —Ä–∞–∑? (y/n): ").lower().startswith('y'):
        main()

if __name__ == "__main__":
    main()