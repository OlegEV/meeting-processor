services:
  meeting-web:
    build:
      context: .
      dockerfile: Dockerfile.web
    container_name: meeting-processor-web
    ports:
      - "8000:8000"
    environment:
      # Flask настройки
      - FLASK_ENV=production
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      
      # Gunicorn настройки
      - GUNICORN_WORKERS=4
      - GUNICORN_THREADS=2
      - GUNICORN_TIMEOUT=300
      - MAX_WORKERS=4
      
      # Файловые лимиты
      - MAX_UPLOAD_SIZE=209715200  # 200MB
      - UPLOAD_FOLDER=/app/web_uploads
      - OUTPUT_FOLDER=/app/web_output
      
      # Логирование
      - LOG_LEVEL=info
      
      # API ключи (передаются из .env файла)
      - DEEPGRAM_API_KEY=${DEEPGRAM_API_KEY}
      - CLAUDE_API_KEY=${CLAUDE_API_KEY}
      
      # Опциональные настройки
      - HTTPS=false
      - PORT=8000
      - HOST=0.0.0.0
    
    volumes:
      # Монтируем директории для постоянного хранения
      - ./config.json:/app/config.json:ro
      - ./api_keys.json:/app/api_keys.json:ro
      - meeting_uploads:/app/web_uploads
      - meeting_output:/app/web_output
      - meeting_logs:/app/logs
    
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Лимиты ресурсов
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    
    # Логирование
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  telegram-bot:
    build:
      context: .
      dockerfile: Dockerfile.bot
    container_name: meeting-telegram-bot
    restart: unless-stopped
    
    # Переменные окружения
    environment:
      - PYTHONUNBUFFERED=1
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN:-}
      - DEEPGRAM_API_KEY=${DEEPGRAM_API_KEY:-}
      - CLAUDE_API_KEY=${CLAUDE_API_KEY:-}
    
    # Монтируем тома для конфигурации и данных
    volumes:
      # Конфигурационные файлы (только чтение)
      - ./bot_config.json:/app/bot_config.json:ro
      - ./api_keys.json:/app/api_keys.json:ro
      - ./config.json:/app/config.json:ro
      - ./templates_config.json:/app/templates_config.json:ro
      - ./names_config.json:/app/names_config.json:ro
      - ./team_config.json:/app/team_config.json:ro
      
      # Рабочие директории
      - ./logs:/app/logs
      - ./temp_files:/app/temp_bot_files
      - ./output:/app/meeting_output
    
    # Порты (если используется webhook)
    ports:
      - "8443:8443"
    
    # Ограничения ресурсов
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.25'
    
    # Проверка здоровья
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; sys.exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Логирование
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Nginx для reverse proxy (опционально)
  nginx:
    image: nginx:alpine
    container_name: meeting-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - meeting-processor
    restart: unless-stopped
    profiles:
      - nginx

volumes:
  meeting_uploads:
  meeting_output:
  meeting_logs:
  prometheus_data:
  grafana_data:

# Создаем сеть для изоляции
networks:
  default:
    name: meeting-network