#!/usr/bin/env python3
"""
–î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
"""

import logging
from functools import wraps
from typing import Dict, Any, Optional, Callable
from flask import request, jsonify, redirect, url_for, flash

from .token_validator import TokenValidator, TokenValidationError
from .user_context import UserContext

logger = logging.getLogger(__name__)

class AuthDecorators:
    """–ö–ª–∞—Å—Å —Å –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞–º–∏ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    
    def __init__(self, token_validator: TokenValidator, config: Optional[Dict[str, Any]] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤
        
        Args:
            token_validator: –í–∞–ª–∏–¥–∞—Ç–æ—Ä —Ç–æ–∫–µ–Ω–æ–≤
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        """
        self.token_validator = token_validator
        self.config = config or {}
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        auth_config = self.config.get('auth', {})
        self.debug_mode = auth_config.get('debug_mode', False)
        self.debug_user = auth_config.get('debug_user', {
            'user_id': 'debug_user',
            'email': 'debug@localhost',
            'name': 'Debug User'
        })
        
        if self.debug_mode:
            logger.warning("üîß –û–¢–õ–ê–î–û–ß–ù–´–ô –†–ï–ñ–ò–ú –ê–ö–¢–ò–í–ï–ù - –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞!")
    
    def require_auth(self, redirect_on_failure: bool = True):
        """
        –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        
        Args:
            redirect_on_failure: –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å –ª–∏ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
            
        Returns:
            –î–µ–∫–æ—Ä–∞—Ç–æ—Ä —Ñ—É–Ω–∫—Ü–∏–∏
        """
        def decorator(f: Callable) -> Callable:
            @wraps(f)
            def decorated_function(*args, **kwargs):
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–µ–∂–∏–º
                    if self.debug_mode:
                        # –í –æ—Ç–ª–∞–¥–æ—á–Ω–æ–º —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        UserContext.set_current_user(self.debug_user)
                        logger.debug(f"üîß –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–µ–∂–∏–º: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.debug_user['user_id']}")
                        
                        try:
                            # –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                            return f(*args, **kwargs)
                        finally:
                            # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                            UserContext.clear_current_user()
                    
                    # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º - –≤–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
                    is_valid, user_info, error = self.token_validator.validate_request()
                    
                    if not is_valid:
                        logger.warning(f"–ù–µ—É–¥–∞—á–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: {error}")
                        
                        # –î–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º JSON
                        if request.path.startswith('/api/'):
                            return jsonify({
                                'error': 'Authentication required',
                                'message': error or 'Invalid or missing authentication token'
                            }), 401
                        
                        # –î–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                        if redirect_on_failure:
                            flash('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è', 'error')
                            return redirect(url_for('index'))
                        else:
                            return jsonify({
                                'error': 'Authentication required',
                                'message': error or 'Invalid or missing authentication token'
                            }), 401
                    
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    UserContext.set_current_user(user_info)
                    
                    try:
                        # –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                        return f(*args, **kwargs)
                    finally:
                        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                        UserContext.clear_current_user()
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
                    
                    if request.path.startswith('/api/'):
                        return jsonify({
                            'error': 'Authentication error',
                            'message': 'Internal authentication error'
                        }), 500
                    
                    if redirect_on_failure:
                        flash('–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏', 'error')
                        return redirect(url_for('index'))
                    else:
                        return jsonify({
                            'error': 'Authentication error',
                            'message': 'Internal authentication error'
                        }), 500
            
            return decorated_function
        return decorator
    
    def require_user_context(self, redirect_on_failure: bool = True):
        """
        –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        –ê–ª–∏–∞—Å –¥–ª—è require_auth –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        
        Args:
            redirect_on_failure: –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å –ª–∏ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
            
        Returns:
            –î–µ–∫–æ—Ä–∞—Ç–æ—Ä —Ñ—É–Ω–∫—Ü–∏–∏
        """
        return self.require_auth(redirect_on_failure)
    
    def optional_auth(self):
        """
        –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω, –Ω–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –µ–≥–æ
        
        Returns:
            –î–µ–∫–æ—Ä–∞—Ç–æ—Ä —Ñ—É–Ω–∫—Ü–∏–∏
        """
        def decorator(f: Callable) -> Callable:
            @wraps(f)
            def decorated_function(*args, **kwargs):
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–µ–∂–∏–º
                    if self.debug_mode:
                        # –í –æ—Ç–ª–∞–¥–æ—á–Ω–æ–º —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        UserContext.set_current_user(self.debug_user)
                        logger.debug(f"üîß –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–µ–∂–∏–º: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.debug_user['user_id']}")
                        
                        try:
                            # –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                            return f(*args, **kwargs)
                        finally:
                            # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                            UserContext.clear_current_user()
                    
                    # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º - –ø—ã—Ç–∞–µ–º—Å—è –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω
                    is_valid, user_info, error = self.token_validator.validate_request()
                    
                    if is_valid and user_info:
                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω
                        UserContext.set_current_user(user_info)
                        logger.debug(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_info['user_id']}")
                    else:
                        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω
                        UserContext.clear_current_user()
                        if error:
                            logger.debug(f"–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {error}")
                    
                    try:
                        # –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                        return f(*args, **kwargs)
                    finally:
                        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                        UserContext.clear_current_user()
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–µ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                    UserContext.clear_current_user()
                    return f(*args, **kwargs)
            
            return decorated_function
        return decorator

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
_auth_decorators: Optional[AuthDecorators] = None

def init_auth_decorators(token_validator: TokenValidator, config: Optional[Dict[str, Any]] = None) -> None:
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    
    Args:
        token_validator: –í–∞–ª–∏–¥–∞—Ç–æ—Ä —Ç–æ–∫–µ–Ω–æ–≤
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """
    global _auth_decorators
    _auth_decorators = AuthDecorators(token_validator, config)

def require_auth(redirect_on_failure: bool = True):
    """
    –ì–ª–æ–±–∞–ª—å–Ω—ã–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    
    Args:
        redirect_on_failure: –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å –ª–∏ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
        
    Returns:
        –î–µ–∫–æ—Ä–∞—Ç–æ—Ä —Ñ—É–Ω–∫—Ü–∏–∏
        
    Raises:
        RuntimeError: –ï—Å–ª–∏ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
    """
    if _auth_decorators is None:
        raise RuntimeError("–î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã. –í—ã–∑–æ–≤–∏—Ç–µ init_auth_decorators()")
    
    return _auth_decorators.require_auth(redirect_on_failure)

def require_user_context(redirect_on_failure: bool = True):
    """
    –ì–ª–æ–±–∞–ª—å–Ω—ã–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    
    Args:
        redirect_on_failure: –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å –ª–∏ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
        
    Returns:
        –î–µ–∫–æ—Ä–∞—Ç–æ—Ä —Ñ—É–Ω–∫—Ü–∏–∏
        
    Raises:
        RuntimeError: –ï—Å–ª–∏ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
    """
    if _auth_decorators is None:
        raise RuntimeError("–î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã. –í—ã–∑–æ–≤–∏—Ç–µ init_auth_decorators()")
    
    return _auth_decorators.require_user_context(redirect_on_failure)

def optional_auth():
    """
    –ì–ª–æ–±–∞–ª—å–Ω—ã–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    
    Returns:
        –î–µ–∫–æ—Ä–∞—Ç–æ—Ä —Ñ—É–Ω–∫—Ü–∏–∏
        
    Raises:
        RuntimeError: –ï—Å–ª–∏ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
    """
    if _auth_decorators is None:
        raise RuntimeError("–î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã. –í—ã–∑–æ–≤–∏—Ç–µ init_auth_decorators()")
    
    return _auth_decorators.optional_auth()

# Middleware —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è Flask
def create_auth_middleware(token_validator: TokenValidator, config: Optional[Dict[str, Any]] = None):
    """
    –°–æ–∑–¥–∞–µ—Ç middleware —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    
    Args:
        token_validator: –í–∞–ª–∏–¥–∞—Ç–æ—Ä —Ç–æ–∫–µ–Ω–æ–≤
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        
    Returns:
        Middleware —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è Flask
    """
    config = config or {}
    auth_config = config.get('auth', {})
    debug_mode = auth_config.get('debug_mode', False)
    debug_user = auth_config.get('debug_user', {
        'user_id': 'debug_user',
        'email': 'debug@localhost',
        'name': 'Debug User'
    })
    
    def auth_middleware():
        """Middleware –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö"""
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –∏ health check
        if (request.endpoint == 'static' or
            request.path.startswith('/static/') or
            request.path == '/health'):
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–µ–∂–∏–º
        logger.debug(f"üîß Middleware: debug_mode={debug_mode}, path={request.path}")
        if debug_mode:
            UserContext.set_current_user(debug_user)
            logger.info(f"üîß Middleware: –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {debug_user['user_id']}")
            return
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            is_valid, user_info, error = token_validator.validate_request()
            
            if is_valid and user_info:
                UserContext.set_current_user(user_info)
                logger.debug(f"Middleware: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_info['user_id']}")
            else:
                UserContext.clear_current_user()
                if error:
                    logger.debug(f"Middleware: –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {error}")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ middleware –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            UserContext.clear_current_user()
    
    return auth_middleware

def create_auth_teardown():
    """
    –°–æ–∑–¥–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é teardown –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Returns:
        Teardown —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è Flask
    """
    def auth_teardown(exception=None):
        """Teardown –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            UserContext.clear_current_user()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ teardown –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
    
    return auth_teardown