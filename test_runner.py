#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫ —Å–∏—Å—Ç–µ–º—ã –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã
"""

import json
import os
import sys
from typing import Dict, List, Tuple, Any
import tempfile
import shutil

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
try:
    from config_validator import ConfigValidator
except ImportError:
    print("‚ùå config_validator.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    sys.exit(1)

try:
    from team_identifier import TeamIdentifier
except ImportError:
    print("‚ùå team_identifier.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    sys.exit(1)

class SystemTester:
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫ —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self):
        self.test_results = []
        self.temp_dir = None
        
    def run_all_tests(self) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
        print("üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ò–î–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò")
        print("=" * 70)
        
        self.setup_test_environment()
        
        try:
            # –¢–µ—Å—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            self.test_config_validation()
            self.test_config_loading()
            self.test_invalid_configs()
            
            # –¢–µ—Å—Ç—ã –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            self.test_team_identifier_initialization()
            self.test_participant_identification()
            self.test_speaker_replacements()
            self.test_edge_cases()
            
            # –¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            self.test_performance()
            
            # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
            self.print_test_summary()
            
        finally:
            self.cleanup_test_environment()
        
        return all(result["passed"] for result in self.test_results)
    
    def setup_test_environment(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        self.temp_dir = tempfile.mkdtemp()
        print(f"üìÅ –¢–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ: {self.temp_dir}")
    
    def cleanup_test_environment(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        if self.temp_dir and os.path.exists(self.temp_dir):
            shutil.rmtree(self.temp_dir)
            print(f"üßπ –¢–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ")
    
    def add_test_result(self, test_name: str, passed: bool, details: str = ""):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞"""
        self.test_results.append({
            "name": test_name,
            "passed": passed,
            "details": details
        })
        
        status = "‚úÖ" if passed else "‚ùå"
        print(f"{status} {test_name}")
        if details and not passed:
            print(f"   {details}")
    
    def create_test_config(self, config_data: Dict, filename: str = "test_config.json") -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        config_path = os.path.join(self.temp_dir, filename)
        with open(config_path, "w", encoding="utf-8") as f:
            json.dump(config_data, f, ensure_ascii=False, indent=2)
        return config_path
    
    def test_config_validation(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        print("\nüîç –¢–ï–°–¢–´ –í–ê–õ–ò–î–ê–¶–ò–ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò")
        print("-" * 40)
        
        # –¢–µ—Å—Ç 1: –í–∞–ª–∏–¥–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        valid_config = {
            "team_identification": {
                "enabled": True,
                "apply_to_templates": ["standup", "project"],
                "confidence_threshold": 0.7,
                "fuzzy_matching": True,
                "partial_name_matching": True
            },
            "team_members": {
                "development": {
                    "john_doe": {
                        "full_name": "John Doe",
                        "role": "Developer",
                        "team": "development",
                        "aliases": ["John", "JD"],
                        "voice_keywords": ["john", "doe"]
                    }
                }
            },
            "identification_rules": {
                "matching_strategies": [
                    {"strategy": "exact_name_match", "weight": 1.0},
                    {"strategy": "alias_match", "weight": 0.9}
                ]
            }
        }
        
        config_path = self.create_test_config(valid_config)
        validator = ConfigValidator(config_path)
        is_valid, errors, warnings = validator.validate()
        
        self.add_test_result(
            "–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏",
            is_valid and len(errors) == 0,
            f"–û—à–∏–±–∫–∏: {errors}" if errors else ""
        )
        
        # –¢–µ—Å—Ç 2: –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        invalid_config = {
            "team_identification": {
                "enabled": "not_boolean",  # –û—à–∏–±–∫–∞: –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å boolean
                "confidence_threshold": 1.5  # –û—à–∏–±–∫–∞: –±–æ–ª—å—à–µ 1.0
            },
            "team_members": {
                "development": {
                    "john_doe": {
                        "role": "Developer"
                        # –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç full_name
                    }
                }
            }
        }
        
        config_path = self.create_test_config(invalid_config, "invalid_config.json")
        validator = ConfigValidator(config_path)
        is_valid, errors, warnings = validator.validate()
        
        self.add_test_result(
            "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –≤ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏",
            not is_valid and len(errors) > 0,
            f"–ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫: {len(errors)}"
        )
    
    def test_config_loading(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        print("\nüìÅ –¢–ï–°–¢–´ –ó–ê–ì–†–£–ó–ö–ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò")
        print("-" * 40)
        
        # –¢–µ—Å—Ç 1: –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞
        test_config = {
            "team_identification": {"enabled": True},
            "team_members": {"test_team": {}}
        }
        
        config_path = self.create_test_config(test_config)
        identifier = TeamIdentifier(config_path)
        
        self.add_test_result(
            "–ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏",
            identifier.config.get("team_identification", {}).get("enabled") == True,
            "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
        )
        
        # –¢–µ—Å—Ç 2: –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞
        non_existent_path = os.path.join(self.temp_dir, "non_existent.json")
        identifier = TeamIdentifier(non_existent_path)
        
        self.add_test_result(
            "–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏",
            len(identifier.config) == 0,
            "–í–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –ø—É—Å—Ç–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"
        )
        
        # –¢–µ—Å—Ç 3: –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON
        invalid_json_path = os.path.join(self.temp_dir, "invalid.json")
        with open(invalid_json_path, "w") as f:
            f.write("{ invalid json }")
        
        identifier = TeamIdentifier(invalid_json_path)
        
        self.add_test_result(
            "–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ JSON",
            len(identifier.config) == 0,
            "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
        )
    
    def test_invalid_configs(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        print("\n‚ö†Ô∏è –¢–ï–°–¢–´ –ù–ï–í–ê–õ–ò–î–ù–´–• –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ô")
        print("-" * 40)
        
        test_cases = [
            {
                "name": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç team_identification",
                "config": {"team_members": {}},
                "should_have_errors": True
            },
            {
                "name": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç team_members",
                "config": {"team_identification": {"enabled": True}},
                "should_have_errors": True
            },
            {
                "name": "–ü—É—Å—Ç–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è",
                "config": {},
                "should_have_errors": True
            },
            {
                "name": "–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
                "config": {
                    "team_identification": {"enabled": True},
                    "team_members": {
                        "team1": {
                            "user1": {"full_name": "John Doe", "role": "Dev", "team": "team1"}
                        },
                        "team2": {
                            "user2": {"full_name": "John Doe", "role": "QA", "team": "team2"}
                        }
                    }
                },
                "should_have_errors": True
            }
        ]
        
        for test_case in test_cases:
            config_path = self.create_test_config(test_case["config"], f"{test_case['name']}.json")
            validator = ConfigValidator(config_path)
            is_valid, errors, warnings = validator.validate()
            
            expected_result = not test_case["should_have_errors"]
            actual_result = is_valid
            
            self.add_test_result(
                f"–¢–µ—Å—Ç: {test_case['name']}",
                expected_result == actual_result,
                f"–û—à–∏–±–∫–∏: {len(errors)}, –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {len(warnings)}"
            )
    
    def test_team_identifier_initialization(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é TeamIdentifier"""
        print("\nüîß –¢–ï–°–¢–´ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò TEAMIDENTIFIER")
        print("-" * 40)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        test_config = {
            "team_identification": {
                "enabled": True,
                "apply_to_templates": ["standup"],
                "confidence_threshold": 0.8
            },
            "team_members": {
                "development": {
                    "dev1": {
                        "full_name": "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤",
                        "role": "Senior Developer",
                        "team": "development",
                        "aliases": ["–ò–≤–∞–Ω", "–í–∞–Ω—è"],
                        "voice_keywords": ["–∏–≤–∞–Ω", "–≤–∞–Ω—è"]
                    }
                },
                "testing": {
                    "qa1": {
                        "full_name": "–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞",
                        "role": "QA Engineer",
                        "team": "testing",
                        "aliases": ["–ú–∞—Ä–∏—è", "–ú–∞—à–∞"],
                        "voice_keywords": ["–º–∞—Ä–∏—è", "–º–∞—à–∞"]
                    }
                }
            }
        }
        
        config_path = self.create_test_config(test_config)
        identifier = TeamIdentifier(config_path)
        
        # –¢–µ—Å—Ç 1: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        self.add_test_result(
            "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –≤–∞–ª–∏–¥–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π",
            identifier.identification_enabled == True,
            "–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞"
        )
        
        # –¢–µ—Å—Ç 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã
        self.add_test_result(
            "–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã",
            len(identifier.team_members) == 2,
            f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(identifier.team_members)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
        )
        
        # –¢–µ—Å—Ç 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
        dev1_member = identifier.team_members.get("dev1", {})
        search_terms = dev1_member.get("search_terms", [])
        
        self.add_test_result(
            "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤",
            len(search_terms) > 0 and "–∏–≤–∞–Ω" in search_terms,
            f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(search_terms)} —Ç–µ—Ä–º–∏–Ω–æ–≤"
        )
        
        # –¢–µ—Å—Ç 4: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã
        stats = identifier.get_team_statistics()
        
        self.add_test_result(
            "–ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã",
            stats["total_members"] == 2 and len(stats["teams"]) == 2,
            f"–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {stats['total_members']}, –∫–æ–º–∞–Ω–¥: {len(stats['teams'])}"
        )
    
    def test_participant_identification(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        print("\nüéØ –¢–ï–°–¢–´ –ò–î–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò –£–ß–ê–°–¢–ù–ò–ö–û–í")
        print("-" * 40)
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        test_config = {
            "team_identification": {
                "enabled": True,
                "apply_to_templates": ["standup", "test"],
                "confidence_threshold": 0.6
            },
            "team_members": {
                "development": {
                    "vlad": {
                        "full_name": "–í–ª–∞–¥–∏—Å–ª–∞–≤ –£–ª—å—è–Ω–æ–≤",
                        "role": "Team Lead",
                        "team": "development",
                        "aliases": ["–í–ª–∞–¥–∏—Å–ª–∞–≤", "–í–ª–∞–¥", "–£–ª—å—è–Ω–æ–≤"],
                        "voice_keywords": ["–≤–ª–∞–¥–∏—Å–ª–∞–≤", "–≤–ª–∞–¥", "—É–ª—å—è–Ω–æ–≤"]
                    }
                },
                "testing": {
                    "yulia": {
                        "full_name": "–Æ–ª–∏—è –î–µ–Ω—å—á–µ–Ω–∫–æ",
                        "role": "QA Lead",
                        "team": "testing",
                        "aliases": ["–Æ–ª–∏—è", "–Æ–ª—è", "–î–µ–Ω—å—á–µ–Ω–∫–æ"],
                        "voice_keywords": ["—é–ª–∏—è", "—é–ª—è", "–¥–µ–Ω—å—á–µ–Ω–∫–æ"]
                    }
                }
            }
        }
        
        config_path = self.create_test_config(test_config)
        identifier = TeamIdentifier(config_path)
        
        # –¢–µ—Å—Ç 1: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ –ø–æ–ª–Ω–æ–º—É –∏–º–µ–Ω–∏
        transcript1 = "–°–ø–∏–∫–µ—Ä 0: –í–ª–∞–¥–∏—Å–ª–∞–≤, –∫–∞–∫ –¥–µ–ª–∞ —Å –∑–∞–¥–∞—á–µ–π?"
        result1 = identifier.identify_participants(transcript1, "test")
        
        self.add_test_result(
            "–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ –ø–æ–ª–Ω–æ–º—É –∏–º–µ–Ω–∏",
            result1.get("identified", False) and len(result1.get("speakers", {})) > 0,
            f"–ò–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ —Å–ø–∏–∫–µ—Ä–æ–≤: {len(result1.get('speakers', {}))}"
        )
        
        # –¢–µ—Å—Ç 2: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ –ø—Å–µ–≤–¥–æ–Ω–∏–º—É
        transcript2 = "–°–ø–∏–∫–µ—Ä 1: –í–ª–∞–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ –Ω–æ–≤–æ–π —Ñ–∏—á–µ–π"
        result2 = identifier.identify_participants(transcript2, "test")
        
        identified = result2.get("identified", False)
        speaker_info = list(result2.get("speakers", {}).values())
        correct_identification = (identified and len(speaker_info) > 0 and 
                                speaker_info[0].get("full_name") == "–í–ª–∞–¥–∏—Å–ª–∞–≤ –£–ª—å—è–Ω–æ–≤")
        
        self.add_test_result(
            "–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ –ø—Å–µ–≤–¥–æ–Ω–∏–º—É",
            correct_identification,
            f"–°–ø–∏–∫–µ—Ä –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –∫–∞–∫: {speaker_info[0].get('full_name', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') if speaker_info else '–Ω–∏–∫—Ç–æ'}"
        )
        
        # –¢–µ—Å—Ç 3: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
        transcript3 = """
–°–ø–∏–∫–µ—Ä 0: –í–ª–∞–¥, –∫–∞–∫ –¥–µ–ª–∞ —Å –∑–∞–¥–∞—á–µ–π?
–°–ø–∏–∫–µ—Ä 1: –•–æ—Ä–æ—à–æ, –ø–æ—á—Ç–∏ –∑–∞–∫–æ–Ω—á–∏–ª. –Æ–ª—è, –≥–æ—Ç–æ–≤—ã —Ç–µ—Å—Ç—ã?
–°–ø–∏–∫–µ—Ä 2: –î–∞, –í–ª–∞–¥–∏—Å–ª–∞–≤, —Ç–µ—Å—Ç—ã –≥–æ—Ç–æ–≤—ã.
"""
        result3 = identifier.identify_participants(transcript3, "test")
        
        self.add_test_result(
            "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è",
            len(result3.get("speakers", {})) >= 2,
            f"–ò–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ —Å–ø–∏–∫–µ—Ä–æ–≤: {len(result3.get('speakers', {}))}"
        )
        
        # –¢–µ—Å—Ç 4: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫ —à–∞–±–ª–æ–Ω–∞–º
        should_apply_standup = identifier.should_apply_identification("standup")
        should_not_apply_business = identifier.should_apply_identification("business")
        
        self.add_test_result(
            "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —à–∞–±–ª–æ–Ω–∞–º",
            should_apply_standup and not should_not_apply_business,
            f"standup: {should_apply_standup}, business: {should_not_apply_business}"
        )
    
    def test_speaker_replacements(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–º–µ–Ω—É —Å–ø–∏–∫–µ—Ä–æ–≤ –≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–µ"""
        print("\nüîÑ –¢–ï–°–¢–´ –ó–ê–ú–ï–ù–´ –°–ü–ò–ö–ï–†–û–í")
        print("-" * 40)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        test_config = {
            "team_identification": {"enabled": True, "confidence_threshold": 0.5},
            "team_members": {
                "development": {
                    "vlad": {
                        "full_name": "–í–ª–∞–¥–∏—Å–ª–∞–≤ –£–ª—å—è–Ω–æ–≤",
                        "role": "Developer",
                        "team": "development",
                        "aliases": ["–í–ª–∞–¥"],
                        "voice_keywords": ["–≤–ª–∞–¥"]
                    }
                }
            },
            "output_formatting": {"include_roles": False}
        }
        
        config_path = self.create_test_config(test_config)
        identifier = TeamIdentifier(config_path)
        
        original_transcript = "–°–ø–∏–∫–µ—Ä 0: –í–ª–∞–¥, –∫–∞–∫ –¥–µ–ª–∞?"
        modified_transcript = identifier.apply_speaker_replacements(original_transcript, "standup")
        
        self.add_test_result(
            "–ó–∞–º–µ–Ω–∞ —Å–ø–∏–∫–µ—Ä–æ–≤ –≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–µ",
            "–í–ª–∞–¥–∏—Å–ª–∞–≤ –£–ª—å—è–Ω–æ–≤" in modified_transcript,
            f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {modified_transcript[:50]}..."
        )
    
    def test_edge_cases(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏"""
        print("\nüå™Ô∏è –¢–ï–°–¢–´ –ü–û–ì–†–ê–ù–ò–ß–ù–´–• –°–õ–£–ß–ê–ï–í")
        print("-" * 40)
        
        # –¢–µ—Å—Ç 1: –ü—É—Å—Ç–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
        empty_config = {
            "team_identification": {"enabled": True},
            "team_members": {"test": {"user": {"full_name": "Test User", "role": "Tester", "team": "test"}}}
        }
        
        config_path = self.create_test_config(empty_config)
        identifier = TeamIdentifier(config_path)
        
        result = identifier.identify_participants("", "standup")
        
        self.add_test_result(
            "–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç–æ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞",
            result.get("identified", False) == False or len(result.get("speakers", {})) == 0,
            "–ü—É—Å—Ç–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
        )
        
        # –¢–µ—Å—Ç 2: –û—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
        long_transcript = "–°–ø–∏–∫–µ—Ä 0: " + "–û—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç. " * 1000
        result = identifier.identify_participants(long_transcript, "standup")
        
        self.add_test_result(
            "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞",
            True,  # –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ –ø–∞–¥–∞–µ—Ç
            "–î–ª–∏–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –±–µ–∑ –æ—à–∏–±–æ–∫"
        )
        
        # –¢–µ—Å—Ç 3: –û—Ç–∫–ª—é—á–µ–Ω–Ω–∞—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
        disabled_config = {
            "team_identification": {"enabled": False},
            "team_members": {"test": {"user": {"full_name": "Test User", "role": "Tester", "team": "test"}}}
        }
        
        config_path = self.create_test_config(disabled_config, "disabled_config.json")
        identifier = TeamIdentifier(config_path)
        
        result = identifier.identify_participants("–°–ø–∏–∫–µ—Ä 0: –¢–µ—Å—Ç", "standup")
        
        self.add_test_result(
            "–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏",
            result.get("identified", True) == False and result.get("reason") == "identification_disabled",
            f"–ü—Ä–∏—á–∏–Ω–∞: {result.get('reason', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
        )
        
        # –¢–µ—Å—Ç 4: –ù–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        low_threshold_config = {
            "team_identification": {"enabled": True, "confidence_threshold": 0.95},
            "team_members": {
                "test": {
                    "user": {
                        "full_name": "–†–µ–¥–∫–æ–µ –ò–º—è",
                        "role": "Tester",
                        "team": "test",
                        "aliases": ["–†–µ–¥–∫–æ–µ"],
                        "voice_keywords": ["—Ä–µ–¥–∫–æ–µ"]
                    }
                }
            }
        }
        
        config_path = self.create_test_config(low_threshold_config, "low_threshold.json")
        identifier = TeamIdentifier(config_path)
        
        result = identifier.identify_participants("–°–ø–∏–∫–µ—Ä 0: –ü–æ—Ö–æ–∂–µ–µ –∏–º—è", "standup")
        
        self.add_test_result(
            "–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å –≤—ã—Å–æ–∫–∏–º –ø–æ—Ä–æ–≥–æ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏",
            len(result.get("speakers", {})) == 0,  # –ù–µ –¥–æ–ª–∂–Ω–æ –Ω–∞–π—Ç–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
            f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {len(result.get('speakers', {}))}"
        )
    
    def test_performance(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã"""
        print("\n‚ö° –¢–ï–°–¢–´ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
        print("-" * 40)
        
        import time
        
        # –°–æ–∑–¥–∞–µ–º –±–æ–ª—å—à—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        large_config = {
            "team_identification": {"enabled": True, "confidence_threshold": 0.7},
            "team_members": {}
        }
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        for team_num in range(5):
            team_name = f"team_{team_num}"
            large_config["team_members"][team_name] = {}
            
            for user_num in range(20):
                user_id = f"user_{team_num}_{user_num}"
                large_config["team_members"][team_name][user_id] = {
                    "full_name": f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {team_num} {user_num}",
                    "role": f"Role {user_num}",
                    "team": team_name,
                    "aliases": [f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å{user_num}", f"User{user_num}"],
                    "voice_keywords": [f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å{user_num}", f"user{user_num}"]
                }
        
        config_path = self.create_test_config(large_config, "large_config.json")
        
        # –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        start_time = time.time()
        identifier = TeamIdentifier(config_path)
        init_time = time.time() - start_time
        
        self.add_test_result(
            "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (100 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)",
            init_time < 1.0,  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –±—ã—Å—Ç—Ä–µ–µ 1 —Å–µ–∫—É–Ω–¥—ã
            f"–í—Ä–µ–º—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {init_time:.3f}—Å"
        )
        
        # –¢–µ—Å—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        test_transcript = """
–°–ø–∏–∫–µ—Ä 0: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1 5, –∫–∞–∫ –¥–µ–ª–∞?
–°–ø–∏–∫–µ—Ä 1: User3 —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ –∑–∞–¥–∞—á–µ–π
–°–ø–∏–∫–µ—Ä 2: –ù—É–∂–Ω–æ –æ–±—Å—É–¥–∏—Ç—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å2
"""
        
        start_time = time.time()
        result = identifier.identify_participants(test_transcript, "standup")
        identification_time = time.time() - start_time
        
        self.add_test_result(
            "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏",
            identification_time < 0.5,  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –±—ã—Å—Ç—Ä–µ–µ 0.5 —Å–µ–∫—É–Ω–¥—ã
            f"–í—Ä–µ–º—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {identification_time:.3f}—Å, –Ω–∞–π–¥–µ–Ω–æ: {len(result.get('speakers', {}))}"
        )
    
    def print_test_summary(self):
        """–ü–µ—á–∞—Ç–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –ø–æ —Ç–µ—Å—Ç–∞–º"""
        print("\n" + "=" * 70)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ü–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Æ")
        print("=" * 70)
        
        total_tests = len(self.test_results)
        passed_tests = sum(1 for result in self.test_results if result["passed"])
        failed_tests = total_tests - passed_tests
        
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"‚úÖ –ü—Ä–æ—à–ª–æ: {passed_tests}")
        print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests}")
        print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {passed_tests/total_tests*100:.1f}%")
        
        if failed_tests > 0:
            print(f"\nüö® –ü–†–û–í–ê–õ–ò–í–®–ò–ï–°–Ø –¢–ï–°–¢–´:")
            for result in self.test_results:
                if not result["passed"]:
                    print(f"‚ùå {result['name']}")
                    if result["details"]:
                        print(f"   {result['details']}")
        
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        if failed_tests == 0:
            print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
        else:
            print("üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã –ø–æ–≤—Ç–æ—Ä–Ω–æ.")
            print("üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é team_config.json")
            print("üêõ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã (fuzzywuzzy)")
        
        return failed_tests == 0

def create_sample_config():
    """–°–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞–∑–µ—Ü –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    sample_config = {
        "team_identification": {
            "enabled": True,
            "apply_to_templates": ["standup", "project", "review"],
            "confidence_threshold": 0.7,
            "fuzzy_matching": True,
            "partial_name_matching": True
        },
        
        "team_members": {
            "management": {
                "egorov_oleg": {
                    "full_name": "–ï–≥–æ—Ä–æ–≤ –û–ª–µ–≥",
                    "role": "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞, product owner",
                    "team": "management",
                    "aliases": ["–û–ª–µ–≥", "–ï–≥–æ—Ä–æ–≤", "PO", "–ø—Ä–æ–¥–∞–∫—Ç –æ—É–Ω–µ—Ä"],
                    "voice_keywords": ["–æ–ª–µ–≥", "–µ–≥–æ—Ä–æ–≤", "–ø—Ä–æ–¥–∞–∫—Ç", "–æ—É–Ω–µ—Ä"]
                }
            },
            
            "development": {
                "ulyanov_vladislav": {
                    "full_name": "–£–ª—å—è–Ω–æ–≤ –í–ª–∞–¥–∏—Å–ª–∞–≤",
                    "role": "Team Lead –∫–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏",
                    "team": "development",
                    "aliases": ["–í–ª–∞–¥–∏—Å–ª–∞–≤", "–í–ª–∞–¥", "–£–ª—å—è–Ω–æ–≤", "—Ç–∏–º–ª–∏–¥"],
                    "voice_keywords": ["–≤–ª–∞–¥–∏—Å–ª–∞–≤", "–≤–ª–∞–¥", "—É–ª—å—è–Ω–æ–≤", "—Ç–∏–º–ª–∏–¥"]
                },
                "aloev_alexander": {
                    "full_name": "–ê–ª–æ–µ–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä",
                    "role": "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
                    "team": "development",
                    "aliases": ["–ê–ª–µ–∫—Å–∞–Ω–¥—Ä", "–°–∞—à–∞", "–ê–ª–æ–µ–≤"],
                    "voice_keywords": ["–∞–ª–µ–∫—Å–∞–Ω–¥—Ä", "—Å–∞—à–∞", "–∞–ª–æ–µ–≤"]
                }
            },
            
            "testing": {
                "denchenko_yulia": {
                    "full_name": "–î–µ–Ω—å—á–µ–Ω–∫–æ –Æ–ª–∏—è",
                    "role": "Team Lead –∫–æ–º–∞–Ω–¥—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
                    "team": "testing",
                    "aliases": ["–Æ–ª–∏—è", "–Æ–ª—è", "–î–µ–Ω—å—á–µ–Ω–∫–æ", "—Ç–∏–º–ª–∏–¥"],
                    "voice_keywords": ["—é–ª–∏—è", "—é–ª—è", "–¥–µ–Ω—å—á–µ–Ω–∫–æ", "—Ç–∏–º–ª–∏–¥"]
                }
            }
        },
        
        "identification_rules": {
            "speaker_mapping": {
                "enabled": True,
                "auto_replace_speakers": True,
                "create_participant_summary": True
            },
            
            "matching_strategies": [
                {"strategy": "exact_name_match", "weight": 1.0, "description": "–¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –∏–º–µ–Ω–∏"},
                {"strategy": "alias_match", "weight": 0.9, "description": "–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–º"},
                {"strategy": "voice_keyword_match", "weight": 0.8, "description": "–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞"},
                {"strategy": "partial_name_match", "weight": 0.7, "description": "–ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–º–µ–Ω–∏"},
                {"strategy": "role_context_match", "weight": 0.6, "description": "–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É —Ä–æ–ª–∏"}
            ],
            
            "context_keywords": {
                "standup": {
                    "development": ["–∫–æ–¥", "—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "—Ñ–∏—á–∞", "–±–∞–≥", "–∫–æ–º–º–∏—Ç"],
                    "testing": ["—Ç–µ—Å—Ç", "–±–∞–≥", "—Ä–µ–≥—Ä–µ—Å—Å–∏—è", "–∞–≤—Ç–æ—Ç–µ—Å—Ç—ã"],
                    "management": ["–ø–ª–∞–Ω—ã", "–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã", "—Ä–µ–ª–∏–∑", "–¥–µ–¥–ª–∞–π–Ω"]
                }
            }
        },
        
        "output_formatting": {
            "use_full_names": True,
            "include_roles": False,
            "group_by_teams": True,
            "add_team_structure": True,
            "highlight_team_leads": True
        },
        
        "fallback_options": {
            "unknown_speaker_format": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ {speaker_id}",
            "partial_match_confirmation": True,
            "suggest_similar_names": True,
            "confidence_warnings": True
        }
    }
    
    if not os.path.exists("team_config.json"):
        with open("team_config.json", "w", encoding="utf-8") as f:
            json.dump(sample_config, f, ensure_ascii=False, indent=2)
        print("‚úÖ –°–æ–∑–¥–∞–Ω –æ–±—Ä–∞–∑–µ—Ü –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ team_config.json")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    try:
        from fuzzywuzzy import fuzz
        print("‚úÖ fuzzywuzzy –¥–æ—Å—Ç—É–ø–µ–Ω")
    except ImportError:
        print("‚ùå fuzzywuzzy –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install fuzzywuzzy")
        sys.exit(1)
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–∑–µ—Ü –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ –Ω–µ—Ç
    if not os.path.exists("team_config.json"):
        print("üìù –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–∑–µ—Ü –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        create_sample_config()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    tester = SystemTester()
    success = tester.run_all_tests()
    
    if success:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
        print("\n–î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ:")
        print("python team_identification_demo.py")
        sys.exit(0)
    else:
        print("\n‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ò–õ–ò–°–¨!")
        print("–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ.")
        sys.exit(1)

if __name__ == "__main__":
    main()