#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
"""

import json
from team_identifier import TeamIdentifier

def debug_identification_step_by_step():
    """–ü–æ—à–∞–≥–æ–≤–∞—è –æ—Ç–ª–∞–¥–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    print("üîç –ü–û–®–ê–ì–û–í–ê–Ø –û–¢–õ–ê–î–ö–ê –ò–î–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
    identifier = TeamIdentifier()
    
    # –¢–µ—Å—Ç–æ–≤—ã–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
    test_transcript = "–°–ø–∏–∫–µ—Ä 0: –í–ª–∞–¥, –∫–∞–∫ –¥–µ–ª–∞?"
    print(f"üìù –¢–µ—Å—Ç–æ–≤—ã–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç: '{test_transcript}'")
    
    # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    print(f"\n1Ô∏è‚É£ –ù–ê–°–¢–†–û–ô–ö–ò:")
    print(f"   –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞: {identifier.identification_enabled}")
    print(f"   –ü—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫ 'standup': {identifier.should_apply_identification('standup')}")
    print(f"   –ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {identifier.config.get('team_identification', {}).get('confidence_threshold', 0.7)}")
    print(f"   –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {len(identifier.team_members)}")
    
    # –®–∞–≥ 2: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–ø–∏–∫–µ—Ä–æ–≤
    print(f"\n2Ô∏è‚É£ –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –°–ü–ò–ö–ï–†–û–í:")
    speakers = identifier._extract_speakers_from_transcript(test_transcript)
    print(f"   –ù–∞–π–¥–µ–Ω–æ —Å–ø–∏–∫–µ—Ä–æ–≤: {len(speakers)}")
    for speaker_id, text in speakers.items():
        print(f"   '{speaker_id}': '{text}'")
    
    # –®–∞–≥ 3: –ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ —Å–ø–∏–∫–µ—Ä–∞
    print(f"\n3Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ö–ê–ñ–î–û–ì–û –°–ü–ò–ö–ï–†–ê:")
    
    for speaker_id, speaker_text in speakers.items():
        print(f"\n   –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º '{speaker_id}': '{speaker_text}'")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        print(f"   –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:")
        best_score = 0
        best_member = None
        
        for member_id, member_info in identifier.team_members.items():
            score = identifier._calculate_match_score(speaker_text, member_info, "standup")
            
            print(f"     {member_id} ({member_info.get('full_name', '')}): {score:.3f}")
            
            if score > best_score:
                best_score = score
                best_member = member_id
        
        threshold = identifier.config.get("team_identification", {}).get("confidence_threshold", 0.7)
        print(f"   ‚Üí –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {best_member} ({best_score:.3f})")
        print(f"   ‚Üí –ü—Ä–µ–≤—ã—à–∞–µ—Ç –ø–æ—Ä–æ–≥ {threshold}: {'‚úÖ' if best_score >= threshold else '‚ùå'}")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ª—É—á—à–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        if best_member:
            print(f"\n   üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó '{best_member}':")
            member_info = identifier.team_members[best_member]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
            strategies = identifier.config.get("identification_rules", {}).get("matching_strategies", [])
            if not strategies:
                strategies = [
                    {"strategy": "exact_name_match", "weight": 1.0},
                    {"strategy": "alias_match", "weight": 0.9},
                    {"strategy": "voice_keyword_match", "weight": 0.8},
                    {"strategy": "partial_name_match", "weight": 0.7},
                    {"strategy": "role_context_match", "weight": 0.6}
                ]
            
            text_lower = speaker_text.lower()
            total_score = 0.0
            
            for strategy in strategies:
                strategy_name = strategy["strategy"]
                weight = strategy["weight"]
                score = 0.0
                
                print(f"     –°—Ç—Ä–∞—Ç–µ–≥–∏—è '{strategy_name}' (–≤–µ—Å {weight}):")
                
                if strategy_name == "exact_name_match":
                    full_name = member_info.get("full_name", "").lower()
                    if full_name in text_lower:
                        score = 1.0
                    print(f"       –ü–æ–ª–Ω–æ–µ –∏–º—è '{full_name}' –≤ '{text_lower}': {score}")
                
                elif strategy_name == "alias_match":
                    aliases = member_info.get("aliases", [])
                    print(f"       –ü—Å–µ–≤–¥–æ–Ω–∏–º—ã: {aliases}")
                    for alias in aliases:
                        if alias.lower() in text_lower:
                            score = max(score, 0.9)
                            print(f"         ‚úÖ –ù–∞–π–¥–µ–Ω –ø—Å–µ–≤–¥–æ–Ω–∏–º '{alias}' –≤ —Ç–µ–∫—Å—Ç–µ")
                    if score == 0:
                        print(f"         ‚ùå –ü—Å–µ–≤–¥–æ–Ω–∏–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ '{text_lower}'")
                
                elif strategy_name == "voice_keyword_match":
                    keywords = member_info.get("voice_keywords", [])
                    print(f"       –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {keywords}")
                    for keyword in keywords:
                        if keyword in text_lower:
                            score = max(score, 0.8)
                            print(f"         ‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '{keyword}' –≤ —Ç–µ–∫—Å—Ç–µ")
                    if score == 0:
                        print(f"         ‚ùå –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ '{text_lower}'")
                
                elif strategy_name == "partial_name_match":
                    search_terms = member_info.get("search_terms", [])
                    print(f"       –ü–æ–∏—Å–∫–æ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã: {search_terms[:5]}...")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    
                    try:
                        from fuzzywuzzy import fuzz
                        for term in search_terms:
                            if len(term) > 2:
                                fuzzy_score = fuzz.partial_ratio(term, text_lower) / 100.0
                                if fuzzy_score > 0.8:
                                    score = max(score, fuzzy_score * 0.7)
                                    print(f"         ‚úÖ –ù–µ—á–µ—Ç–∫–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ '{term}': {fuzzy_score:.3f}")
                                    break
                    except ImportError:
                        for term in search_terms:
                            if len(term) > 2 and term in text_lower:
                                score = max(score, 0.7)
                                print(f"         ‚úÖ –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞ '{term}'")
                                break
                    
                    if score == 0:
                        print(f"         ‚ùå –ü–æ–∏—Å–∫–æ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
                elif strategy_name == "role_context_match":
                    context_score = identifier._check_role_context(text_lower, member_info, "standup")
                    score = context_score
                    print(f"       –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–æ–ª–∏: {score:.3f}")
                
                weighted_score = score * weight
                total_score += weighted_score
                print(f"       ‚Üí –û—Ü–µ–Ω–∫–∞: {score:.3f}, –≤–∑–≤–µ—à–µ–Ω–Ω–∞—è: {weighted_score:.3f}")
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏—Ç–æ–≥–æ–≤—É—é –æ—Ü–µ–Ω–∫—É
            max_possible_score = sum(s["weight"] for s in strategies)
            if max_possible_score > 0:
                normalized_score = total_score / max_possible_score
            else:
                normalized_score = 0
            
            print(f"     üíØ –ò–¢–û–ì–û–í–´–ô –°–ß–ï–¢:")
            print(f"       –°—É–º–º–∞ –≤–∑–≤–µ—à–µ–Ω–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫: {total_score:.3f}")
            print(f"       –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω—ã–π: {max_possible_score:.3f}")
            print(f"       –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π: {normalized_score:.3f}")
            print(f"       –ú–∏–Ω–∏–º—É–º –∏–∑ (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π, 1.0): {min(normalized_score, 1.0):.3f}")

def test_manual_fixes():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä—É—á–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    print(f"\n4Ô∏è‚É£ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–£–ß–ù–´–• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô:")
    
    # –ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    test_cases = [
        "–≤–ª–∞–¥",
        "–í–ª–∞–¥", 
        "–≤–ª–∞–¥–∏—Å–ª–∞–≤",
        "–í–ª–∞–¥–∏—Å–ª–∞–≤",
        "vlad"
    ]
    
    identifier = TeamIdentifier()
    
    for test_word in test_cases:
        test_transcript = f"–°–ø–∏–∫–µ—Ä 0: {test_word}, –∫–∞–∫ –¥–µ–ª–∞?"
        print(f"\n   –¢–µ—Å—Ç: '{test_transcript}'")
        
        result = identifier.identify_participants(test_transcript, "standup")
        
        if result.get("identified") and result.get("speakers"):
            speaker_info = list(result["speakers"].values())[0]
            name = speaker_info.get("full_name", "Unknown")
            confidence = list(result["confidence_scores"].values())[0]
            print(f"     ‚úÖ –ù–∞–π–¥–µ–Ω: {name} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.0%})")
        else:
            print(f"     ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω")

def suggest_immediate_fixes():
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    print(f"\n5Ô∏è‚É£ –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø –ù–ï–ú–ï–î–õ–ï–ù–ù–´–• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô:")
    
    identifier = TeamIdentifier()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å –∏–º–µ–Ω–µ–º –í–ª–∞–¥–∏—Å–ª–∞–≤
    vlad_member = None
    for member_id, member_info in identifier.team_members.items():
        if "–≤–ª–∞–¥–∏—Å–ª–∞–≤" in member_info.get("full_name", "").lower():
            vlad_member = (member_id, member_info)
            break
    
    if vlad_member:
        member_id, member_info = vlad_member
        print(f"   –ù–∞–π–¥–µ–Ω —É—á–∞—Å—Ç–Ω–∏–∫: {member_info.get('full_name')}")
        print(f"   ID: {member_id}")
        print(f"   –ü—Å–µ–≤–¥–æ–Ω–∏–º—ã: {member_info.get('aliases', [])}")
        print(f"   –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {member_info.get('voice_keywords', [])}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ "–≤–ª–∞–¥" –≤ –ø—Å–µ–≤–¥–æ–Ω–∏–º–∞—Ö
        aliases = [alias.lower() for alias in member_info.get('aliases', [])]
        if "–≤–ª–∞–¥" not in aliases:
            print(f"   ‚ùå '–≤–ª–∞–¥' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ø—Å–µ–≤–¥–æ–Ω–∏–º–∞—Ö!")
            print(f"   üí° –î–æ–±–∞–≤—å—Ç–µ '–≤–ª–∞–¥' –≤ aliases –¥–ª—è {member_info.get('full_name')}")
        else:
            print(f"   ‚úÖ '–≤–ª–∞–¥' –Ω–∞–π–¥–µ–Ω –≤ –ø—Å–µ–≤–¥–æ–Ω–∏–º–∞—Ö")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        keywords = [kw.lower() for kw in member_info.get('voice_keywords', [])]
        if "–≤–ª–∞–¥" not in keywords:
            print(f"   ‚ùå '–≤–ª–∞–¥' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤–∞—Ö!")
            print(f"   üí° –î–æ–±–∞–≤—å—Ç–µ '–≤–ª–∞–¥' –≤ voice_keywords –¥–ª—è {member_info.get('full_name')}")
        else:
            print(f"   ‚úÖ '–≤–ª–∞–¥' –Ω–∞–π–¥–µ–Ω –≤ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤–∞—Ö")
    
    print(f"\n   üîß –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –î–ï–ô–°–¢–í–ò–Ø:")
    print(f"   1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ '–≤–ª–∞–¥' –µ—Å—Ç—å –≤ aliases –ò voice_keywords")
    print(f"   2. –°–Ω–∏–∑—å—Ç–µ –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –¥–æ 0.3-0.4")
    print(f"   3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ fuzzywuzzy: pip install fuzzywuzzy")
    print(f"   4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä –±—É–∫–≤ –≤ –ø—Å–µ–≤–¥–æ–Ω–∏–º–∞—Ö")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ª–∞–¥–∫–∏"""
    debug_identification_step_by_step()
    test_manual_fixes()
    suggest_immediate_fixes()

if __name__ == "__main__":
    main()
