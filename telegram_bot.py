#!/usr/bin/env python3
"""
Telegram –±–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å—Ç—Ä–µ—á —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π URL –∏ –æ–±–ª–∞—á–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
–í–µ—Ä—Å–∏—è: 2.1 —Å –ø–æ–ª–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π HTTP —Å—Å—ã–ª–æ–∫ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
"""

import os
import sys
import json
import asyncio
import tempfile
import shutil
import traceback
import re
from pathlib import Path
from typing import Dict, List, Optional, Tuple
import logging
from datetime import datetime

# Telegram bot imports
try:
    from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Document
    from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
    from telegram.constants import ParseMode, ChatAction
    from telegram.error import TelegramError
except ImportError:
    print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ python-telegram-bot:")
    print("pip install python-telegram-bot")
    sys.exit(1)

# –ù–∞—à–∏ –º–æ–¥—É–ª–∏
try:
    from meeting_processor import MeetingProcessor
except ImportError:
    print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –º–æ–¥—É–ª—å meeting_processor.py")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª meeting_processor.py –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ")
    sys.exit(1)

try:
    from url_file_processor import URLFileProcessor, URLValidator
    URL_PROCESSOR_AVAILABLE = True
except ImportError:
    print("‚ö†Ô∏è –ú–æ–¥—É–ª—å url_file_processor.py –Ω–µ –Ω–∞–π–¥–µ–Ω - URL –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∞")
    URLFileProcessor = None
    URLValidator = None
    URL_PROCESSOR_AVAILABLE = False

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging(log_level: str = "INFO", log_file: str = "telegram_bot.log"):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    from logging.handlers import RotatingFileHandler
    
    level = getattr(logging, log_level.upper(), logging.INFO)
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤
    os.makedirs("logs", exist_ok=True)
    log_path = os.path.join("logs", log_file)
    
    handlers = [
        RotatingFileHandler(log_path, maxBytes=100*1024*1024, backupCount=3, encoding='utf-8'),
        logging.StreamHandler()
    ]
    
    logging.basicConfig(
        level=level,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=handlers
    )
    
    return logging.getLogger(__name__)

class FileValidator:
    """–í–∞–ª–∏–¥–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∂–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    
    SUPPORTED_FORMATS = {
        'audio': ['.mp3', '.wav', '.flac', '.aac', '.m4a', '.ogg', '.opus', '.wma'],
        'video': ['.mp4', '.avi', '.mov', '.mkv', '.wmv', '.webm', '.flv']
    }
    
    @classmethod
    def validate_file(cls, file_obj, max_size_mb: int) -> Tuple[bool, str]:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ñ–∞–π–ª"""
        if not file_obj:
            return False, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
        if hasattr(file_obj, 'file_size') and file_obj.file_size:
            file_size_mb = file_obj.file_size / (1024 * 1024)
            if file_size_mb > max_size_mb:
                return False, f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {file_size_mb:.1f} –ú–ë (–º–∞–∫—Å–∏–º—É–º {max_size_mb} –ú–ë)"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç
        filename = getattr(file_obj, 'file_name', '') or f"file_{getattr(file_obj, 'file_id', 'unknown')}"
        file_ext = Path(filename).suffix.lower()
        
        all_formats = cls.SUPPORTED_FORMATS['audio'] + cls.SUPPORTED_FORMATS['video']
        if file_ext and file_ext not in all_formats:
            return False, (
                f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: `{file_ext}`\n\n"
                f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
                f"üéµ –ê—É–¥–∏–æ: {', '.join(cls.SUPPORTED_FORMATS['audio']).upper()}\n"
                f"üé¨ –í–∏–¥–µ–æ: {', '.join(cls.SUPPORTED_FORMATS['video']).upper()}"
            )
        
        return True, ""
    
    @classmethod
    def get_file_type(cls, filename: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Ñ–∞–π–ª–∞"""
        file_ext = Path(filename).suffix.lower()
        if file_ext in cls.SUPPORTED_FORMATS['audio']:
            return 'audio'
        elif file_ext in cls.SUPPORTED_FORMATS['video']:
            return 'video'
        return 'unknown'

class UserSession:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ —Å–µ—Å—Å–∏—è–º–∏"""
    
    def __init__(self, user_id: int, default_template: str = "standard"):
        self.user_id = user_id
        self.template = default_template
        self.processing = False
        self.current_file = None
        self.processing_start_time = None
        self.last_activity = datetime.now()
        self.current_progress = 0
        self.current_message = ""
        self.status_message_id = None  # ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    
    def start_processing(self, filename: str):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞"""
        self.processing = True
        self.current_file = filename
        self.processing_start_time = datetime.now()
        self.last_activity = datetime.now()
        self.current_progress = 0
        self.current_message = "–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏..."
        self.status_message_id = None
    
    def update_progress(self, progress: int, message: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        self.current_progress = progress
        self.current_message = message
        self.last_activity = datetime.now()
    
    def stop_processing(self):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É"""
        self.processing = False
        self.current_file = None
        self.processing_start_time = None
        self.last_activity = datetime.now()
        self.current_progress = 0
        self.current_message = ""
        self.status_message_id = None
    
    def get_processing_duration(self) -> Optional[int]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"""
        if self.processing_start_time:
            return int((datetime.now() - self.processing_start_time).total_seconds())
        return None

class MeetingBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å—Ç—Ä–µ—á"""
    
    def __init__(self, config_file: str = "bot_config.json"):
        self.config_file = config_file
        self.config = self._load_config()
        self.logger = setup_logging(
            self.config.get("logging", {}).get("log_level", "INFO"),
            self.config.get("logging", {}).get("log_file", "telegram_bot.log")
        )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        self.user_sessions: Dict[int, UserSession] = {}
        
        # –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è URL —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ ID
        self.url_storage: Dict[str, str] = {}  # short_id -> url
        self.url_counter = 0
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º API –∫–ª—é—á–∏
        self.api_keys = self._load_api_keys()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º URL –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
        self._initialize_url_processor()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'total_files_processed': 0,
            'total_urls_processed': 0,
            'total_errors': 0,
            'active_users': set(),
            'start_time': datetime.now()
        }
        
        self.logger.info("ü§ñ MeetingBot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _create_short_url_id(self, url: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π ID –¥–ª—è URL"""
        self.url_counter += 1
        short_id = f"url_{self.url_counter}"
        self.url_storage[short_id] = url
        return short_id
    
    def _get_url_by_id(self, short_id: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç URL –ø–æ –∫–æ—Ä–æ—Ç–∫–æ–º—É ID"""
        return self.url_storage.get(short_id)
    
    def _load_config(self) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–æ—Ç–∞"""
        try:
            if os.path.exists(self.config_file):
                with open(self.config_file, "r", encoding="utf-8") as f:
                    config = json.load(f)
            else:
                config = self._create_default_config()
                self._save_config(config)
                print(f"üìÅ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {self.config_file}")
            
            return config
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return self._create_default_config()
    
    def _save_config(self, config: Dict):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.config_file, "w", encoding="utf-8") as f:
                json.dump(config, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    
    def _create_default_config(self) -> Dict:
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return {
            "telegram": {
                "allowed_users": [],
                "admin_users": [],
                "max_file_size_mb": 100
            },
            "processing": {
                "default_template": "standard",
                "max_concurrent_jobs": 3,
                "processing_timeout": 1800,
                "deepgram_timeout": 300,
                "chunk_duration_minutes": 15,
                "progress_update_interval": 5  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            },
            "url_processing": {
                "enabled": True,
                "max_file_size_mb": 500,
                "download_timeout_seconds": 1800,
                "auto_detect_links": True,
                "cloud_services": {
                    "google_drive": True,
                    "yandex_disk": True
                }
            },
            "notifications": {
                "send_progress_updates": True,
                "notify_on_completion": True,
                "notify_on_error": True
            },
            "logging": {
                "log_level": "INFO",
                "log_file": "telegram_bot.log"
            }
        }
    
    def _load_api_keys(self) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç API –∫–ª—é—á–∏ –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        api_keys = {}
        
        # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞
        try:
            if os.path.exists("api_keys.json"):
                with open("api_keys.json", "r", encoding="utf-8") as f:
                    file_keys = json.load(f)
                    api_keys = file_keys.get("api_keys", {})
        except Exception as e:
            if hasattr(self, 'logger'):
                self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å api_keys.json: {e}")
        
        # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–ª—é—á–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Ñ–∞–π–ª–µ
        env_deepgram = os.getenv('DEEPGRAM_API_KEY')
        env_claude = os.getenv('CLAUDE_API_KEY')
        env_telegram = os.getenv('TELEGRAM_BOT_TOKEN')
        
        if env_deepgram and not api_keys.get('deepgram'):
            api_keys['deepgram'] = env_deepgram
            if hasattr(self, 'logger'):
                self.logger.info("üîë –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω Deepgram API –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        if env_claude and not api_keys.get('claude'):
            api_keys['claude'] = env_claude
            if hasattr(self, 'logger'):
                self.logger.info("üîë –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω Claude API –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        if env_telegram and not api_keys.get('telegram_bot_token'):
            api_keys['telegram_bot_token'] = env_telegram
            if hasattr(self, 'logger'):
                self.logger.info("üîë –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω Telegram Bot —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        elif api_keys.get('telegram_bot_token'):
            if hasattr(self, 'logger'):
                self.logger.info("üîë –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω Telegram Bot —Ç–æ–∫–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞")
        
        return {"api_keys": api_keys}
    
    def _initialize_url_processor(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç URL –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä"""
        url_config = self.config.get("url_processing", {})
        
        if URL_PROCESSOR_AVAILABLE and url_config.get("enabled", True):
            try:
                max_size = url_config.get("max_file_size_mb", 500)
                timeout = url_config.get("download_timeout_seconds", 1800)
                
                self.url_processor = URLFileProcessor(max_size, timeout)
                self.url_validator = URLValidator()
                
                self.logger.info("‚úÖ URL –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ URL –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: {e}")
                self.url_processor = None
                self.url_validator = None
        else:
            self.url_processor = None
            self.url_validator = None
            if not URL_PROCESSOR_AVAILABLE:
                self.logger.info("‚ö†Ô∏è URL –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –º–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            else:
                self.logger.info("‚ö†Ô∏è URL –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    
    def get_user_session(self, user_id: int) -> UserSession:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.user_sessions:
            default_template = self.config.get("processing", {}).get("default_template", "standard")
            self.user_sessions[user_id] = UserSession(user_id, default_template)
            self.stats['active_users'].add(user_id)
        return self.user_sessions[user_id]
    
    def is_user_allowed(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        allowed_users = self.config.get("telegram", {}).get("allowed_users", [])
        return len(allowed_users) == 0 or user_id in allowed_users
    
    def is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        admin_users = self.config.get("telegram", {}).get("admin_users", [])
        return user_id in admin_users
    
    def _validate_api_keys(self) -> Tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö API –∫–ª—é—á–µ–π"""
        api_keys = self.api_keys.get("api_keys", {})
        
        if not api_keys.get("deepgram"):
            return False, "‚ùå API –∫–ª—é—á Deepgram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        
        if not api_keys.get("claude"):
            return False, "‚ùå API –∫–ª—é—á Claude –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        
        return True, ""
    
    def _create_progress_callback(self, user_session: UserSession, context: ContextTypes.DEFAULT_TYPE, chat_id: int):
        """–°–æ–∑–¥–∞–µ—Ç callback —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        last_update_time = 0
        update_interval = self.config.get("processing", {}).get("progress_update_interval", 5)
        
        async def progress_callback(progress: int, message: str):
            nonlocal last_update_time
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
            user_session.update_progress(progress, message)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ Telegram
            current_time = datetime.now().timestamp()
            send_progress_updates = self.config.get("notifications", {}).get("send_progress_updates", True)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –µ—Å–ª–∏:
            # 1. –í–∫–ª—é—á–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
            # 2. –ü—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ò–õ–ò —ç—Ç–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ (100%)
            # 3. –≠—Ç–æ –≤–∞–∂–Ω—ã–µ —ç—Ç–∞–ø—ã (–∫—Ä–∞—Ç–Ω—ã–µ 25% –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ)
            should_update = (
                send_progress_updates and 
                (current_time - last_update_time >= update_interval or progress == 100 or progress == 0) and
                (progress % 25 == 0 or progress == 100 or progress == 0)
            )
            
            if should_update:
                try:
                    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
                    progress_bar = self._create_progress_bar(progress)
                    duration = user_session.get_processing_duration()
                    duration_text = f" ({duration}—Å)" if duration else ""
                    
                    status_text = (
                        f"üîÑ *–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞*\n\n"
                        f"{progress_bar}\n"
                        f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}%\n"
                        f"üìù –≠—Ç–∞–ø: {message}\n"
                        f"‚è±Ô∏è –í—Ä–µ–º—è: {duration_text}\n"
                        f"üìÅ –§–∞–π–ª: `{user_session.current_file}`"
                    )
                    
                    if progress == 100:
                        status_text = (
                            f"‚úÖ *–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\n"
                            f"{progress_bar}\n"
                            f"üìÅ –§–∞–π–ª: `{user_session.current_file}`\n"
                            f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {duration_text}\n\n"
                            f"üìé –§–∞–π–ª—ã –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è..."
                        )
                    elif progress == 0:
                        status_text = (
                            f"‚ùå *–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏*\n\n"
                            f"üìÅ –§–∞–π–ª: `{user_session.current_file}`\n"
                            f"üí¨ –û—à–∏–±–∫–∞: {message}\n\n"
                            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                        )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    if user_session.status_message_id:
                        try:
                            await context.bot.edit_message_text(
                                chat_id=chat_id,
                                message_id=user_session.status_message_id,
                                text=status_text,
                                parse_mode=ParseMode.MARKDOWN
                            )
                        except Exception:
                            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                            message = await context.bot.send_message(
                                chat_id=chat_id,
                                text=status_text,
                                parse_mode=ParseMode.MARKDOWN
                            )
                            user_session.status_message_id = message.message_id
                    else:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        message = await context.bot.send_message(
                            chat_id=chat_id,
                            text=status_text,
                            parse_mode=ParseMode.MARKDOWN
                        )
                        user_session.status_message_id = message.message_id
                    
                    last_update_time = current_time
                    
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
        
        # –°–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        def sync_progress_callback(progress: int, message: str):
            try:
                import asyncio as aio
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π event loop
                try:
                    loop = aio.get_running_loop()
                    # –ï—Å–ª–∏ loop —É–∂–µ –∑–∞–ø—É—â–µ–Ω, —Å–æ–∑–¥–∞–µ–º task
                    loop.create_task(progress_callback(progress, message))
                except RuntimeError:
                    # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ loop, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
                    aio.run(progress_callback(progress, message))
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ sync_progress_callback: {e}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –æ–±–µ–∏–º–∏ –≤–µ—Ä—Å–∏—è–º–∏
        progress_callback.sync = sync_progress_callback
        return progress_callback
    
    def _create_progress_bar(self, progress: int, length: int = 20) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä"""
        filled = int(length * progress / 100)
        bar = "‚ñà" * filled + "‚ñë" * (length - filled)
        return f"[{bar}] {progress}%"
    
    # ==================== URL PROCESSING ====================
    
    def _extract_urls_from_message(self, message_text: str) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç URL –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not self.url_processor:
            return []
        
        return self.url_processor.extract_urls_from_text(message_text)
    
    async def _process_url_file(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                            url: str, template_name: str) -> Tuple[bool, Optional[str], Optional[str]]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª –ø–æ URL"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
            if update.message:
                reply_func = update.message.reply_text
                chat_id = update.message.chat_id
            elif update.callback_query:
                reply_func = update.callback_query.message.reply_text
                chat_id = update.callback_query.message.chat_id
            else:
                self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–ø–æ—Å–æ–± –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
                return False, None, None
            
            if not self.url_processor:
                await reply_func("‚ùå URL –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                return False, None, None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å URL
            is_safe, reason = self.url_validator.is_safe_url(url)
            if not is_safe:
                await reply_func(f"‚ùå URL –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {reason}")
                return False, None, None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É URL
            is_supported, reason = self.url_processor.is_supported_url(url)
            if not is_supported:
                await reply_func(f"‚ùå URL –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è: {reason}")
                return False, None, None
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            await reply_func("üîç –ü—Ä–æ–≤–µ—Ä—è—é —Ñ–∞–π–ª –ø–æ —Å—Å—ã–ª–∫–µ...")
            
            async with self.url_processor as processor:
                file_info = await processor.get_file_info(url)
                
                if not file_info:
                    await reply_func("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ")
                    return False, None, None
                
                if not file_info['supported']:
                    await reply_func(f"‚ùå {file_info['reason']}")
                    return False, None, None
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ (–±–µ–∑–æ–ø–∞—Å–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º)
                file_type_emoji = "üéµ" if "audio" in file_info['content_type'] else "üé¨"
                cloud_info = f"\n‚òÅÔ∏è –°–µ—Ä–≤–∏—Å: {self._escape_markdown(file_info['cloud_service'].title())}" if file_info['is_cloud'] else ""
                
                # –û—á–∏—â–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (—Ç–∞–∫ –∫–∞–∫ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º backticks)
                filename = self._clean_filename_for_display(file_info['filename'])
                content_type = self._escape_markdown(file_info['content_type'])
                template_escaped = self._escape_markdown(template_name)
                
                info_message = (
                    f"{file_type_emoji} *–§–∞–π–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ω:*\n"
                    f"üìé –ò–º—è: {filename}\n"
                    f"üìä –†–∞–∑–º–µ—Ä: {file_info['size_mb']} –ú–ë\n"
                    f"üéØ –¢–∏–ø: {content_type}{cloud_info}\n"
                    f"üìù –®–∞–±–ª–æ–Ω: {template_escaped}\n\n"
                    f"‚è≥ –ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É..."
                )
                
                await reply_func(info_message)
                
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                temp_dir = tempfile.mkdtemp(prefix="url_download_")
                
                try:
                    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
                    await reply_func("üì• –°–∫–∞—á–∏–≤–∞—é —Ñ–∞–π–ª...")
                    result = await processor.download_file(url, temp_dir)
                    
                    if not result:
                        await reply_func("‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞")
                        return False, None, None
                    
                    file_path, updated_file_info = result
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
                    success, transcript_file, summary_file = await self._process_with_meeting_processor(
                        update, context, file_path, template_name, chat_id
                    )
                    
                    return success, transcript_file, summary_file
                    
                finally:
                    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                    try:
                        shutil.rmtree(temp_dir)
                    except Exception:
                        pass
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ URL {url}: {e}")
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ (–±–µ–∑ markdown)
            try:
                error_message = f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}"
                if update.message:
                    await update.message.reply_text(error_message)
                elif update.callback_query:
                    await update.callback_query.message.reply_text(error_message)
            except Exception:
                self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ")
            
            return False, None, None    
    
    def _clean_filename_for_display(self, filename: str) -> str:
        """–û—á–∏—â–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if not filename or filename == '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ':
            return filename
        
        # –ó–∞–º–µ–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω—ã–µ —Å–ª–µ—à–∏ –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
        filename = filename.replace('\\', '_')
        
        # –ó–∞–º–µ–Ω—è–µ–º –¥—Ä—É–≥–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        problematic_chars = ['<', '>', ':', '"', '|', '?', '*']
        for char in problematic_chars:
            filename = filename.replace(char, '_')
        
        # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
        while '__' in filename:
            filename = filename.replace('__', '_')
        
        return filename
    
    def _escape_markdown(self, text: str) -> str:
        """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown"""
        if not text:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        # –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤ Markdown
        # –£–±–∏—Ä–∞–µ–º –¥–µ—Ñ–∏—Å –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤
        special_chars = ['*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '=', '|', '{', '}', '!']
        
        for char in special_chars:
            text = text.replace(char, f'\\{char}')
        
        return text
    
    def _escape_markdown_filename(self, text: str) -> str:
        """–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤ (–±–µ–∑ –¥–µ—Ñ–∏—Å–æ–≤ –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–π)"""
        if not text:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        # –î–ª—è –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        special_chars = ['*', '[', ']', '`']
        
        for char in special_chars:
            text = text.replace(char, f'\\{char}')
        
        return text

    async def _show_url_file_info(self, update: Update, url: str):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –ø–æ URL"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            if update.message:
                chat_id = update.message.chat_id
                reply_func = update.message.reply_text
            elif update.callback_query:
                chat_id = update.callback_query.message.chat_id
                reply_func = update.callback_query.message.reply_text
            else:
                self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å chat_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
                return
            
            if not self.url_processor:
                await reply_func("‚ùå URL –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                return
            
            await reply_func("üîç –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ...")
            
            async with self.url_processor as processor:
                file_info = await processor.get_file_info(url)
                
                if not file_info:
                    await reply_func("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ")
                    return
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π (–±–µ–∑–æ–ø–∞—Å–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º)
                file_type_emoji = "üéµ" if "audio" in file_info['content_type'] else "üé¨"
                status_emoji = "‚úÖ" if file_info['supported'] else "‚ùå"
                cloud_info = f"\n‚òÅÔ∏è –°–µ—Ä–≤–∏—Å: {self._escape_markdown(file_info['cloud_service'].title())}" if file_info['is_cloud'] else ""
                
                # –û—á–∏—â–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (—Ç–∞–∫ –∫–∞–∫ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º backticks)
                filename = self._clean_filename_for_display(file_info['filename'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                content_type = self._escape_markdown(file_info['content_type'])
                reason = self._escape_markdown(file_info['reason'])
                
                # –û–±—Ä–µ–∑–∞–µ–º URL –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                display_url = file_info['original_url'][:50]
                if len(file_info['original_url']) > 50:
                    display_url += "\\.\\.\\."
                display_url = self._escape_markdown(display_url)
                
                info_message = (
                    f"{file_type_emoji} *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ:*\n\n"
                    f"üìé –ò–º—è: {filename}\n"
                    f"üìä –†–∞–∑–º–µ—Ä: {file_info['size_mb']} –ú–ë\n"
                    f"üéØ –¢–∏–ø: {content_type}\n"
                    f"üîó URL: {display_url}{cloud_info}\n\n"
                    f"{status_emoji} *–°—Ç–∞—Ç—É—Å:* {reason}"
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
                if file_info['supported']:
                    # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π ID –¥–ª—è URL
                    short_id = self._create_short_url_id(url)
                    
                    keyboard = [
                        [InlineKeyboardButton("üîÑ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª", callback_data=f"process:{short_id}")],
                        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    
                    await reply_func(
                        info_message,
                        reply_markup=reply_markup
                    )
                else:
                    await reply_func(info_message)
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ {url}: {e}")
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ (–±–µ–∑ markdown)
            try:
                error_message = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
                if update.message:
                    await update.message.reply_text(error_message)
                elif update.callback_query:
                    await update.callback_query.message.reply_text(error_message)
            except Exception:
                self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ")
    
    # ==================== FILE PROCESSING ====================
    
    async def _download_file(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                           file_obj, filename: str = None) -> Tuple[Optional[str], Optional[str]]:
        """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é"""
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            temp_dir = tempfile.mkdtemp(prefix="meetingbot_")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            if not filename:
                if hasattr(file_obj, 'file_name') and file_obj.file_name:
                    filename = file_obj.file_name
                else:
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                    file_id = getattr(file_obj, 'file_id', 'unknown')[:8]
                    mime_type = getattr(file_obj, 'mime_type', '')
                    
                    # –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º MIME —Ç–∏–ø—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏
                    mime_to_ext = {
                        'audio/mpeg': '.mp3', 'audio/mp3': '.mp3', 'audio/wav': '.wav',
                        'audio/flac': '.flac', 'audio/aac': '.aac', 'audio/ogg': '.ogg',
                        'video/mp4': '.mp4', 'video/avi': '.avi', 'video/quicktime': '.mov'
                    }
                    
                    ext = mime_to_ext.get(mime_type.lower(), '.bin')
                    filename = f"file_{file_id}{ext}"
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            filename = "".join(c for c in filename if c.isalnum() or c in "._-")
            if not filename:
                filename = f"file_{getattr(file_obj, 'file_id', 'unknown')[:8]}.bin"
            
            file_path = Path(temp_dir) / filename
            
            await update.message.reply_text("üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞...")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            file = await context.bot.get_file(file_obj.file_id)
            await file.download_to_drive(file_path)
            
            self.logger.info(f"üì• –§–∞–π–ª —Å–∫–∞—á–∞–Ω: {file_path}")
            return str(file_path), temp_dir
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}")
            return None, None
    
    async def _process_with_meeting_processor(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                            file_path: str, template_name: str, chat_id: int = None) -> Tuple[bool, Optional[str], Optional[str]]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª —Å –ø–æ–º–æ—â—å—é MeetingProcessor"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º chat_id –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
            if chat_id is None:
                if update.message:
                    chat_id = update.message.chat_id
                    reply_func = update.message.reply_text
                elif update.callback_query:
                    chat_id = update.callback_query.message.chat_id
                    reply_func = update.callback_query.message.reply_text
                else:
                    self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å chat_id")
                    return False, None, None
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º bot.send_message –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                reply_func = lambda text, **kwargs: context.bot.send_message(chat_id=chat_id, text=text, **kwargs)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á–∏
            api_keys_valid, error_msg = self._validate_api_keys()
            if not api_keys_valid:
                await reply_func(error_msg)
                return False, None, None
            
            # –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            output_dir = Path(tempfile.mkdtemp(prefix="meeting_output_"))
            
            # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏
            api_keys = self.api_keys.get("api_keys", {})
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            user_id = update.effective_user.id
            user_session = self.get_user_session(user_id)
            
            # –°–æ–∑–¥–∞–µ–º callback –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            progress_callback = self._create_progress_callback(user_session, context, chat_id)
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å callback'–æ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            processor = MeetingProcessor(
                deepgram_api_key=api_keys["deepgram"],
                claude_api_key=api_keys["claude"],
                deepgram_timeout=self.config.get("processing", {}).get("deepgram_timeout", 300),
                claude_model="claude-sonnet-4-20250514",
                chunk_duration_minutes=self.config.get("processing", {}).get("chunk_duration_minutes", 15),
                template_type=template_name
            )
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º callback –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞, –µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
            if hasattr(processor, 'set_progress_callback'):
                processor.set_progress_callback(progress_callback.sync)
            else:
                # –ï—Å–ª–∏ MeetingProcessor –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç progress callback,
                # –∏–º–∏—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ —ç—Ç–∞–ø—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                await progress_callback(10, "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ...")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                async def simulate_progress():
                    await asyncio.sleep(2)
                    await progress_callback(25, "–ù–∞—á–∞–ª–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏...")
                    await asyncio.sleep(3)
                    await progress_callback(50, "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ...")
                    await asyncio.sleep(2)
                    await progress_callback(75, "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞...")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–º–∏—Ç–∞—Ü–∏—é –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                progress_task = asyncio.create_task(simulate_progress())
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            file_type = FileValidator.get_file_type(file_path)
            file_size = os.path.getsize(file_path) / (1024 * 1024)
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è markdown
            template_escaped = self._escape_markdown(template_name)
            
            await reply_func(
                f"üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...\n"
                f"üìÅ –¢–∏–ø: {file_type}\n"
                f"üìä –†–∞–∑–º–µ—Ä: {file_size:.1f} –ú–ë\n"
                f"üìù –®–∞–±–ª–æ–Ω: `{template_escaped}`\n\n"
                f"‚è≥ –ü—Ä–æ–≥—Ä–µ—Å—Å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏...",
                parse_mode=ParseMode.MARKDOWN
            )
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å event loop
            import concurrent.futures
            
            loop = asyncio.get_event_loop()
            with concurrent.futures.ThreadPoolExecutor() as executor:
                success = await loop.run_in_executor(
                    executor,
                    processor.process_meeting,
                    file_path,
                    str(output_dir),
                    template_name,
                    False  # keep_audio_file
                )
            
            if not success:
                await progress_callback(0, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞")
                return False, None, None
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            await progress_callback(90, "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤...")
            
            # –ò—â–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            input_name = Path(file_path).stem
            transcript_file = output_dir / f"{input_name}_transcript.txt"
            summary_file = output_dir / f"{input_name}_summary.md"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
            if not transcript_file.exists() or not summary_file.exists():
                self.logger.error(f"‚ùå –†–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                await progress_callback(0, "–†–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return False, None, None
            
            # –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            await progress_callback(100, "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
            self.logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {transcript_file}, {summary_file}")
            return True, str(transcript_file), str(summary_file)
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ—à–∏–±–∫–µ —á–µ—Ä–µ–∑ callback –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            try:
                user_id = update.effective_user.id
                user_session = self.get_user_session(user_id)
                if hasattr(user_session, 'status_message_id') and user_session.status_message_id:
                    progress_callback = self._create_progress_callback(user_session, context, chat_id)
                    await progress_callback(0, f"–û—à–∏–±–∫–∞: {str(e)}")
            except Exception:
                pass
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ (–±–µ–∑ markdown)
            try:
                error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)}"
                if update.message:
                    await update.message.reply_text(error_message)
                elif update.callback_query:
                    await update.callback_query.message.reply_text(error_message)
                else:
                    await context.bot.send_message(chat_id=chat_id, text=error_message)
            except Exception:
                self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ")
            
            return False, None, None

    async def _send_result_files(self, update: Update, context: ContextTypes.DEFAULT_TYPE, transcript_file: str, summary_file: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–µ —Ñ–∞–π–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            sent_files = 0
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º chat_id –∏ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            if update.message:
                chat_id = update.message.chat_id
                reply_func = update.message.reply_text
            elif update.callback_query:
                chat_id = update.callback_query.message.chat_id
                reply_func = update.callback_query.message.reply_text
            else:
                self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å chat_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤")
                return False
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
            if os.path.exists(transcript_file):
                with open(transcript_file, 'rb') as f:
                    await context.bot.send_document(
                        chat_id=chat_id,
                        document=f,
                        filename=os.path.basename(transcript_file),
                        caption="üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –≤—Å—Ç—Ä–µ—á–∏"
                    )
                sent_files += 1
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª
            if os.path.exists(summary_file):
                with open(summary_file, 'rb') as f:
                    await context.bot.send_document(
                        chat_id=chat_id,
                        document=f,
                        filename=os.path.basename(summary_file),
                        caption="üìã –ü—Ä–æ—Ç–æ–∫–æ–ª –≤—Å—Ç—Ä–µ—á–∏"
                    )
                sent_files += 1
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            await reply_func(
                f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                f"üìé –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {sent_files}\n\n"
                f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /templates –¥–ª—è —Å–º–µ–Ω—ã —à–∞–±–ª–æ–Ω–∞"
            )
            
            return sent_files > 0
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤: {e}")
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
            try:
                error_message = f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {str(e)}"
                if update.message:
                    await update.message.reply_text(error_message)
                elif update.callback_query:
                    await update.callback_query.message.reply_text(error_message)
            except Exception:
                self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ")
            
            return False
    
    async def _cleanup_temp_files(self, *temp_dirs):
        """–û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        for temp_dir in temp_dirs:
            if temp_dir and os.path.exists(temp_dir):
                try:
                    shutil.rmtree(temp_dir)
                    self.logger.debug(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {temp_dir}")
                except Exception as e:
                    self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {temp_dir}: {e}")
    
    # ==================== COMMAND HANDLERS ====================
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        user_id = update.effective_user.id
        
        if not self.is_user_allowed(user_id):
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            return
        
        user_session = self.get_user_session(user_id)
        
        url_info = ""
        if self.url_processor:
            url_info = "\nüîó –ü–æ–¥–¥–µ—Ä–∂–∫–∞ HTTP —Å—Å—ã–ª–æ–∫ –∏ –æ–±–ª–∞—á–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
        
        admin_info = ""
        if self.is_admin(user_id):
            admin_info = "\nüîß /admin - –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        
        welcome_text = f"""
üéôÔ∏è **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Meeting Bot!**

–Ø –ø–æ–º–æ–≥—É –≤–∞–º:
üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ –∏ –≤–∏–¥–µ–æ –≤—Å—Ç—Ä–µ—á
üìã –°–æ–∑–¥–∞–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã
ü§ñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤
üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏{url_info}

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
/templates - –í—ã–±—Ä–∞—Ç—å —à–∞–±–ª–æ–Ω –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
/status - –°—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞—á
/url \\<—Å—Å—ã–ª–∫–∞\\> - –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª –ø–æ —Å—Å—ã–ª–∫–µ
/check \\<—Å—Å—ã–ª–∫–∞\\> - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏
/formats - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã{admin_info}

**–°–ø–æ—Å–æ–±—ã –∑–∞–≥—Ä—É–∑–∫–∏:**
1Ô∏è‚É£ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª –∫ —Å–æ–æ–±—â–µ–Ω–∏—é (–¥–æ 20 –ú–ë)
2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ HTTP —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª
3Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /url —Å —Å—Å—ã–ª–∫–æ–π

üéØ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:
‚Ä¢ –ê—É–¥–∏–æ: MP3, WAV, FLAC, AAC, M4A, OGG
‚Ä¢ –í–∏–¥–µ–æ: MP4, AVI, MOV, MKV, WebM

üìù –¢–µ–∫—É—â–∏–π —à–∞–±–ª–æ–Ω: `{user_session.template}`
        """
        
        await update.message.reply_text(welcome_text, parse_mode=ParseMode.MARKDOWN)
        self.logger.info(f"üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º")
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        user_id = update.effective_user.id
        max_size = self.config.get("telegram", {}).get("max_file_size_mb", 100)
        max_url_size = self.config.get("url_processing", {}).get("max_file_size_mb", 500)
        timeout = self.config.get("processing", {}).get("processing_timeout", 1800)
        
        url_commands = ""
        if self.url_processor:
            url_commands = """
**–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å URL:**
/url \\<—Å—Å—ã–ª–∫–∞\\> - –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª –ø–æ —Å—Å—ã–ª–∫–µ
/check \\<—Å—Å—ã–ª–∫–∞\\> - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏
/formats - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å—Å—ã–ª–æ–∫

**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å–µ—Ä–≤–∏—Å—ã:**
‚òÅÔ∏è Google Drive, –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫
üîó –õ—é–±—ã–µ –ø—Ä—è–º—ã–µ HTTP —Å—Å—ã–ª–∫–∏
"""
        
        admin_commands = ""
        if self.is_admin(user_id):
            admin_commands = """
**–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:**
/admin - –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
/add_user \\<id\\> - –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/remove_user \\<id\\> - –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/list_users - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
/add_admin \\<id\\> - –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
/remove_admin \\<id\\> - –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
/list_admins - –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
/user_info \\<id\\> - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
/bot_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
"""
        
        help_text = f"""
üìö **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/templates - –í—ã–±—Ä–∞—Ç—å —à–∞–±–ª–æ–Ω –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
/status - –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤
/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É{url_commands}{admin_commands}

**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –∫–æ–º–∞–Ω–¥–æ–π /templates
2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª
3Ô∏è‚É£ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
4Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –∏ –ø—Ä–æ—Ç–æ–∫–æ–ª –≤—Å—Ç—Ä–µ—á–∏

**–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
‚è±Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ
üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞

**–î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã:**
‚Ä¢ `standard` - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª
‚Ä¢ `business` - –î–µ–ª–æ–≤—ã–µ –≤—Å—Ç—Ä–µ—á–∏
‚Ä¢ `project` - –ü—Ä–æ–µ–∫—Ç–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏
‚Ä¢ `standup` - –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å—Ç–µ–Ω–¥–∞–ø—ã
‚Ä¢ `interview` - –ò–Ω—Ç–µ—Ä–≤—å—é –∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è
‚Ä¢ `brainstorm` - –ú–æ–∑–≥–æ–≤—ã–µ —à—Ç—É—Ä–º—ã
‚Ä¢ `review` - –†–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤—ã
‚Ä¢ `technical` - –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è
‚Ä¢ `sales` - –ü—Ä–æ–¥–∞–∂–∏ –∏ –∫–ª–∏–µ–Ω—Ç—ã

**–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**
üìä –ü—Ä—è–º–∞—è –∑–∞–≥—Ä—É–∑–∫–∞: –¥–æ {max_size} –ú–ë
üîó –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ —Å—Å—ã–ª–∫–µ: –¥–æ {max_url_size} –ú–ë
‚è±Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {timeout//60} –º–∏–Ω—É—Ç
üîí –§–∞–π–ª—ã —É–¥–∞–ª—è—é—Ç—Å—è –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏

**–ü–æ–¥–¥–µ—Ä–∂–∫–∞:**
–ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        """
        
        await update.message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN)
    
    async def url_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /url <—Å—Å—ã–ª–∫–∞>"""
        user_id = update.effective_user.id
        
        if not self.is_user_allowed(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É")
            return
        
        if not self.url_processor:
            await update.message.reply_text(
                "‚ùå URL –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä—è–º—É—é –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–æ–≤"
            )
            return
        
        user_session = self.get_user_session(user_id)
        
        if user_session.processing:
            await update.message.reply_text(
                "‚è≥ –£ –≤–∞—Å —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Ñ–∞–π–ª.\n"
                "–î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
            )
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        if not context.args:
            await update.message.reply_text(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/url https://example.com/file.mp3`\n"
                "–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏",
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        url = " ".join(context.args)
        
        # –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        filename = f"url_file_{hash(url) % 10000}"
        user_session.start_processing(filename)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(self._process_url_file_task(update, context, url, user_session))
    
    async def check_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /check <—Å—Å—ã–ª–∫–∞> - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        if not self.url_processor:
            await update.message.reply_text("‚ùå URL –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
        
        if not context.args:
            await update.message.reply_text(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/check https://example.com/file.mp3`",
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        url = " ".join(context.args)
        await self._show_url_file_info(update, url)
    
    async def formats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /formats - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã"""
        url_config = self.config.get("url_processing", {})
        cloud_services = url_config.get("cloud_services", {})
        
        enabled_services = []
        for service, enabled in cloud_services.items():
            if enabled:
                service_names = {
                    'google_drive': 'Google Drive',
                    'yandex_disk': '–Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫'
                }
                enabled_services.append(service_names.get(service, service))
        
        formats_text = f"""
üìã **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏ —Å–µ—Ä–≤–∏—Å—ã**

**üéµ –ê—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç—ã:**
‚Ä¢ MP3, WAV, FLAC, AAC, M4A, OGG, OPUS

**üé¨ –í–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç—ã:**
‚Ä¢ MP4, AVI, MOV, MKV, WMV, WebM

**‚òÅÔ∏è –û–±–ª–∞—á–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:**
{chr(10).join(f'‚Ä¢ {service}' for service in enabled_services) if enabled_services else '‚Ä¢ –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã'}

**üîó –ü—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏:**
‚Ä¢ –õ—é–±—ã–µ HTTP/HTTPS —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã

**üìè –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞:**
‚Ä¢ –ü—Ä—è–º–∞—è –∑–∞–≥—Ä—É–∑–∫–∞: {self.config.get('telegram', {}).get('max_file_size_mb', 20)} –ú–ë
‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ URL: {url_config.get('max_file_size_mb', 500)} –ú–ë

**üí° –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**
```
/url https://drive.google.com/file/d/abc123
/url https://yadi.sk/d/xyz789/meeting.mp3
/check https://example.com/conference.mp4
```
        """
        
        await update.message.reply_text(formats_text, parse_mode=ParseMode.MARKDOWN)
    
    async def templates_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /templates"""
        user_session = self.get_user_session(update.effective_user.id)
        current_template = user_session.template
        
        # –ë–∞–∑–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã
        base_templates = [
            "standard", "business", "project", "standup", "interview",
            "brainstorm", "review", "planning", "technical", "sales"
        ]
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = []
        
        for template in base_templates:
            status = "‚úÖ" if template == current_template else "üìã"
            keyboard.append([
                InlineKeyboardButton(
                    f"{status} {template}",
                    callback_data=f"template_{template}"
                )
            ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = f"""
üìù **–í—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞**

–¢–µ–∫—É—â–∏–π —à–∞–±–ª–æ–Ω: `{current_template}`

–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —à–∞–±–ª–æ–Ω –¥–ª—è –≤–∞—à–µ–π –≤—Å—Ç—Ä–µ—á–∏:
        """
        
        await update.message.reply_text(
            text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def template_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞ –∏ –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        if query.data.startswith("process:"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ URL –∏–∑ –∫–Ω–æ–ø–∫–∏ —Å –∫–æ—Ä–æ—Ç–∫–∏–º ID
            short_id = query.data.replace("process:", "")
            url = self._get_url_by_id(short_id)
            
            if not url:
                await query.edit_message_text("‚ùå –°—Å—ã–ª–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return
            
            user_session = self.get_user_session(update.effective_user.id)
            
            if user_session.processing:
                await query.edit_message_text(
                    "‚è≥ –£ –≤–∞—Å —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Ñ–∞–π–ª.\n"
                    "–î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
                )
                return
            
            filename = f"url_file_{hash(url) % 10000}"
            user_session.start_processing(filename)
            
            await query.edit_message_text("üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞ –ø–æ —Å—Å—ã–ª–∫–µ...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ —Ñ–æ–Ω–µ
            asyncio.create_task(self._process_url_file_task(update, context, url, user_session))
            return
        
        if query.data == "cancel":
            await query.edit_message_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞
        if query.data.startswith("template_"):
            template = query.data.replace("template_", "")
            user_session = self.get_user_session(update.effective_user.id)
            user_session.template = template
            
            self.logger.info(f"üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –≤—ã–±—Ä–∞–ª —à–∞–±–ª–æ–Ω: {template}")
            
            await query.edit_message_text(
                f"‚úÖ –í—ã–±—Ä–∞–Ω —à–∞–±–ª–æ–Ω: `{template}`\n\n"
                "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ —Å—Å—ã–ª–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.",
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback
        await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
    
    async def settings_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /settings"""
        user_id = update.effective_user.id
        user_session = self.get_user_session(user_id)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if user_session.processing:
            duration = user_session.get_processing_duration()
            progress_info = f" ({user_session.current_progress}%)" if user_session.current_progress > 0 else ""
            processing_status = f"üü¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è{progress_info} ({duration}—Å)" if duration else f"üü¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è{progress_info}"
        else:
            processing_status = "üî¥ –°–≤–æ–±–æ–¥–µ–Ω"
        
        url_status = "‚úÖ –í–∫–ª—é—á–µ–Ω–∞" if self.url_processor else "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        progress_status = "‚úÖ –í–∫–ª—é—á–µ–Ω—ã" if self.config.get("notifications", {}).get("send_progress_updates", True) else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã"
        
        settings_text = f"""
‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏**

üìù –¢–µ–∫—É—â–∏–π —à–∞–±–ª–æ–Ω: `{user_session.template}`
üîÑ –°—Ç–∞—Ç—É—Å: {processing_status}
üîó URL –æ–±—Ä–∞–±–æ—Ç–∫–∞: {url_status}
üìä –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ: {progress_status}
"""
        
        if user_session.current_file:
            settings_text += f"üìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è: `{user_session.current_file}`\n"
            if user_session.current_message:
                settings_text += f"üí¨ –¢–µ–∫—É—â–∏–π —ç—Ç–∞–ø: {user_session.current_message}\n"
        
        settings_text += """
**–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**
‚Ä¢ /templates - –ò–∑–º–µ–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω
‚Ä¢ /cancel - –û—Ç–º–µ–Ω–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É
‚Ä¢ /status - –°—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏
‚Ä¢ /formats - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
"""
        
        # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if self.is_admin(user_id):
            active_sessions = len([s for s in self.user_sessions.values() if s.processing])
            uptime = datetime.now() - self.stats['start_time']
            settings_text += f"""

**üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:**
üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(self.stats['active_users'])}
‚ö° –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Ñ–∞–π–ª–æ–≤: {active_sessions}
üìà –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.stats['total_files_processed']}
üîó –í—Å–µ–≥–æ URL –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.stats['total_urls_processed']}
‚ùå –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {self.stats['total_errors']}
üïê –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime.days}–¥ {uptime.seconds//3600}—á {(uptime.seconds//60)%60}–º
"""
        
        await update.message.reply_text(
            settings_text,
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /status"""
        user_id = update.effective_user.id
        user_session = self.get_user_session(user_id)
        
        if user_session.processing:
            duration = user_session.get_processing_duration()
            duration_text = f" ({duration}—Å)" if duration else ""
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            progress_bar = self._create_progress_bar(user_session.current_progress)
            
            status_text = (
                f"üîÑ *–ê–∫—Ç–∏–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞:*\n\n"
                f"{progress_bar}\n"
                f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {user_session.current_progress}%\n"
                f"üìù –≠—Ç–∞–ø: {user_session.current_message}\n"
                f"üìÅ –§–∞–π–ª: `{user_session.current_file}`\n"
                f"üìù –®–∞–±–ª–æ–Ω: `{user_session.template}`\n"
                f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_text}\n\n"
                "‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è...\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
            )
            
            await update.message.reply_text(
                status_text,
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            await update.message.reply_text(
                "üî¥ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ —Å—Å—ã–ª–∫—É –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏."
            )
    
    async def cancel_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /cancel"""
        user_id = update.effective_user.id
        user_session = self.get_user_session(user_id)
        
        if user_session.processing:
            user_session.stop_processing()
            
            self.logger.info(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª –æ–±—Ä–∞–±–æ—Ç–∫—É")
            
            await update.message.reply_text(
                "‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ñ–∞–π–ª –∏–ª–∏ —Å—Å—ã–ª–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏."
            )
        else:
            await update.message.reply_text(
                "‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–º–µ–Ω—ã"
            )
    
    async def admin_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /admin - –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        user_id = update.effective_user.id
        
        if not self.is_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        admin_text = """
üîß **–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**

**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:**
/add\\_user <user\\_id> - –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/remove\\_user <user\\_id> - –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/list\\_users - –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
/add\\_admin <user\\_id> - –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
/remove\\_admin <user\\_id> - –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
/list\\_admins - –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

**–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
/user\\_info <user\\_id> - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
/bot\\_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞

**–ü—Ä–∏–º–µ—Ä—ã:**
`/add_user 123456789`
`/remove_user 123456789`
`/user_info 123456789`
        """
        
        await update.message.reply_text(admin_text, parse_mode=ParseMode.MARKDOWN)
    
    async def add_user_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /add_user <user_id> - –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        
        if not self.is_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        if not context.args:
            await update.message.reply_text(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/add_user 123456789`",
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        try:
            target_user_id = int(context.args[0])
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
        
        allowed_users = self.config.get("telegram", {}).get("allowed_users", [])
        
        if target_user_id in allowed_users:
            await update.message.reply_text(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} —É–∂–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        allowed_users.append(target_user_id)
        self.config["telegram"]["allowed_users"] = allowed_users
        self._save_config(self.config)
        
        self.logger.info(f"üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user_id} –¥–æ–±–∞–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}")
        
        await update.message.reply_text(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{target_user_id}` –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö\n\n"
            f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(allowed_users)}",
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def remove_user_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /remove_user <user_id> - —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        
        if not self.is_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        if not context.args:
            await update.message.reply_text(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/remove_user 123456789`",
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        try:
            target_user_id = int(context.args[0])
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
        
        allowed_users = self.config.get("telegram", {}).get("allowed_users", [])
        admin_users = self.config.get("telegram", {}).get("admin_users", [])
        
        if target_user_id not in allowed_users:
            await update.message.reply_text(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if target_user_id in admin_users:
            await update.message.reply_text(
                f"‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {target_user_id}\n"
                f"–°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏—Ç–µ –µ–≥–æ –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∫–æ–º–∞–Ω–¥–æ–π `/remove_admin {target_user_id}`",
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        allowed_users.remove(target_user_id)
        self.config["telegram"]["allowed_users"] = allowed_users
        self._save_config(self.config)
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—Å—Ç—å
        if target_user_id in self.user_sessions:
            self.user_sessions[target_user_id].stop_processing()
            del self.user_sessions[target_user_id]
        
        self.logger.info(f"üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user_id} —É–¥–∞–ª–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}")
        
        await update.message.reply_text(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{target_user_id}` —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö\n\n"
            f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(allowed_users)}",
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def list_users_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /list_users - —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        user_id = update.effective_user.id
        
        if not self.is_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        allowed_users = self.config.get("telegram", {}).get("allowed_users", [])
        admin_users = self.config.get("telegram", {}).get("admin_users", [])
        
        if not allowed_users:
            await update.message.reply_text("‚ÑπÔ∏è –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç")
            return
        
        users_text = "üë• **–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n\n"
        
        for i, uid in enumerate(allowed_users, 1):
            status = "üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" if uid in admin_users else "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–µ–Ω –µ—Å–ª–∏ –æ–Ω –≤ —Å–µ—Å—Å–∏—è—Ö –ò–õ–ò —ç—Ç–æ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            active = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if (uid in self.user_sessions or uid == user_id) else "‚ö™ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
            users_text += f"{i}. `{uid}` - {status} ({active})\n"
        
        users_text += f"\n**–í—Å–µ–≥–æ:** {len(allowed_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        
        await update.message.reply_text(users_text, parse_mode=ParseMode.MARKDOWN)
    
    async def add_admin_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /add_admin <user_id> - –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        user_id = update.effective_user.id
        
        if not self.is_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        if not context.args:
            await update.message.reply_text(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/add_admin 123456789`",
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        try:
            target_user_id = int(context.args[0])
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
        
        allowed_users = self.config.get("telegram", {}).get("allowed_users", [])
        admin_users = self.config.get("telegram", {}).get("admin_users", [])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö
        if target_user_id not in allowed_users:
            await update.message.reply_text(
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö\n"
                f"–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π `/add_user {target_user_id}`",
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        if target_user_id in admin_users:
            await update.message.reply_text(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin_users.append(target_user_id)
        self.config["telegram"]["admin_users"] = admin_users
        self._save_config(self.config)
        
        self.logger.info(f"üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user_id} –¥–æ–±–∞–≤–∏–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {target_user_id}")
        
        await update.message.reply_text(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{target_user_id}` –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n\n"
            f"–í—Å–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {len(admin_users)}",
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def remove_admin_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /remove_admin <user_id> - —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        user_id = update.effective_user.id
        
        if not self.is_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        if not context.args:
            await update.message.reply_text(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/remove_admin 123456789`",
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        try:
            target_user_id = int(context.args[0])
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
        
        admin_users = self.config.get("telegram", {}).get("admin_users", [])
        
        if target_user_id not in admin_users:
            await update.message.reply_text(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É–¥–∞–ª—è–µ—Ç –ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∞–º —Å–µ–±—è
        if target_user_id == user_id:
            await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Å—Ç–∞–µ—Ç—Å—è –ª–∏ —Å–∏—Å—Ç–µ–º–∞ –±–µ–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        if len(admin_users) <= 1:
            await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        # –£–¥–∞–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin_users.remove(target_user_id)
        self.config["telegram"]["admin_users"] = admin_users
        self._save_config(self.config)
        
        self.logger.info(f"üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user_id} —É–¥–∞–ª–∏–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {target_user_id}")
        
        await update.message.reply_text(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{target_user_id}` –±–æ–ª—å—à–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n\n"
            f"–í—Å–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {len(admin_users)}",
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def list_admins_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /list_admins - —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
        user_id = update.effective_user.id
        
        if not self.is_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        admin_users = self.config.get("telegram", {}).get("admin_users", [])
        
        if not admin_users:
            await update.message.reply_text("‚ÑπÔ∏è –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç")
            return
        
        admins_text = "üëë **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:**\n\n"
        
        for i, uid in enumerate(admin_users, 1):
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–µ–Ω –µ—Å–ª–∏ –æ–Ω –≤ —Å–µ—Å—Å–∏—è—Ö –ò–õ–ò —ç—Ç–æ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            active = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if (uid in self.user_sessions or uid == user_id) else "‚ö™ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
            current = " (–≤—ã)" if uid == user_id else ""
            admins_text += f"{i}. `{uid}` - {active}{current}\n"
        
        admins_text += f"\n**–í—Å–µ–≥–æ:** {len(admin_users)} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"
        
        await update.message.reply_text(admins_text, parse_mode=ParseMode.MARKDOWN)
    
    async def user_info_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /user_info <user_id> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        user_id = update.effective_user.id
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        if update.message:
            reply_func = update.message.reply_text
        elif update.callback_query:
            reply_func = update.callback_query.message.reply_text
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º effective_message –∫–∞–∫ fallback
            reply_func = update.effective_message.reply_text if update.effective_message else None
            if not reply_func:
                self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–ø–æ—Å–æ–± –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ user_info_command")
                return
        
        if not self.is_admin(user_id):
            await reply_func("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        if not context.args:
            await reply_func(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/user_info 123456789`",
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        try:
            target_user_id = int(context.args[0])
        except ValueError:
            await reply_func("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
        
        allowed_users = self.config.get("telegram", {}).get("allowed_users", [])
        admin_users = self.config.get("telegram", {}).get("admin_users", [])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
        has_access = len(allowed_users) == 0 or target_user_id in allowed_users
        is_admin = target_user_id in admin_users
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏–∏
        session_info = "‚ö™ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
        if target_user_id in self.user_sessions:
            session = self.user_sessions[target_user_id]
            if session.processing:
                duration = session.get_processing_duration()
                session_info = f"üü° –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª ({duration}—Å)" if duration else "üü° –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª"
            else:
                session_info = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω"
        elif target_user_id == user_id:
            # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É, –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω
            session_info = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω"
        
        # –°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–∞
        if not has_access:
            access_status = "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞"
        elif is_admin:
            access_status = "üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
        else:
            access_status = "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        info_text = f"""
üë§ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ**

üÜî ID: `{target_user_id}`
üîê –°—Ç–∞—Ç—É—Å: {access_status}
üîÑ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {session_info}
        """
        
        if target_user_id in self.user_sessions:
            session = self.user_sessions[target_user_id]
            info_text += f"\nüìù –®–∞–±–ª–æ–Ω: `{session.template}`"
            if session.current_file:
                info_text += f"\nüìÅ –§–∞–π–ª: `{session.current_file}`"
                info_text += f"\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {session.current_progress}%"
        
        await reply_func(info_text, parse_mode=ParseMode.MARKDOWN)
    
    async def bot_stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /bot_stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"""
        user_id = update.effective_user.id
        
        if not self.is_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        allowed_users = self.config.get("telegram", {}).get("allowed_users", [])
        admin_users = self.config.get("telegram", {}).get("admin_users", [])
        active_sessions = len([s for s in self.user_sessions.values() if s.processing])
        uptime = datetime.now() - self.stats['start_time']
        
        stats_text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**

üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**
‚Ä¢ –í—Å–µ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö: {len(allowed_users)}
‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {len(admin_users)}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {len(self.user_sessions)}
‚Ä¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Ñ–∞–π–ª–æ–≤: {active_sessions}

üìà **–û–±—Ä–∞–±–æ—Ç–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {self.stats['total_files_processed']}
‚Ä¢ –í—Å–µ–≥–æ URL: {self.stats['total_urls_processed']}
‚Ä¢ –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {self.stats['total_errors']}

‚öôÔ∏è **–°–∏—Å—Ç–µ–º–∞:**
‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime.days}–¥ {uptime.seconds//3600}—á {(uptime.seconds//60)%60}–º
‚Ä¢ URL –æ–±—Ä–∞–±–æ—Ç–∫–∞: {'‚úÖ –í–∫–ª—é—á–µ–Ω–∞' if self.url_processor else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞'}
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'‚úÖ –í–∫–ª—é—á–µ–Ω—ã' if self.config.get('notifications', {}).get('send_progress_updates', True) else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}

üîß **–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:**
‚Ä¢ –ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {self.config.get('telegram', {}).get('max_file_size_mb', 20)} –ú–ë
‚Ä¢ –ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä URL: {self.config.get('url_processing', {}).get('max_file_size_mb', 500)} –ú–ë
‚Ä¢ –¢–∞–π–º–∞—É—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏: {self.config.get('processing', {}).get('processing_timeout', 1800)//60} –º–∏–Ω
        """
        
        await update.message.reply_text(stats_text, parse_mode=ParseMode.MARKDOWN)
    
    # ==================== FILE HANDLERS ====================
    
    async def handle_document(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        user_id = update.effective_user.id
        
        if not self.is_user_allowed(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É")
            return
        
        user_session = self.get_user_session(user_id)
        
        if user_session.processing:
            await update.message.reply_text(
                "‚è≥ –£ –≤–∞—Å —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Ñ–∞–π–ª.\n"
                "–î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
            )
            return
        
        document = update.message.document
        max_size_mb = self.config.get("telegram", {}).get("max_file_size_mb", 100)
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ñ–∞–π–ª
        is_valid, error_msg = FileValidator.validate_file(document, max_size_mb)
        if not is_valid:
            await update.message.reply_text(error_msg, parse_mode=ParseMode.MARKDOWN)
            return
        
        # –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        filename = document.file_name or f"document_{document.file_id[:8]}"
        user_session.start_processing(filename)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(self._process_file(update, context, document))
    
    async def handle_audio(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        
        if not self.is_user_allowed(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É")
            return
        
        user_session = self.get_user_session(user_id)
        
        if user_session.processing:
            await update.message.reply_text(
                "‚è≥ –£ –≤–∞—Å —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Ñ–∞–π–ª.\n"
                "–î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
            )
            return
        
        audio = update.message.audio
        max_size_mb = self.config.get("telegram", {}).get("max_file_size_mb", 100)
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ñ–∞–π–ª
        is_valid, error_msg = FileValidator.validate_file(audio, max_size_mb)
        if not is_valid:
            await update.message.reply_text(error_msg, parse_mode=ParseMode.MARKDOWN)
            return
        
        # –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        filename = audio.file_name or f"audio_{audio.file_id[:8]}.mp3"
        user_session.start_processing(filename)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
        asyncio.create_task(self._process_file(update, context, audio))
    
    async def handle_voice(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        
        if not self.is_user_allowed(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É")
            return
        
        user_session = self.get_user_session(user_id)
        
        if user_session.processing:
            await update.message.reply_text(
                "‚è≥ –£ –≤–∞—Å —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Ñ–∞–π–ª.\n"
                "–î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
            )
            return
        
        voice = update.message.voice
        max_size_mb = self.config.get("telegram", {}).get("max_file_size_mb", 100)
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ñ–∞–π–ª
        is_valid, error_msg = FileValidator.validate_file(voice, max_size_mb)
        if not is_valid:
            await update.message.reply_text(error_msg, parse_mode=ParseMode.MARKDOWN)
            return
        
        # –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        filename = f"voice_{voice.file_id[:8]}.ogg"
        user_session.start_processing(filename)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
        asyncio.create_task(self._process_file(update, context, voice))
    
    async def handle_video(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        
        if not self.is_user_allowed(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É")
            return
        
        user_session = self.get_user_session(user_id)
        
        if user_session.processing:
            await update.message.reply_text(
                "‚è≥ –£ –≤–∞—Å —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Ñ–∞–π–ª.\n"
                "–î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
            )
            return
        
        video = update.message.video
        max_size_mb = self.config.get("telegram", {}).get("max_file_size_mb", 100)
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ñ–∞–π–ª
        is_valid, error_msg = FileValidator.validate_file(video, max_size_mb)
        if not is_valid:
            await update.message.reply_text(error_msg, parse_mode=ParseMode.MARKDOWN)
            return
        
        # –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        filename = video.file_name or f"video_{video.file_id[:8]}.mp4"
        user_session.start_processing(filename)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
        asyncio.create_task(self._process_file(update, context, video))
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        
        if not self.is_user_allowed(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É")
            return
        
        message_text = update.message.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ URL –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        if self.url_processor and self.config.get("url_processing", {}).get("auto_detect_links", True):
            urls = self._extract_urls_from_message(message_text)
            
            if urls:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π URL
                url = urls[0]
                
                user_session = self.get_user_session(user_id)
                
                if user_session.processing:
                    await update.message.reply_text(
                        "‚è≥ –£ –≤–∞—Å —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Ñ–∞–π–ª.\n"
                        "–î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
                    )
                    return
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
                await self._show_url_file_info(update, url)
                return
        
        # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ URL
        help_msg = "ü§ñ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ —Å—Å—ã–ª–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.\n\n"
        help_msg += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
        help_msg += "‚Ä¢ /help - –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏\n"
        help_msg += "‚Ä¢ /templates - –¥–ª—è –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞\n"
        help_msg += "‚Ä¢ /settings - –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫\n"
        help_msg += "‚Ä¢ /status - –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n"
        
        if self.url_processor:
            help_msg += "‚Ä¢ /url \\<—Å—Å—ã–ª–∫–∞\\> - –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ –ø–æ —Å—Å—ã–ª–∫–µ"
        
        await update.message.reply_text(help_msg)
    
    # ==================== CORE PROCESSING ====================
    
    async def _process_file(self, update: Update, context: ContextTypes.DEFAULT_TYPE, file_obj):
        """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤"""
        user_id = update.effective_user.id
        user_session = self.get_user_session(user_id)
        temp_dirs = []
        
        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            file_path, temp_dir = await self._download_file(update, context, file_obj)
            if not file_path:
                return
            
            temp_dirs.append(temp_dir)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
            success, transcript_file, summary_file = await self._process_with_meeting_processor(
                update, context, file_path, user_session.template
            )
            
            if success and transcript_file and summary_file:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                await self._send_result_files(update, context, transcript_file, summary_file)
                self.stats['total_files_processed'] += 1
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–ø–∫—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∫ –≤—Ä–µ–º–µ–Ω–Ω—ã–º –ø–∞–ø–∫–∞–º –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
                temp_dirs.append(str(Path(transcript_file).parent))
            
        except Exception as e:
            await self._handle_processing_error(update, e, user_session)
        finally:
            user_session.stop_processing()
            await self._cleanup_temp_files(*temp_dirs)
    
    async def _process_url_file_task(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                   url: str, user_session: UserSession):
        """–ó–∞–¥–∞—á–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ –ø–æ URL"""
        temp_dirs = []
        
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª –ø–æ URL
            success, transcript_file, summary_file = await self._process_url_file(
                update, context, url, user_session.template
            )
            
            if success and transcript_file and summary_file:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                await self._send_result_files(update, context, transcript_file, summary_file)
                self.stats['total_urls_processed'] += 1
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–ø–∫—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∫ –≤—Ä–µ–º–µ–Ω–Ω—ã–º –ø–∞–ø–∫–∞–º –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
                temp_dirs.append(str(Path(transcript_file).parent))
            
        except Exception as e:
            await self._handle_processing_error(update, e, user_session, "URL —Ñ–∞–π–ª–∞")
        finally:
            user_session.stop_processing()
            await self._cleanup_temp_files(*temp_dirs)
    
    async def _handle_processing_error(self, update: Update, error: Exception, 
                                     user_session: UserSession, file_type: str = "—Ñ–∞–π–ª–∞"):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–æ–≤"""
        self.stats['total_errors'] += 1
        user_session.stop_processing()
        
        error_msg = str(error)
        self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {file_type} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}: {error_msg}")
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        try:
            if update.message:
                await update.message.reply_text(
                    f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {file_type}\n\n"
                    f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                    f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞\n"
                    f"‚Ä¢ –£–º–µ–Ω—å—à–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞\n"
                    f"‚Ä¢ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ\n\n"
                    f"–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
            elif update.callback_query:
                await update.callback_query.message.reply_text(
                    f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {file_type}\n\n"
                    f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                    f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞\n"
                    f"‚Ä¢ –£–º–µ–Ω—å—à–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞\n"
                    f"‚Ä¢ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ\n\n"
                    f"–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
        except Exception:
            self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ")
    
    # ==================== ERROR HANDLERS ====================
    
    async def error_handler(self, update: object, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        self.logger.error(f"Exception while handling an update: {context.error}")
        self.logger.error(traceback.format_exc())
        
        if isinstance(update, Update) and update.effective_message:
            try:
                await update.effective_message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
            except Exception:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
    
    # ==================== BOT RUNNER ====================
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
        bot_token = self.api_keys.get("api_keys", {}).get("telegram_bot_token", "")
        
        if not bot_token or bot_token == "YOUR_BOT_TOKEN_HERE":
            self.logger.error("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ api_keys.json")
            print("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
            print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤ api_keys.json –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á–∏
        api_keys_valid, error_msg = self._validate_api_keys()
        if not api_keys_valid:
            self.logger.error(error_msg)
            print(error_msg)
            print("–ù–∞—Å—Ç—Ä–æ–π—Ç–µ API –∫–ª—é—á–∏ –≤ —Ñ–∞–π–ª–µ api_keys.json –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(bot_token).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", self.start_command))
        application.add_handler(CommandHandler("help", self.help_command))
        application.add_handler(CommandHandler("templates", self.templates_command))
        application.add_handler(CommandHandler("settings", self.settings_command))
        application.add_handler(CommandHandler("status", self.status_command))
        application.add_handler(CommandHandler("cancel", self.cancel_command))

        # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
        application.add_handler(CommandHandler("admin", self.admin_command))
        application.add_handler(CommandHandler("add_user", self.add_user_command))
        application.add_handler(CommandHandler("remove_user", self.remove_user_command))
        application.add_handler(CommandHandler("list_users", self.list_users_command))
        application.add_handler(CommandHandler("add_admin", self.add_admin_command))
        application.add_handler(CommandHandler("remove_admin", self.remove_admin_command))
        application.add_handler(CommandHandler("list_admins", self.list_admins_command))
        application.add_handler(CommandHandler("user_info", self.user_info_command))
        application.add_handler(CommandHandler("bot_stats", self.bot_stats_command))

        # URL –∫–æ–º–∞–Ω–¥—ã (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
        if self.url_processor:
            application.add_handler(CommandHandler("url", self.url_command))
            application.add_handler(CommandHandler("check", self.check_command))
            application.add_handler(CommandHandler("formats", self.formats_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤
        application.add_handler(CallbackQueryHandler(self.template_callback))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–∞–π–ª–æ–≤
        application.add_handler(MessageHandler(filters.Document.ALL, self.handle_document))
        application.add_handler(MessageHandler(filters.AUDIO, self.handle_audio))
        application.add_handler(MessageHandler(filters.VOICE, self.handle_voice))
        application.add_handler(MessageHandler(filters.VIDEO, self.handle_video))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        application.add_error_handler(self.error_handler)
        
        self.logger.info("üöÄ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        print("ü§ñ Meeting Bot –∑–∞–ø—É—â–µ–Ω!")
        print("üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –±–æ—Ç—É –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
        print("üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –≤–∫–ª—é—á–µ–Ω–æ")
        
        if self.url_processor:
            print("üîó –ü–æ–¥–¥–µ—Ä–∂–∫–∞ URL –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∫–ª—é—á–µ–Ω–∞")
            print("‚òÅÔ∏è –û–±–ª–∞—á–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã: Google Drive, –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫")
        else:
            print("‚ö†Ô∏è URL –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        
        print("üìä –õ–æ–≥–∏ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤ logs/telegram_bot.log")
        print("üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: bot_config.json")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        try:
            application.run_polling(allowed_updates=Update.ALL_TYPES)
        except KeyboardInterrupt:
            self.logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            print("\nüëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        required_files = ["meeting_processor.py"]
        missing_files = [f for f in required_files if not os.path.exists(f)]
        
        if missing_files:
            print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã:")
            for file in missing_files:
                print(f"   - {file}")
            print("\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –æ–¥–Ω–æ–π –ø–∞–ø–∫–µ —Å telegram_bot.py")
            return
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        os.makedirs("logs", exist_ok=True)
        os.makedirs("temp_bot_files", exist_ok=True)
        os.makedirs("meeting_output", exist_ok=True)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        bot = MeetingBot()
        bot.run()
        
    except KeyboardInterrupt:
        print("\nüëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")

if __name__ == "__main__":
    main()