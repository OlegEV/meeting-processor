#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
"""

import json
import os
from team_identifier import TeamIdentifier

def diagnose_identification_issues():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π"""
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú –ò–î–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if not os.path.exists("team_config.json"):
        print("‚ùå team_config.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    identifier = TeamIdentifier()
    
    print("1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò:")
    print(f"   –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞: {identifier.identification_enabled}")
    print(f"   –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {len(identifier.team_members)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º apply_to_templates
    apply_to_templates = identifier.config.get("team_identification", {}).get("apply_to_templates", [])
    print(f"   –ü—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫ —à–∞–±–ª–æ–Ω–∞–º: {apply_to_templates}")
    print(f"   –ü—Ä–∏–º–µ–Ω–∏—Ç—Å—è –∫ 'standup': {identifier.should_apply_identification('standup')}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    threshold = identifier.config.get("team_identification", {}).get("confidence_threshold", 0.7)
    print(f"   –ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {threshold}")
    
    print("\n2Ô∏è‚É£ –£–ß–ê–°–¢–ù–ò–ö–ò –ö–û–ú–ê–ù–î–´:")
    for member_id, member_info in list(identifier.team_members.items())[:3]:  # –ü–µ—Ä–≤—ã–µ 3
        print(f"   {member_id}:")
        print(f"     –ü–æ–ª–Ω–æ–µ –∏–º—è: '{member_info.get('full_name', '')}'")
        print(f"     –ü—Å–µ–≤–¥–æ–Ω–∏–º—ã: {member_info.get('aliases', [])}")
        print(f"     –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {member_info.get('voice_keywords', [])}")
        print(f"     –ü–æ–∏—Å–∫–æ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã: {member_info.get('search_terms', [])}")
    
    print("\n3Ô∏è‚É£ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–ò–°–ö–ê:")
    test_phrases = [
        "–í–ª–∞–¥",
        "–í–ª–∞–¥–∏—Å–ª–∞–≤", 
        "–£–ª—å—è–Ω–æ–≤",
        "–≤–ª–∞–¥",
        "–≤–ª–∞–¥–∏—Å–ª–∞–≤"
    ]
    
    for phrase in test_phrases:
        print(f"\n   –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—Ä–∞–∑—É: '{phrase}'")
        found_matches = []
        
        for member_id, member_info in identifier.team_members.items():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –∏–º–µ–Ω–µ–º
            full_name = member_info.get("full_name", "").lower()
            if phrase.lower() in full_name:
                found_matches.append(f"{member_id} (–ø–æ–ª–Ω–æ–µ –∏–º—è)")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Å–µ–≤–¥–æ–Ω–∏–º—ã
            aliases = member_info.get("aliases", [])
            for alias in aliases:
                if phrase.lower() == alias.lower():
                    found_matches.append(f"{member_id} (–ø—Å–µ–≤–¥–æ–Ω–∏–º: {alias})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
            keywords = member_info.get("voice_keywords", [])
            for keyword in keywords:
                if phrase.lower() == keyword.lower():
                    found_matches.append(f"{member_id} (–∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: {keyword})")
        
        if found_matches:
            print(f"     ‚úÖ –ù–∞–π–¥–µ–Ω—ã —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: {', '.join(found_matches)}")
        else:
            print(f"     ‚ùå –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    print("\n4Ô∏è‚É£ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–õ–ù–û–ô –ò–î–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò:")
    test_transcript = "–°–ø–∏–∫–µ—Ä 0: –í–ª–∞–¥, –∫–∞–∫ –¥–µ–ª–∞?"
    print(f"   –¢–µ—Å—Ç–æ–≤—ã–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç: '{test_transcript}'")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ø–∏–∫–µ—Ä–æ–≤
    speakers = identifier._extract_speakers_from_transcript(test_transcript)
    print(f"   –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Å–ø–∏–∫–µ—Ä—ã: {speakers}")
    
    # –ü—Ä–æ–±—É–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é —Å –Ω–∏–∑–∫–∏–º –ø–æ—Ä–æ–≥–æ–º
    print(f"\n   –ü–æ–Ω–∏–∂–∞–µ–º –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –¥–æ 0.1...")
    original_threshold = identifier.config.get("team_identification", {}).get("confidence_threshold", 0.7)
    identifier.config["team_identification"]["confidence_threshold"] = 0.1
    
    result = identifier.identify_participants(test_transcript, "standup")
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç —Å –Ω–∏–∑–∫–∏–º –ø–æ—Ä–æ–≥–æ–º:")
    print(f"     –ò–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ: {result.get('identified', False)}")
    print(f"     –°–ø–∏–∫–µ—Ä–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {len(result.get('speakers', {}))}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ø–∏–∫–µ—Ä–∞
    for speaker_id, speaker_text in speakers.items():
        print(f"\n   –ê–Ω–∞–ª–∏–∑ '{speaker_id}': '{speaker_text}'")
        
        best_score = 0
        best_member = None
        
        for member_id, member_info in identifier.team_members.items():
            score = identifier._calculate_match_score(speaker_text, member_info, "standup")
            print(f"     {member_id}: {score:.3f}")
            
            if score > best_score:
                best_score = score
                best_member = member_id
        
        print(f"     ‚Üí –õ—É—á—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {best_member} ({best_score:.3f})")
        print(f"     ‚Üí –ü—Ä–µ–≤—ã—à–∞–µ—Ç –ø–æ—Ä–æ–≥ {original_threshold}: {'‚úÖ' if best_score >= original_threshold else '‚ùå'}")
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –ø–æ—Ä–æ–≥
    identifier.config["team_identification"]["confidence_threshold"] = original_threshold
    
    print("\n5Ô∏è‚É£ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    if len(identifier.team_members) == 0:
        print("   ‚ùå –£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ team_config.json")
    elif not identifier.identification_enabled:
        print("   ‚ùå –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ 'enabled': true")
    elif not identifier.should_apply_identification('standup'):
        print("   ‚ùå –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫ —à–∞–±–ª–æ–Ω—É 'standup'")
        print("      –î–æ–±–∞–≤—å—Ç–µ 'standup' –≤ 'apply_to_templates' –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –º–∞—Å—Å–∏–≤ –ø—É—Å—Ç—ã–º")
    elif threshold > 0.8:
        print("   ‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–π –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ - –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∏–∑–∏—Ç—å –¥–æ 0.6-0.7")
    else:
        print("   üí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
        print("      1. –°–Ω–∏–∑—å—Ç–µ –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –¥–æ 0.5-0.6")
        print("      2. –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–≤ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        print("      3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç—É")
        print("      4. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ fuzzywuzzy –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∏—Å–∫–∞: pip install fuzzywuzzy")

def suggest_config_improvements():
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\n6Ô∏è‚É£ –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò:")
    
    if not os.path.exists("team_config.json"):
        return
    
    with open("team_config.json", "r", encoding="utf-8") as f:
        config = json.load(f)
    
    team_members = config.get("team_members", {})
    
    for team_name, members in team_members.items():
        for member_id, member_info in members.items():
            full_name = member_info.get("full_name", "")
            aliases = member_info.get("aliases", [])
            keywords = member_info.get("voice_keywords", [])
            
            suggestions = []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–≤
            if full_name:
                name_parts = full_name.split()
                for part in name_parts:
                    if len(part) > 2 and part not in aliases:
                        suggestions.append(f"–¥–æ–±–∞–≤–∏—Ç—å –ø—Å–µ–≤–¥–æ–Ω–∏–º '{part}'")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
            if not keywords:
                suggestions.append("–¥–æ–±–∞–≤–∏—Ç—å voice_keywords")
            
            if suggestions:
                print(f"   {member_id} ({full_name}):")
                for suggestion in suggestions:
                    print(f"     ‚Ä¢ {suggestion}")

def create_test_config():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—ã–º–∏ –∏–º–µ–Ω–∞–º–∏"""
    test_config = {
        "team_identification": {
            "enabled": True,
            "apply_to_templates": ["standup", "project", "review"],
            "confidence_threshold": 0.5,  # –ü–æ–Ω–∏–∂–µ–Ω–Ω—ã–π –ø–æ—Ä–æ–≥
            "fuzzy_matching": True,
            "partial_name_matching": True
        },
        "team_members": {
            "development": {
                "vlad": {
                    "full_name": "–í–ª–∞–¥–∏—Å–ª–∞–≤",
                    "role": "Developer",
                    "team": "development",
                    "aliases": ["–í–ª–∞–¥", "–í–ª–∞–¥–∏—Å–ª–∞–≤", "–≤–ª–∞–¥", "–≤–ª–∞–¥–∏—Å–ª–∞–≤"],
                    "voice_keywords": ["–≤–ª–∞–¥", "–≤–ª–∞–¥–∏—Å–ª–∞–≤", "vlad"]
                },
                "sasha": {
                    "full_name": "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä",
                    "role": "Developer", 
                    "team": "development",
                    "aliases": ["–°–∞—à–∞", "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä", "—Å–∞—à–∞", "–∞–ª–µ–∫—Å–∞–Ω–¥—Ä"],
                    "voice_keywords": ["—Å–∞—à–∞", "–∞–ª–µ–∫—Å–∞–Ω–¥—Ä", "sasha"]
                }
            },
            "testing": {
                "yulia": {
                    "full_name": "–Æ–ª–∏—è",
                    "role": "QA",
                    "team": "testing",
                    "aliases": ["–Æ–ª—è", "–Æ–ª–∏—è", "—é–ª—è", "—é–ª–∏—è"],
                    "voice_keywords": ["—é–ª—è", "—é–ª–∏—è", "yulia"]
                }
            }
        }
    }
    
    with open("test_config.json", "w", encoding="utf-8") as f:
        json.dump(test_config, f, ensure_ascii=False, indent=2)
    
    print(f"\n7Ô∏è‚É£ –°–û–ó–î–ê–ù–ê –¢–ï–°–¢–û–í–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø:")
    print("   –§–∞–π–ª: test_config.json")
    print("   –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:")
    print("     ‚Ä¢ –ü–æ–Ω–∏–∂–µ–Ω–Ω—ã–π –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (0.5)")
    print("     ‚Ä¢ –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –∏–º–µ–Ω–∞")
    print("     ‚Ä¢ –ë–æ–ª—å—à–µ –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–≤")
    print("     ‚Ä¢ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ö")
    print("\n   –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print("   python -c \"from team_identifier import TeamIdentifier; t=TeamIdentifier('test_config.json'); print(t.identify_participants('–°–ø–∏–∫–µ—Ä 0: –í–ª–∞–¥, –∫–∞–∫ –¥–µ–ª–∞?', 'standup'))\"")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    diagnose_identification_issues()
    suggest_config_improvements()
    create_test_config()
    
    print(f"\nüéØ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    print("1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –≤—ã–≤–æ–¥ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
    print("2. –í–Ω–µ—Å–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ team_config.json")
    print("3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å test_config.json")
    print("4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ team_identifier.py –ø–æ–≤—Ç–æ—Ä–Ω–æ")

if __name__ == "__main__":
    main()
