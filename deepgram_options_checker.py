#!/usr/bin/env python3
"""
–ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –æ–ø—Ü–∏–π Deepgram API
"""

import os
import sys
import json
import subprocess
from typing import Optional
from meeting_processor import MeetingProcessor, load_config

def check_all_deepgram_options():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–µ–¥–∞—á—É –≤—Å–µ—Ö –æ–ø—Ü–∏–π –≤ Deepgram"""
    
    print("üîç –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –û–ü–¶–ò–ô DEEPGRAM")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = load_config("config.json")
    
    DEEPGRAM_API_KEY = config.get("api_keys", {}).get("deepgram")
    if not DEEPGRAM_API_KEY or DEEPGRAM_API_KEY == "your_deepgram_api_key_here":
        print("‚ùå API –∫–ª—é—á Deepgram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ config.json")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    deepgram_options = config.get("deepgram_options", {})
    
    print("üìã –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ config.json:")
    for option, value in deepgram_options.items():
        status = "‚úÖ" if value else "‚ùå"
        print(f"   {status} {option}: {value}")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    processor = MeetingProcessor(
        DEEPGRAM_API_KEY,
        "test_key",
        deepgram_options=deepgram_options
    )
    
    print("\nüé§ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–µ:")
    for option, value in processor.deepgram_options.items():
        status = "‚úÖ" if value else "‚ùå"
        print(f"   {status} {option}: {value}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –∫–æ—Ä–æ—Ç–∫–∏–º –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–º
    test_file = input("\nüìÅ –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –∫–æ—Ä–æ—Ç–∫–æ–º—É –∞—É–¥–∏–æ—Ñ–∞–π–ª—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–∏–ª–∏ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ").strip().strip('"')
    
    if test_file and os.path.exists(test_file):
        print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä—É—é –æ–ø—Ü–∏–∏ –Ω–∞ —Ñ–∞–π–ª–µ: {test_file}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –æ–±—Ä–∞–∑–µ—Ü
        test_sample = create_short_sample(test_file, 30)  # 30 —Å–µ–∫—É–Ω–¥
        
        if test_sample:
            try:
                with open(test_sample, "rb") as f:
                    audio_data = f.read()
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å –ø–æ–ª–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                try:
                    result = processor.transcribe_audio_with_timeout(audio_data, timeout_override=60)
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}")
                    result = None
                
                if result:
                    print("\n‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
                    print(f"üìù –î–ª–∏–Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {len(result)} —Å–∏–º–≤–æ–ª–æ–≤")
                    print(f"üé≠ –£–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å–ø–∏–∫–µ—Ä–æ–≤: {result.count('Speaker')}")
                    # Fixed: moved the split operation outside the f-string
                    line_count = len(result.split('\n'))
                    print(f"üìÑ –°—Ç—Ä–æ–∫: {line_count}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞
                    preview = result[:200] + "..." if len(result) > 200 else result
                    print("üìñ –ü—Ä–µ–≤—å—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:")
                    print(f"   {preview}")
                else:
                    print("‚ùå –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
                    
            finally:
                try:
                    os.remove(test_sample)
                except:
                    pass
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–∑–µ—Ü")
    
    else:
        print("\n‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ - —Ñ–∞–π–ª –Ω–µ —É–∫–∞–∑–∞–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")

def create_short_sample(input_file: str, duration_seconds: int = 30) -> Optional[str]:
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π –æ–±—Ä–∞–∑–µ—Ü –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        output_file = f"test_short_{duration_seconds}s.wav"
        
        cmd = [
            'ffmpeg',
            '-i', input_file,
            '-t', str(duration_seconds),
            '-acodec', 'pcm_s16le',
            '-ar', '44100',
            '-ac', '2',
            '-y',
            output_file
        ]
        
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            print(f"üìÑ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–∑–µ—Ü: {output_file} ({duration_seconds}s)")
            return output_file
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞–∑—Ü–∞: {result.stderr}")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

def test_specific_options():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –æ–ø—Ü–∏–π"""
    
    print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–ù–ö–†–ï–¢–ù–´–• –û–ü–¶–ò–ô")
    print("=" * 40)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = load_config("config.json")
    DEEPGRAM_API_KEY = config.get("api_keys", {}).get("deepgram")
    
    if not DEEPGRAM_API_KEY or DEEPGRAM_API_KEY == "your_deepgram_api_key_here":
        print("‚ùå API –∫–ª—é—á Deepgram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    test_configs = [
        {
            "name": "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
            "options": {
                "punctuate": True,
                "diarize": False,
                "smart_format": False,
                "paragraphs": False,
                "utterances": False,
                "summarize": False,
                "detect_language": False
            }
        },
        {
            "name": "–¢–æ–ª—å–∫–æ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—è",
            "options": {
                "punctuate": True,
                "diarize": True,
                "smart_format": False,
                "paragraphs": False,
                "utterances": False,
                "summarize": False,
                "detect_language": False
            }
        },
        {
            "name": "–ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π)",
            "options": {
                "punctuate": True,
                "diarize": True,
                "smart_format": True,
                "paragraphs": True,
                "utterances": False,
                "summarize": False,
                "detect_language": False
            }
        },
        {
            "name": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
            "options": {
                "punctuate": True,
                "diarize": True,
                "smart_format": True,
                "paragraphs": True,
                "utterances": True,
                "summarize": True,
                "detect_language": False
            }
        }
    ]
    
    for i, test_config in enumerate(test_configs, 1):
        print(f"\n{i}. {test_config['name']}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        enabled_options = [k for k, v in test_config['options'].items() if v]
        disabled_options = [k for k, v in test_config['options'].items() if not v]
        
        print(f"   ‚úÖ –í–∫–ª—é—á–µ–Ω–æ: {', '.join(enabled_options)}")
        print(f"   ‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ: {', '.join(disabled_options)}")
        
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    
    print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("   ü•á –î–ª—è –≤—Å—Ç—Ä–µ—á: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä'")
    print("   ü•à –î–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é: '–¢–æ–ª—å–∫–æ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—è'")
    print("   ü•â –î–ª—è –ª–µ–∫—Ü–∏–π: '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'")

def show_options_reference():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –≤—Å–µ—Ö –æ–ø—Ü–∏–π Deepgram"""
    
    print("\nüìö –°–ü–†–ê–í–û–ß–ù–ò–ö –û–ü–¶–ò–ô DEEPGRAM")
    print("=" * 35)
    
    options_info = {
        "punctuate": {
            "description": "–î–æ–±–∞–≤–ª—è–µ—Ç –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç",
            "recommendation": "–í—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω–æ",
            "impact": "–£–ª—É—á—à–∞–µ—Ç —á–∏—Ç–∞–µ–º–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞",
            "default": True
        },
        "diarize": {
            "description": "–†–∞–∑–¥–µ–ª—è–µ—Ç —Ä–µ—á—å –ø–æ —Å–ø–∏–∫–µ—Ä–∞–º (Speaker 0, Speaker 1...)",
            "recommendation": "–í–∫–ª—é—á–∏—Ç—å –¥–ª—è –≤—Å—Ç—Ä–µ—á –∏ –∏–Ω—Ç–µ—Ä–≤—å—é",
            "impact": "–ö—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π",
            "default": True
        },
        "smart_format": {
            "description": "–£–º–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª, –¥–∞—Ç, –≤–∞–ª—é—Ç",
            "recommendation": "–í–∫–ª—é—á–∏—Ç—å –¥–ª—è –¥–µ–ª–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á",
            "impact": "–£–ª—É—á—à–∞–µ—Ç –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤",
            "default": True
        },
        "paragraphs": {
            "description": "–†–∞–∑–¥–µ–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —Å–º—ã—Å–ª–æ–≤—ã–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã",
            "recommendation": "–í–∫–ª—é—á–∏—Ç—å –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π",
            "impact": "–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç, —É–ª—É—á—à–∞–µ—Ç —á–∏—Ç–∞–µ–º–æ—Å—Ç—å",
            "default": True
        },
        "utterances": {
            "description": "–î–æ–±–∞–≤–ª—è–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ –∫–∞–∂–¥–æ–º –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏–∏",
            "recommendation": "–î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞",
            "impact": "–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Å–ø–∏–∫–µ—Ä–∞—Ö",
            "default": False
        },
        "summarize": {
            "description": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–≥–æ –∏–∑–ª–æ–∂–µ–Ω–∏—è",
            "recommendation": "–û—Ç–∫–ª—é—á–∏—Ç—å (–∫–æ–Ω—Ñ–ª–∏–∫—Ç—É–µ—Ç —Å Claude)",
            "impact": "Deepgram —Å–æ–∑–¥–∞–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ä–µ–∑—é–º–µ",
            "default": False
        },
        "detect_language": {
            "description": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞",
            "recommendation": "–¢–æ–ª—å–∫–æ –¥–ª—è –º–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π",
            "impact": "–ú–æ–∂–µ—Ç –∑–∞–º–µ–¥–ª–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É",
            "default": False
        }
    }
    
    for option, info in options_info.items():
        status = "‚úÖ" if info["default"] else "‚ùå"
        print(f"\n{status} {option.upper()}")
        print(f"   üìù {info['description']}")
        print(f"   üí° {info['recommendation']}")
        print(f"   üéØ {info['impact']}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üîç –ê–ù–ê–õ–ò–ó–ê–¢–û–† –û–ü–¶–ò–ô DEEPGRAM")
    print("=" * 40)
    
    print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
    print("1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    print("2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ–ø—Ü–∏–∏")
    print("3. –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –≤—Å–µ—Ö –æ–ø—Ü–∏–π")
    print("4. –í—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏")
    print("5. –í—ã—Ö–æ–¥")
    
    choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-5): ").strip()
    
    if choice == "1":
        check_all_deepgram_options()
    elif choice == "2":
        test_specific_options()
    elif choice == "3":
        show_options_reference()
    elif choice == "4":
        check_all_deepgram_options()
        test_specific_options()
        show_options_reference()
    elif choice == "5":
        print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

if __name__ == "__main__":
    main()