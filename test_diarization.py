#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ø–æ —Å–ø–∏–∫–µ—Ä–∞–º (diarization) –≤ Deepgram
"""

import os
import sys
from pathlib import Path
from meeting_processor import MeetingProcessor, load_config

def test_diarization_options():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ø–æ —Å–ø–∏–∫–µ—Ä–∞–º"""
    
    print("üé§ –¢–ï–°–¢ –†–ê–ó–î–ï–õ–ï–ù–ò–Ø –ü–û –°–ü–ò–ö–ï–†–ê–ú (DIARIZATION)")
    print("=" * 60)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    config = load_config("config.json")
    
    DEEPGRAM_API_KEY = config.get("api_keys", {}).get("deepgram")
    CLAUDE_API_KEY = config.get("api_keys", {}).get("claude", "test")
    
    if not DEEPGRAM_API_KEY or DEEPGRAM_API_KEY == "your_deepgram_api_key_here":
        print("‚ùå API –∫–ª—é—á Deepgram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ config.json")
        return
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if len(sys.argv) > 1:
        test_file = sys.argv[1]
    else:
        test_file = input("üìÅ –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ").strip().strip('"')
    
    if not os.path.exists(test_file):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {test_file}")
        return
    
    print(f"üìÑ –¢–µ—Å—Ç–∏—Ä—É—é —Ñ–∞–π–ª: {test_file}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ diarization
    test_configs = [
        {
            "name": "–ë–∞–∑–æ–≤–∞—è –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—è",
            "options": {"diarize": True, "punctuate": True, "smart_format": True},
            "description": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –ø–æ —Å–ø–∏–∫–µ—Ä–∞–º"
        },
        {
            "name": "–î–∏–∞—Ä–∏–∑–∞—Ü–∏—è + utterances",
            "options": {"diarize": True, "utterances": True, "punctuate": True},
            "description": "–° –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏–π"
        },
        {
            "name": "–¢–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–π —Ç–µ–∫—Å—Ç",
            "options": {"diarize": False, "punctuate": True},
            "description": "–ë–µ–∑ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ø–æ —Å–ø–∏–∫–µ—Ä–∞–º –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"
        }
    ]
    
    results = []
    
    for i, test_config in enumerate(test_configs, 1):
        print(f"\n{'='*50}")
        print(f"üß™ –¢–ï–°–¢ {i}: {test_config['name']}")
        print(f"üìù {test_config['description']}")
        print(f"‚öôÔ∏è –û–ø—Ü–∏–∏: {test_config['options']}")
        print(f"{'='*50}")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        processor = MeetingProcessor(
            DEEPGRAM_API_KEY, 
            CLAUDE_API_KEY, 
            deepgram_timeout=300,
            deepgram_options=test_config['options']
        )
        
        # –ë–µ—Ä–µ–º –Ω–µ–±–æ–ª—å—à—É—é —á–∞—Å—Ç—å —Ñ–∞–π–ª–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_audio_path = create_test_sample(test_file, duration_seconds=60)
        
        if test_audio_path:
            try:
                # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º
                with open(test_audio_path, "rb") as f:
                    audio_data = f.read()
                
                transcript = processor.transcribe_audio_with_timeout(audio_data, timeout_override=120)
                
                if transcript:
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    speaker_count = transcript.count("Speaker")
                    lines_count = len([line for line in transcript.split('\n') if line.strip()])
                    
                    result = {
                        "config": test_config['name'],
                        "speaker_count": speaker_count,
                        "lines_count": lines_count,
                        "has_speakers": "Speaker" in transcript,
                        "transcript_preview": transcript[:300] + "..." if len(transcript) > 300 else transcript
                    }
                    
                    results.append(result)
                    
                    print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:")
                    print(f"   üé≠ –£–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å–ø–∏–∫–µ—Ä–æ–≤: {speaker_count}")
                    print(f"   üìÑ –°—Ç—Ä–æ–∫ —Ç–µ–∫—Å—Ç–∞: {lines_count}")
                    print(f"   üéØ –ï—Å—Ç—å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ: {'–î–∞' if result['has_speakers'] else '–ù–µ—Ç'}")
                    print(f"   üìù –ü—Ä–µ–≤—å—é:")
                    print(f"   {result['transcript_preview']}")
                    
                else:
                    print(f"‚ùå –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
                    results.append({"config": test_config['name'], "error": "–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å"})
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                results.append({"config": test_config['name'], "error": str(e)})
            
            finally:
                # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
                try:
                    os.remove(test_audio_path)
                except:
                    pass
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–∑–µ—Ü")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print(f"\n{'='*60}")
    print(f"üìä –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print(f"{'='*60}")
    
    for result in results:
        if "error" not in result:
            print(f"üß™ {result['config']}:")
            print(f"   üé≠ –°–ø–∏–∫–µ—Ä–æ–≤: {result['speaker_count']}")
            print(f"   üéØ –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ: {'‚úÖ –ï—Å—Ç—å' if result['has_speakers'] else '‚ùå –ù–µ—Ç'}")
            print(f"   üìÑ –°—Ç—Ä–æ–∫: {result['lines_count']}")
        else:
            print(f"üß™ {result['config']}: ‚ùå {result['error']}")
        print()
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    best_result = max([r for r in results if "error" not in r], 
                     key=lambda x: x['speaker_count'], default=None)
    
    if best_result:
        print(f"üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:")
        print(f"–õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∫–∞–∑–∞–ª: {best_result['config']}")
        print(f"–ù–∞–π–¥–µ–Ω–æ {best_result['speaker_count']} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å–ø–∏–∫–µ—Ä–æ–≤")
    
    print(f"\nüîß –î–õ–Ø –£–õ–£–ß–®–ï–ù–ò–Ø –î–ò–ê–†–ò–ó–ê–¶–ò–ò:")
    print(f"1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ –∑–∞–ø–∏—Å–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥–æ–≤–æ—Ä—è—â–∏—Ö")
    print(f"2. –ö–∞—á–µ—Å—Ç–≤–æ –∞—É–¥–∏–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º")
    print(f"3. –ì–æ–≤–æ—Ä—è—â–∏–µ –¥–æ–ª–∂–Ω—ã —Ä–∞–∑–ª–∏—á–∞—Ç—å—Å—è –ø–æ –≥–æ–ª–æ—Å—É")
    print(f"4. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –º–æ–¥–µ–ª—å 'nova-2' –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

def create_test_sample(input_file: str, duration_seconds: int = 60) -> str:
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–∑–µ—Ü —Ñ–∞–π–ª–∞"""
    try:
        output_file = f"test_sample_{duration_seconds}s.wav"
        
        cmd = [
            'ffmpeg',
            '-i', input_file,
            '-t', str(duration_seconds),
            '-acodec', 'pcm_s16le',
            '-ar', '44100',
            '-ac', '2',
            '-y',
            output_file
        ]
        
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            print(f"üìÑ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–∑–µ—Ü: {output_file}")
            return output_file
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞–∑—Ü–∞: {result.stderr}")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

def show_diarization_tips():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–≤–µ—Ç—ã –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏"""
    
    print(f"\nüí° –°–û–í–ï–¢–´ –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ –†–ê–ó–î–ï–õ–ï–ù–ò–Ø –ü–û –°–ü–ò–ö–ï–†–ê–ú:")
    print("=" * 55)
    
    tips = [
        "üé§ –ö–∞—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–∏ - —á–µ–º –ª—É—á—à–µ –∫–∞—á–µ—Å—Ç–≤–æ, —Ç–µ–º –ª—É—á—à–µ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—è",
        "üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∏–∫–µ—Ä–æ–≤ - –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ 2-6 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
        "üîä –†–∞–∑–ª–∏—á–∏—è –≤ –≥–æ–ª–æ—Å–∞—Ö - –º—É–∂—Å–∫–∏–µ/–∂–µ–Ω—Å–∫–∏–µ –≥–æ–ª–æ—Å–∞ —Ä–∞–∑–¥–µ–ª—è—é—Ç—Å—è –ª—É—á—à–µ",
        "‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏–π - –∫–æ—Ä–æ—Ç–∫–∏–µ —Ä–µ–ø–ª–∏–∫–∏ —Ö—É–∂–µ —Ä–∞—Å–ø–æ–∑–Ω–∞—é—Ç—Å—è",
        "üîá –§–æ–Ω–æ–≤—ã–π —à—É–º - –º–∏–Ω–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ –∑–≤—É–∫–∏",
        "üìç –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–≤ - —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
        "üó£Ô∏è –ß–µ—Ç–∫–∞—è —Ä–µ—á—å - –∏–∑–±–µ–≥–∞–π—Ç–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤",
        "‚öôÔ∏è –ú–æ–¥–µ–ª—å nova-2 - –ª—É—á—à–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏"
    ]
    
    for tip in tips:
        print(f"  {tip}")
    
    print(f"\nüîß –ù–ê–°–¢–†–û–ô–ö–ò –í CONFIG.JSON –î–õ–Ø –õ–£–ß–®–ï–ô –î–ò–ê–†–ò–ó–ê–¶–ò–ò:")
    print("""
{
  "deepgram_options": {
    "diarize": true,
    "punctuate": true,
    "smart_format": true,
    "paragraphs": true,
    "utterances": false
  }
}
""")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) > 1:
        test_diarization_options()
    else:
        print("üé§ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –î–ò–ê–†–ò–ó–ê–¶–ò–ò DEEPGRAM")
        print("=" * 40)
        print("–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–º–æ–∂–µ—Ç –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–ø–∏–∫–µ—Ä–∞–º")
        print("–∏ –Ω–∞–π—Ç–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤–∞—à–µ–≥–æ –∞—É–¥–∏–æ.")
        print()
        
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n1. –¢–µ—Å—Ç –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏\n2. –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–≤–µ—Ç—ã\n3. –í—ã—Ö–æ–¥\n–í–≤–æ–¥: ")
        
        if choice == "1":
            test_diarization_options()
        elif choice == "2":
            show_diarization_tips()
        else:
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")

if __name__ == "__main__":
    import subprocess
    main()