# Gunicorn configuration –¥–ª—è Meeting Processor
import os
import multiprocessing

# Server socket
bind = f"0.0.0.0:{os.environ.get('PORT', 8000)}"
backlog = 2048

# Worker processes
workers = int(os.environ.get('GUNICORN_WORKERS', multiprocessing.cpu_count() * 2 + 1))
worker_class = "sync"
workers = 1
worker_connections = 1000
max_requests = 1000
max_requests_jitter = 100
timeout = int(os.environ.get('GUNICORN_TIMEOUT', 300))  # 5 –º–∏–Ω—É—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤
keepalive = 2

# Restart workers
max_requests = int(os.environ.get('GUNICORN_MAX_REQUESTS', 1000))
max_requests_jitter = int(os.environ.get('GUNICORN_MAX_REQUESTS_JITTER', 50))
preload_app = True

# Logging
loglevel = os.environ.get('LOG_LEVEL', 'info')
accesslog = '-'  # stdout
errorlog = '-'   # stderr
access_log_format = '%(h)s %(l)s %(u)s %(t)s "%(r)s" %(s)s %(b)s "%(f)s" "%(a)s" %(D)s'

# Process naming
proc_name = 'meeting_processor_web'

# Server mechanics
daemon = False
pidfile = '/tmp/gunicorn.pid'
user = None
group = None
tmp_upload_dir = None

# SSL (–¥–ª—è HTTPS)
keyfile = os.environ.get('SSL_KEYFILE')
certfile = os.environ.get('SSL_CERTFILE')

# Worker tuning
worker_tmp_dir = '/dev/shm'  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å RAM –¥–ª—è temporary files

def when_ready(server):
    server.log.info("üöÄ Meeting Processor Server –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

def worker_int(worker):
    worker.log.info("üíÄ Worker –ø–æ–ª—É—á–∏–ª SIGINT")

def pre_fork(server, worker):
    server.log.info(f"üë∂ Worker {worker.pid} —Å–æ–∑–¥–∞–µ—Ç—Å—è")

def post_fork(server, worker):
    server.log.info(f"‚úÖ Worker {worker.pid} –∑–∞–ø—É—â–µ–Ω")

def pre_exec(server):
    server.log.info("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞")

def on_exit(server):
    server.log.info("üëã Meeting Processor Server –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")