#!/usr/bin/env python3
"""
–†–∞–±–æ—á–∞—è –≤–µ—Ä—Å–∏—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å—Ç—Ä–µ—á
–ü–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞
"""

import os
import sys
import tempfile
import shutil
import uuid
import time
import threading
from pathlib import Path
from typing import Dict, Optional
import logging
from datetime import datetime
from concurrent.futures import ThreadPoolExecutor

# –í–µ–±-—Ñ—Ä–µ–π–º–≤–æ—Ä–∫
try:
    from flask import Flask, request, render_template_string, jsonify, send_file, redirect, url_for, flash, session
    from werkzeug.utils import secure_filename
    from werkzeug.exceptions import RequestEntityTooLarge
except ImportError:
    print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Flask: pip install Flask")
    sys.exit(1)

# –ù–∞—à–∏ –º–æ–¥—É–ª–∏
try:
    from meeting_processor import MeetingProcessor
    from config_loader import ConfigLoader
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {e}")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class WorkingMeetingWebApp:
    """–†–∞–±–æ—á–∞—è –≤–µ—Ä—Å–∏—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å—Ç—Ä–µ—á"""
    
    def __init__(self, config_file: str = "config.json"):
        self.app = Flask(__name__)
        self.app.secret_key = os.urandom(24)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self.config = ConfigLoader.load_config(config_file)
        if not self.config:
            raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ {config_file}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º API –∫–ª—é—á–∏
        api_keys_file = self.config.get("paths", {}).get("api_keys_config", "api_keys.json")
        self.api_keys_data = ConfigLoader.load_api_keys(api_keys_file)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á–∏
        deepgram_valid, claude_valid, self.deepgram_key, self.claude_key = ConfigLoader.validate_api_keys(self.api_keys_data)
        
        if not deepgram_valid or not claude_valid:
            raise Exception("‚ùå API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.setup_app_config()
        
        # –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–¥–∞—á –∏ –∑–∞—â–∏—Ç–∞ –æ—Ç race conditions
        self.processing_jobs = {}
        self.jobs_lock = threading.Lock()
        
        # –ü—É–ª –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤
        self.executor = ThreadPoolExecutor(max_workers=3, thread_name_prefix="FileProcessor")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        self.upload_folder = Path("web_uploads")
        self.output_folder = Path("web_output")
        self.upload_folder.mkdir(exist_ok=True)
        self.output_folder.mkdir(exist_ok=True)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
        self.setup_routes()
        
        logger.info("üåê –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
    
    def setup_app_config(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Flask"""
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        max_size_mb = self.config.get("settings", {}).get("max_file_size_mb", 100)
        self.app.config['MAX_CONTENT_LENGTH'] = max_size_mb * 1024 * 1024
        
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ñ–∞–π–ª–æ–≤
        self.allowed_extensions = {'mp3', 'wav', 'flac', 'aac', 'm4a', 'ogg', 'opus', 'mp4', 'avi', 'mov', 'mkv', 'wmv', 'webm'}
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        formats = self.config.get("supported_formats", {})
        if formats:
            self.allowed_extensions = set()
            for format_list in formats.values():
                clean_extensions = [ext.lstrip('.').lower() for ext in format_list]
                self.allowed_extensions.update(clean_extensions)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.processing_settings = self.config.get("settings", {})
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è HTML
        self.allowed_extensions_list = sorted(list(self.allowed_extensions))
        self.accept_string = ','.join([f'.{ext}' for ext in self.allowed_extensions_list])
        self.formats_display = ', '.join([ext.upper() for ext in self.allowed_extensions_list])
        
        logger.info(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {max_size_mb} –ú–ë")
        logger.info(f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {self.formats_display}")
    
    def allowed_file(self, filename: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏"""
        if '.' not in filename:
            return False
        file_ext = filename.rsplit('.', 1)[1].lower()
        return file_ext in self.allowed_extensions
    
    def get_available_templates(self) -> Dict[str, str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã"""
        return self.config.get("template_examples", {
            "standard": "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è –ª—é–±—ã—Ö –≤—Å—Ç—Ä–µ—á",
            "business": "–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è –¥–µ–ª–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á",
            "project": "–§–æ–∫—É—Å –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –∏ –∑–∞–¥–∞—á–∞–º–∏",
            "standup": "–ö—Ä–∞—Ç–∫–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Å—Ç–µ–Ω–¥–∞–ø–æ–≤",
            "interview": "–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –æ–± –∏–Ω—Ç–µ—Ä–≤—å—é"
        })
    
    def update_job_status(self, job_id: str, **kwargs):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏"""
        with self.jobs_lock:
            if job_id in self.processing_jobs:
                self.processing_jobs[job_id].update(kwargs)
    
    def get_job_status(self, job_id: str) -> Optional[Dict]:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏"""
        with self.jobs_lock:
            return self.processing_jobs.get(job_id, {}).copy() if job_id in self.processing_jobs else None
    
    def setup_routes(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –º–∞—Ä—à—Ä—É—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        
        @self.app.route('/health')
        def health_check():
            """Health check –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
            return jsonify({
                'status': 'healthy',
                'timestamp': datetime.utcnow().isoformat(),
                'version': '1.0.0',
                'active_jobs': len([j for j in self.processing_jobs.values() 
                                  if j['status'] in ['uploaded', 'processing']])
            })        
            
        @self.app.route('/')
        def index():
            """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
            templates = self.get_available_templates()
            max_size_mb = self.app.config['MAX_CONTENT_LENGTH'] // (1024 * 1024)
            
            return render_template_string(
                self.get_index_template(),
                templates=templates,
                max_size_mb=max_size_mb,
                accept_string=self.accept_string,
                formats_display=self.formats_display
            )
        
        @self.app.route('/upload', methods=['POST'])
        def upload_file():
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞"""
            try:
                if 'file' not in request.files:
                    flash('–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω', 'error')
                    return redirect(url_for('index'))
                
                file = request.files['file']
                template_type = request.form.get('template', 'standard')
                
                if file.filename == '':
                    flash('–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω', 'error')
                    return redirect(url_for('index'))
                
                if not self.allowed_file(file.filename):
                    flash(f'–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã: {self.formats_display}', 'error')
                    return redirect(url_for('index'))
                
                # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∑–∞–¥–∞—á–∏
                job_id = str(uuid.uuid4())
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                filename = secure_filename(file.filename)
                file_path = self.upload_folder / f"{job_id}_{filename}"
                file.save(str(file_path))
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
                with self.jobs_lock:
                    self.processing_jobs[job_id] = {
                        'status': 'uploaded',
                        'filename': filename,
                        'template': template_type,
                        'file_path': str(file_path),
                        'created_at': datetime.now(),
                        'progress': 0,
                        'message': '–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω, –æ–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏'
                    }
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                self.executor.submit(self.process_file_sync, job_id)
                
                session['current_job_id'] = job_id
                flash(f'–§–∞–π–ª "{filename}" —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É', 'success')
                return redirect(url_for('status', job_id=job_id))
                
            except RequestEntityTooLarge:
                max_size = self.app.config['MAX_CONTENT_LENGTH'] // (1024 * 1024)
                flash(f'–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {max_size} –ú–ë', 'error')
                return redirect(url_for('index'))
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
                flash(f'–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}', 'error')
                return redirect(url_for('index'))
        
        @self.app.route('/status/<job_id>')
        def status(job_id: str):
            """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
            job = self.get_job_status(job_id)
            if not job:
                flash('–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 'error')
                return redirect(url_for('index'))
            
            templates = self.get_available_templates()
            
            return render_template_string(
                self.get_status_template(),
                job_id=job_id,
                job=job,
                templates=templates
            )
        
        @self.app.route('/api/status/<job_id>')
        def api_status(job_id: str):
            """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏"""
            job = self.get_job_status(job_id)
            if not job:
                return jsonify({'error': 'Job not found'}), 404
            
            return jsonify({
                'status': job['status'],
                'progress': job['progress'],
                'message': job['message'],
                'filename': job['filename'],
                'template': job['template']
            })
        
        @self.app.route('/download/<job_id>/<file_type>')
        def download_file(job_id: str, file_type: str):
            """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤"""
            job = self.get_job_status(job_id)
            if not job:
                flash('–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 'error')
                return redirect(url_for('index'))
            
            if job['status'] != 'completed':
                flash('–û–±—Ä–∞–±–æ—Ç–∫–∞ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', 'error')
                return redirect(url_for('status', job_id=job_id))
            
            try:
                if file_type == 'transcript':
                    file_path = job.get('transcript_file')
                    download_name = f"{Path(job['filename']).stem}_transcript.txt"
                elif file_type == 'summary':
                    file_path = job.get('summary_file')
                    download_name = f"{Path(job['filename']).stem}_summary.md"
                else:
                    flash('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞', 'error')
                    return redirect(url_for('status', job_id=job_id))
                
                if not file_path or not os.path.exists(file_path):
                    flash('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
                    return redirect(url_for('status', job_id=job_id))
                
                return send_file(file_path, as_attachment=True, download_name=download_name)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
                flash(f'–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}', 'error')
                return redirect(url_for('status', job_id=job_id))
        
        @self.app.route('/view/<job_id>/<file_type>')
        def view_file(job_id: str, file_type: str):
            """–ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–æ–≤ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ"""
            job = self.get_job_status(job_id)
            if not job:
                flash('–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 'error')
                return redirect(url_for('index'))
            
            if job['status'] != 'completed':
                flash('–û–±—Ä–∞–±–æ—Ç–∫–∞ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', 'error')
                return redirect(url_for('status', job_id=job_id))
            
            try:
                if file_type == 'transcript':
                    file_path = job.get('transcript_file')
                    file_title = "–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –≤—Å—Ç—Ä–µ—á–∏"
                    is_markdown = False
                elif file_type == 'summary':
                    file_path = job.get('summary_file')
                    file_title = "–ü—Ä–æ—Ç–æ–∫–æ–ª –≤—Å—Ç—Ä–µ—á–∏"
                    is_markdown = True
                else:
                    flash('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞', 'error')
                    return redirect(url_for('status', job_id=job_id))
                
                if not file_path or not os.path.exists(file_path):
                    flash('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
                    return redirect(url_for('status', job_id=job_id))
                
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                return render_template_string(
                    self.get_view_template(),
                    content=content,
                    file_title=file_title,
                    filename=job['filename'],
                    job_id=job_id,
                    file_type=file_type,
                    is_markdown=is_markdown
                )
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∞–π–ª–∞: {e}")
                flash(f'–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∞–π–ª–∞: {str(e)}', 'error')
                return redirect(url_for('status', job_id=job_id))
        
        @self.app.route('/jobs')
        def jobs_list():
            """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á"""
            jobs = []
            with self.jobs_lock:
                for job_id, job_data in self.processing_jobs.items():
                    jobs.append({
                        'id': job_id,
                        'filename': job_data['filename'],
                        'status': job_data['status'],
                        'template': job_data['template'],
                        'created_at': job_data['created_at'].strftime('%Y-%m-%d %H:%M:%S'),
                        'progress': job_data['progress']
                    })
            
            jobs.sort(key=lambda x: x['created_at'], reverse=True)
            return render_template_string(self.get_jobs_template(), jobs=jobs)
        
        @self.app.errorhandler(RequestEntityTooLarge)
        def handle_file_too_large(e):
            max_size = self.app.config['MAX_CONTENT_LENGTH'] // (1024 * 1024)
            flash(f'–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {max_size} –ú–ë', 'error')
            return redirect(url_for('index'))
    
    def process_file_sync(self, job_id: str):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        job = self.get_job_status(job_id)
        if not job:
            return
        
        try:
            self.update_job_status(job_id, status='processing', progress=10, message='–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏...')
            
            output_dir = self.output_folder / job_id
            output_dir.mkdir(exist_ok=True)
            
            processor = MeetingProcessor(
                deepgram_api_key=self.deepgram_key,
                claude_api_key=self.claude_key,
                deepgram_timeout=self.processing_settings.get('deepgram_timeout_seconds', 300),
                claude_model=self.processing_settings.get('claude_model', 'claude-sonnet-4-20250514'),
                chunk_duration_minutes=self.processing_settings.get('chunk_duration_minutes', 15),
                template_type=job['template']
            )
            
            self.update_job_status(job_id, progress=30, message='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∞—É–¥–∏–æ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏...')
            time.sleep(1)
            
            self.update_job_status(job_id, progress=50, message='–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ...')
            
            # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
            success = processor.process_meeting(
                input_file_path=job['file_path'],
                output_dir=str(output_dir),
                name_mapping=None,
                keep_audio_file=False,
                template_type=job['template']
            )
            
            if success:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
                original_filename = Path(job['file_path']).name
                if original_filename.startswith(job_id + '_'):
                    original_filename = original_filename[len(job_id) + 1:]
                
                input_name = Path(original_filename).stem
                transcript_file = output_dir / f"{input_name}_transcript.txt"
                summary_file = output_dir / f"{input_name}_summary.md"
                
                if transcript_file.exists() and summary_file.exists():
                    self.update_job_status(job_id,
                                         status='completed',
                                         progress=100,
                                         message='–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!',
                                         transcript_file=str(transcript_file),
                                         summary_file=str(summary_file),
                                         completed_at=datetime.now())
                    
                    logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ {job_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                else:
                    # –ò—â–µ–º –ª—é–±—ã–µ —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                    all_files = list(output_dir.glob("*"))
                    transcript_files = [f for f in all_files if "_transcript.txt" in f.name]
                    summary_files = [f for f in all_files if "_summary.md" in f.name]
                    
                    logger.error(f"üìÅ –í—Å–µ —Ñ–∞–π–ª—ã –≤ {output_dir}: {[f.name for f in all_files]}")
                    logger.error(f"üìÑ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç—ã: {[f.name for f in transcript_files]}")
                    logger.error(f"üìã –ü—Ä–æ—Ç–æ–∫–æ–ª—ã: {[f.name for f in summary_files]}")
                    
                    if transcript_files and summary_files:
                        transcript_file = transcript_files[0]
                        summary_file = summary_files[0]
                        
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã: {transcript_file.name}, {summary_file.name}")
                        
                        self.update_job_status(job_id,
                                             status='completed',
                                             progress=100,
                                             message='–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!',
                                             transcript_file=str(transcript_file),
                                             summary_file=str(summary_file),
                                             completed_at=datetime.now())
                        
                        logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ {job_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                        return
                    
                    raise Exception(f"–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ï—Å—Ç—å: {[f.name for f in all_files]}")
            else:
                raise Exception("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {job_id}: {e}")
            self.update_job_status(job_id,
                                 status='error',
                                 progress=0,
                                 message=f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}',
                                 error=str(e))
        
        finally:
            # –û—á–∏—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
            try:
                if os.path.exists(job['file_path']):
                    os.remove(job['file_path'])
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {e}")
    
    def get_index_template(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML —à–∞–±–ª–æ–Ω –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        return '''
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Meeting Processor</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
</head>
<body class="bg-light">
    <nav class="navbar navbar-dark bg-primary">
        <div class="container">
            <span class="navbar-brand"><i class="fas fa-microphone me-2"></i>Meeting Processor</span>
            <div class="navbar-nav">
                <a class="nav-link" href="/jobs"><i class="fas fa-list me-1"></i>–í—Å–µ –∑–∞–¥–∞—á–∏</a>
            </div>
        </div>
    </nav>

    <div class="container mt-4">
        {% with messages = get_flashed_messages(with_categories=true) %}
            {% if messages %}
                {% for category, message in messages %}
                    <div class="alert alert-{{ 'danger' if category == 'error' else 'success' }} alert-dismissible fade show">
                        {{ message }}
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>
                {% endfor %}
            {% endif %}
        {% endwith %}

        <div class="row justify-content-center">
            <div class="col-md-8">
                <div class="card shadow">
                    <div class="card-header bg-primary text-white">
                        <h4><i class="fas fa-upload me-2"></i>–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏</h4>
                    </div>
                    <div class="card-body">
                        <form method="POST" action="/upload" enctype="multipart/form-data">
                            <div class="mb-3">
                                <label for="template" class="form-label">–®–∞–±–ª–æ–Ω –ø—Ä–æ—Ç–æ–∫–æ–ª–∞:</label>
                                <select class="form-select" name="template" required>
                                    {% for template_id, description in templates.items() %}
                                        <option value="{{ template_id }}" {% if template_id == 'standard' %}selected{% endif %}>
                                            {{ template_id.title() }} - {{ description }}
                                        </option>
                                    {% endfor %}
                                </select>
                            </div>

                            <div class="mb-3">
                                <label for="file" class="form-label">–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª:</label>
                                <input type="file" class="form-control" name="file" accept="{{ accept_string }}" required>
                                <div class="form-text">
                                    –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {{ max_size_mb }} –ú–ë<br>
                                    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {{ formats_display }}
                                </div>
                            </div>

                            <button type="submit" class="btn btn-success btn-lg w-100">
                                <i class="fas fa-rocket me-2"></i>–ù–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É
                            </button>
                        </form>
                    </div>
                </div>
            </div>
        </div>

        <div class="row mt-5">
            <div class="col-md-4">
                <div class="card h-100">
                    <div class="card-body text-center">
                        <i class="fas fa-microphone fa-3x text-primary mb-3"></i>
                        <h5>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è</h5>
                        <p class="text-muted">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –≤ —Ç–µ–∫—Å—Ç</p>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card h-100">
                    <div class="card-body text-center">
                        <i class="fas fa-file-alt fa-3x text-success mb-3"></i>
                        <h5>–ü—Ä–æ—Ç–æ–∫–æ–ª—ã</h5>
                        <p class="text-muted">–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã –≤—Å—Ç—Ä–µ—á</p>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card h-100">
                    <div class="card-body text-center">
                        <i class="fas fa-users fa-3x text-info mb-3"></i>
                        <h5>–£—á–∞—Å—Ç–Ω–∏–∫–∏</h5>
                        <p class="text-muted">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–ø–∏–∫–µ—Ä–æ–≤</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
        '''
    
    def get_view_template(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML —à–∞–±–ª–æ–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∞–π–ª–æ–≤"""
        return '''
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ file_title }}</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    {% if is_markdown %}
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    <style>
        .markdown-content {
            line-height: 1.6;
        }
        .markdown-content h1, .markdown-content h2, .markdown-content h3 {
            color: #0d6efd;
            margin-top: 1.5rem;
            margin-bottom: 0.5rem;
        }
        .markdown-content ul, .markdown-content ol {
            margin-bottom: 1rem;
        }
        .markdown-content li {
            margin-bottom: 0.25rem;
        }
        .markdown-content code {
            background-color: #f8f9fa;
            padding: 0.125rem 0.25rem;
            border-radius: 0.25rem;
        }
        .markdown-content blockquote {
            border-left: 4px solid #0d6efd;
            padding-left: 1rem;
            margin: 1rem 0;
            background-color: #f8f9fa;
            padding: 0.5rem 1rem;
        }
    </style>
    {% endif %}
</head>
<body class="bg-light">
    <nav class="navbar navbar-dark bg-primary">
        <div class="container">
            <a class="navbar-brand" href="/"><i class="fas fa-microphone me-2"></i>Meeting Processor</a>
            <div class="navbar-nav">
                <a class="nav-link" href="/jobs"><i class="fas fa-list me-1"></i>–í—Å–µ –∑–∞–¥–∞—á–∏</a>
            </div>
        </div>
    </nav>

    <div class="container mt-4">
        <div class="card shadow">
            <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                <h4><i class="fas fa-file-alt me-2"></i>{{ file_title }}</h4>
                <div>
                    <a href="/download/{{ job_id }}/{{ file_type }}" class="btn btn-light btn-sm me-2">
                        <i class="fas fa-download me-1"></i>–°–∫–∞—á–∞—Ç—å
                    </a>
                    <a href="/status/{{ job_id }}" class="btn btn-outline-light btn-sm">
                        <i class="fas fa-arrow-left me-1"></i>–ù–∞–∑–∞–¥
                    </a>
                </div>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <small class="text-muted">
                        <i class="fas fa-file me-1"></i>–§–∞–π–ª: {{ filename }}
                    </small>
                </div>
                
                {% if is_markdown %}
                    <div id="markdown-content" class="markdown-content"></div>
                    <script>
                        const markdownText = {{ content|tojson }};
                        document.getElementById('markdown-content').innerHTML = marked.parse(markdownText);
                    </script>
                {% else %}
                    <pre class="bg-light p-3 rounded" style="white-space: pre-wrap; max-height: 70vh; overflow-y: auto;">{{ content }}</pre>
                {% endif %}
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
        '''
    
    def get_status_template(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML —à–∞–±–ª–æ–Ω —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å—Ç–∞—Ç—É—Å–∞"""
        return '''
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
</head>
<body class="bg-light">
    <nav class="navbar navbar-dark bg-primary">
        <div class="container">
            <a class="navbar-brand" href="/"><i class="fas fa-microphone me-2"></i>Meeting Processor</a>
            <div class="navbar-nav">
                <a class="nav-link" href="/jobs"><i class="fas fa-list me-1"></i>–í—Å–µ –∑–∞–¥–∞—á–∏</a>
            </div>
        </div>
    </nav>

    <div class="container mt-4">
        <div class="row justify-content-center">
            <div class="col-md-8">
                <div class="card shadow">
                    <div class="card-header bg-primary text-white">
                        <h4><i class="fas fa-tasks me-2"></i>–°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏</h4>
                    </div>
                    <div class="card-body text-center">
                        <div class="mb-3">
                            {% if job.status == 'completed' %}
                                <i class="fas fa-check-circle fa-4x text-success"></i>
                            {% elif job.status == 'error' %}
                                <i class="fas fa-exclamation-circle fa-4x text-danger"></i>
                            {% else %}
                                <i class="fas fa-cog fa-spin fa-4x text-primary"></i>
                            {% endif %}
                        </div>

                        <h5>{{ job.filename }}</h5>
                        <p class="text-muted">–®–∞–±–ª–æ–Ω: {{ job.template }}</p>

                        <div class="progress mb-3" style="height: 30px;">
                            <div class="progress-bar 
                                {% if job.status == 'completed' %}bg-success{% elif job.status == 'error' %}bg-danger{% else %}bg-primary progress-bar-animated{% endif %}" 
                                style="width: {{ job.progress }}%">
                                {{ job.progress }}%
                            </div>
                        </div>

                        <div class="alert 
                            {% if job.status == 'completed' %}alert-success{% elif job.status == 'error' %}alert-danger{% else %}alert-info{% endif %}">
                            {{ job.message }}
                        </div>

                        {% if job.status == 'completed' %}
                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <a href="/view/{{ job_id }}/transcript" class="btn btn-outline-info w-100 mb-2">
                                        <i class="fas fa-eye me-2"></i>–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
                                    </a>
                                </div>
                                <div class="col-md-6">
                                    <a href="/view/{{ job_id }}/summary" class="btn btn-info w-100 mb-2">
                                        <i class="fas fa-eye me-2"></i>–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª
                                    </a>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-6">
                                    <a href="/download/{{ job_id }}/transcript" class="btn btn-outline-primary w-100 mb-2">
                                        <i class="fas fa-file-alt me-2"></i>–°–∫–∞—á–∞—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
                                    </a>
                                </div>
                                <div class="col-md-6">
                                    <a href="/download/{{ job_id }}/summary" class="btn btn-primary w-100 mb-2">
                                        <i class="fas fa-file-download me-2"></i>–°–∫–∞—á–∞—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª
                                    </a>
                                </div>
                            </div>
                            <a href="/" class="btn btn-success">
                                <i class="fas fa-plus me-2"></i>–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –µ—â–µ —Ñ–∞–π–ª
                            </a>
                        {% elif job.status == 'error' %}
                            <a href="/" class="btn btn-primary">
                                <i class="fas fa-upload me-2"></i>–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                            </a>
                        {% endif %}
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        {% if job.status not in ['completed', 'error'] %}
            setInterval(function() {
                fetch('/api/status/{{ job_id }}')
                    .then(response => response.json())
                    .then(data => {
                        if (data.status === 'completed' || data.status === 'error') {
                            location.reload();
                        } else {
                            const progressBar = document.querySelector('.progress-bar');
                            const alertDiv = document.querySelector('.alert');
                            
                            progressBar.style.width = data.progress + '%';
                            progressBar.textContent = data.progress + '%';
                            alertDiv.textContent = data.message;
                        }
                    })
                    .catch(error => console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error));
            }, 2000);
        {% endif %}
    </script>
</body>
</html>
        '''
    
    def get_jobs_template(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML —à–∞–±–ª–æ–Ω —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á"""
        return '''
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–í—Å–µ –∑–∞–¥–∞—á–∏</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
</head>
<body class="bg-light">
    <nav class="navbar navbar-dark bg-primary">
        <div class="container">
            <a class="navbar-brand" href="/"><i class="fas fa-microphone me-2"></i>Meeting Processor</a>
            <div class="navbar-nav">
                <a class="nav-link" href="/"><i class="fas fa-upload me-1"></i>–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª</a>
            </div>
        </div>
    </nav>

    <div class="container mt-4">
        <div class="card shadow">
            <div class="card-header bg-primary text-white">
                <h4><i class="fas fa-list me-2"></i>–ò—Å—Ç–æ—Ä–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤</h4>
            </div>
            <div class="card-body">
                {% if jobs %}
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead class="table-light">
                                <tr>
                                    <th>–§–∞–π–ª</th>
                                    <th>–®–∞–±–ª–æ–Ω</th>
                                    <th>–°—Ç–∞—Ç—É—Å</th>
                                    <th>–ü—Ä–æ–≥—Ä–µ—Å—Å</th>
                                    <th>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è</th>
                                    <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                                </tr>
                            </thead>
                            <tbody>
                                {% for job in jobs %}
                                    <tr>
                                        <td><i class="fas fa-file me-1"></i>{{ job.filename }}</td>
                                        <td><span class="badge bg-secondary">{{ job.template }}</span></td>
                                        <td>
                                            {% if job.status == 'completed' %}
                                                <span class="badge bg-success"><i class="fas fa-check me-1"></i>–ó–∞–≤–µ—Ä—à–µ–Ω–æ</span>
                                            {% elif job.status == 'error' %}
                                                <span class="badge bg-danger"><i class="fas fa-exclamation me-1"></i>–û—à–∏–±–∫–∞</span>
                                            {% elif job.status == 'processing' %}
                                                <span class="badge bg-primary"><i class="fas fa-cog fa-spin me-1"></i>–û–±—Ä–∞–±–æ—Ç–∫–∞</span>
                                            {% else %}
                                                <span class="badge bg-warning"><i class="fas fa-clock me-1"></i>–û–∂–∏–¥–∞–Ω–∏–µ</span>
                                            {% endif %}
                                        </td>
                                        <td>
                                            <div class="progress" style="height: 20px; width: 100px;">
                                                <div class="progress-bar {% if job.status == 'completed' %}bg-success{% elif job.status == 'error' %}bg-danger{% else %}bg-primary{% endif %}" 
                                                    style="width: {{ job.progress }}%">
                                                    <small>{{ job.progress }}%</small>
                                                </div>
                                            </div>
                                        </td>
                                        <td>{{ job.created_at }}</td>
                                        <td>
                                            <a href="/status/{{ job.id }}" class="btn btn-sm btn-outline-primary">
                                                <i class="fas fa-eye me-1"></i>–ü–æ–¥—Ä–æ–±–Ω–µ–µ
                                            </a>
                                        </td>
                                    </tr>
                                {% endfor %}
                            </tbody>
                        </table>
                    </div>
                {% else %}
                    <div class="text-center py-5">
                        <i class="fas fa-inbox fa-3x text-muted mb-3"></i>
                        <h5 class="text-muted">–ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤</h5>
                        <p class="text-muted">–ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã</p>
                        <a href="/" class="btn btn-primary">
                            <i class="fas fa-upload me-2"></i>–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª
                        </a>
                    </div>
                {% endif %}
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
        '''
    
    def run(self, host: str = '127.0.0.1', port: int = 5000, debug: bool = False):
        """–ó–∞–ø—É—Å–∫ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        logger.info(f"üåê –ó–∞–ø—É—Å–∫ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ http://{host}:{port}")
        
        try:
            self.app.run(host=host, port=port, debug=debug, threaded=True)
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—É–ª –ø–æ—Ç–æ–∫–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            self.executor.shutdown(wait=True)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description="–†–∞–±–æ—á–∏–π –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å—Ç—Ä–µ—á")
    parser.add_argument("-c", "--config", default="config.json", help="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    parser.add_argument("--host", default="127.0.0.1", help="IP –∞–¥—Ä–µ—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
    parser.add_argument("--port", type=int, default=5000, help="–ü–æ—Ä—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
    parser.add_argument("--debug", action="store_true", help="–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏")
    
    args = parser.parse_args()
    
    try:
        # –°–æ–∑–¥–∞–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        web_app = WorkingMeetingWebApp(args.config)
        
        print("\n" + "="*60)
        print("üöÄ MEETING PROCESSOR WEB SERVER (–†–ê–ë–û–ß–ê–Ø –í–ï–†–°–ò–Ø)")
        print("="*60)
        print(f"üì± –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:{args.port}")
        print("üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: config.json")
        print("üîë API –∫–ª—é—á–∏: api_keys.json")
        print("üìÅ –ó–∞–≥—Ä—É–∑–∫–∏: web_uploads/")
        print("üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: web_output/")
        print("üßµ –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: ‚úÖ")
        print("üîÑ –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤: ‚úÖ")
        print("\nüí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        print("="*60)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        web_app.run(host=args.host, port=args.port, debug=args.debug)
        
    except KeyboardInterrupt:
        print("\nüëã –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return 1
    
    return 0

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)