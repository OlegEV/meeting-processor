#!/usr/bin/env python3
"""
–†–∞–±–æ—á–∞—è –≤–µ—Ä—Å–∏—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å—Ç—Ä–µ—á
–ü–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞
"""

import os
import sys
import uuid
import threading
from pathlib import Path
from typing import Dict, Optional
import logging
from datetime import datetime
from concurrent.futures import ThreadPoolExecutor

# –í–µ–±-—Ñ—Ä–µ–π–º–≤–æ—Ä–∫
try:
    from flask import Flask, request, render_template_string, jsonify, send_file, redirect, url_for, flash, session
    from werkzeug.utils import secure_filename
    from werkzeug.exceptions import RequestEntityTooLarge
except ImportError:
    print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Flask: pip install Flask")
    sys.exit(1)

# –ù–∞—à–∏ –º–æ–¥—É–ª–∏
try:
    from meeting_processor import MeetingProcessor
    from config_loader import ConfigLoader
    from web_templates import WebTemplates
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {e}")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class WorkingMeetingWebApp:
    """–†–∞–±–æ—á–∞—è –≤–µ—Ä—Å–∏—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å—Ç—Ä–µ—á"""
    
    def __init__(self, config_file: str = "config.json"):
        self.app = Flask(__name__)
        self.app.secret_key = os.urandom(24)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self.config = ConfigLoader.load_config(config_file)
        if not self.config:
            raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ {config_file}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º API –∫–ª—é—á–∏
        api_keys_file = self.config.get("paths", {}).get("api_keys_config", "api_keys.json")
        self.api_keys_data = ConfigLoader.load_api_keys(api_keys_file)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á–∏
        deepgram_valid, claude_valid, self.deepgram_key, self.claude_key = ConfigLoader.validate_api_keys(self.api_keys_data)
        
        if not deepgram_valid or not claude_valid:
            raise Exception("‚ùå API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.setup_app_config()
        
        # –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–¥–∞—á –∏ –∑–∞—â–∏—Ç–∞ –æ—Ç race conditions
        self.processing_jobs = {}
        self.jobs_lock = threading.Lock()
        
        # –ü—É–ª –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤
        self.executor = ThreadPoolExecutor(max_workers=3, thread_name_prefix="FileProcessor")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        self.upload_folder = Path("web_uploads")
        self.output_folder = Path("web_output")
        self.upload_folder.mkdir(exist_ok=True)
        self.output_folder.mkdir(exist_ok=True)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω—ã
        self.templates = WebTemplates()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
        self.setup_routes()
        
        logger.info("üåê –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
    
    def setup_app_config(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Flask"""
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        max_size_mb = self.config.get("settings", {}).get("max_file_size_mb", 100)
        self.app.config['MAX_CONTENT_LENGTH'] = max_size_mb * 1024 * 1024
        
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ñ–∞–π–ª–æ–≤
        self.allowed_extensions = {'mp3', 'wav', 'flac', 'aac', 'm4a', 'ogg', 'opus', 'mp4', 'avi', 'mov', 'mkv', 'wmv', 'webm'}
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        formats = self.config.get("supported_formats", {})
        if formats:
            self.allowed_extensions = set()
            for format_list in formats.values():
                clean_extensions = [ext.lstrip('.').lower() for ext in format_list]
                self.allowed_extensions.update(clean_extensions)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.processing_settings = self.config.get("settings", {})
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è HTML
        self.allowed_extensions_list = sorted(list(self.allowed_extensions))
        self.accept_string = ','.join([f'.{ext}' for ext in self.allowed_extensions_list])
        self.formats_display = ', '.join([ext.upper() for ext in self.allowed_extensions_list])
        
        logger.info(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {max_size_mb} –ú–ë")
        logger.info(f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {self.formats_display}")
    
    def allowed_file(self, filename: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏"""
        if '.' not in filename:
            return False
        file_ext = filename.rsplit('.', 1)[1].lower()
        return file_ext in self.allowed_extensions
    
    def get_available_templates(self) -> Dict[str, str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã"""
        return self.config.get("template_examples", {
            "standard": "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è –ª—é–±—ã—Ö –≤—Å—Ç—Ä–µ—á",
            "business": "–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è –¥–µ–ª–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á",
            "project": "–§–æ–∫—É—Å –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –∏ –∑–∞–¥–∞—á–∞–º–∏",
            "standup": "–ö—Ä–∞—Ç–∫–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Å—Ç–µ–Ω–¥–∞–ø–æ–≤",
            "interview": "–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –æ–± –∏–Ω—Ç–µ—Ä–≤—å—é"
        })
    
    def update_job_status(self, job_id: str, **kwargs):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏"""
        with self.jobs_lock:
            if job_id in self.processing_jobs:
                self.processing_jobs[job_id].update(kwargs)
    
    def get_job_status(self, job_id: str) -> Optional[Dict]:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏"""
        with self.jobs_lock:
            return self.processing_jobs.get(job_id, {}).copy() if job_id in self.processing_jobs else None
    
    def setup_routes(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –º–∞—Ä—à—Ä—É—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        
        @self.app.route('/health')
        def health_check():
            """Health check –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
            return jsonify({
                'status': 'healthy',
                'timestamp': datetime.utcnow().isoformat(),
                'version': '1.0.0',
                'active_jobs': len([j for j in self.processing_jobs.values() 
                                  if j['status'] in ['uploaded', 'processing']])
            })        
            
        @self.app.route('/')
        def index():
            """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
            templates = self.get_available_templates()
            max_size_mb = self.app.config['MAX_CONTENT_LENGTH'] // (1024 * 1024)
            
            return render_template_string(
                self.templates.get_index_template(),
                templates=templates,
                max_size_mb=max_size_mb,
                accept_string=self.accept_string,
                formats_display=self.formats_display
            )
        
        @self.app.route('/upload', methods=['POST'])
        def upload_file():
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞"""
            try:
                if 'file' not in request.files:
                    flash('–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω', 'error')
                    return redirect(url_for('index'))
                
                file = request.files['file']
                template_type = request.form.get('template', 'standard')
                
                if file.filename == '':
                    flash('–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω', 'error')
                    return redirect(url_for('index'))
                
                if not self.allowed_file(file.filename):
                    flash(f'–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã: {self.formats_display}', 'error')
                    return redirect(url_for('index'))
                
                # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∑–∞–¥–∞—á–∏
                job_id = str(uuid.uuid4())
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                filename = secure_filename(file.filename)
                file_path = self.upload_folder / f"{job_id}_{filename}"
                file.save(str(file_path))
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
                with self.jobs_lock:
                    self.processing_jobs[job_id] = {
                        'status': 'uploaded',
                        'filename': filename,
                        'template': template_type,
                        'file_path': str(file_path),
                        'created_at': datetime.now(),
                        'progress': 0,
                        'message': '–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω, –æ–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏'
                    }
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                self.executor.submit(self.process_file_sync, job_id)
                
                session['current_job_id'] = job_id
                flash(f'–§–∞–π–ª "{filename}" —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É', 'success')
                return redirect(url_for('status', job_id=job_id))
                
            except RequestEntityTooLarge:
                max_size = self.app.config['MAX_CONTENT_LENGTH'] // (1024 * 1024)
                flash(f'–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {max_size} –ú–ë', 'error')
                return redirect(url_for('index'))
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
                flash(f'–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}', 'error')
                return redirect(url_for('index'))
        
        @self.app.route('/status/<job_id>')
        def status(job_id: str):
            """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
            job = self.get_job_status(job_id)
            if not job:
                flash('–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 'error')
                return redirect(url_for('index'))
            
            templates = self.get_available_templates()
            
            return render_template_string(
                self.templates.get_status_template(),
                job_id=job_id,
                job=job,
                templates=templates
            )
        
        @self.app.route('/api/status/<job_id>')
        def api_status(job_id: str):
            """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏"""
            job = self.get_job_status(job_id)
            if not job:
                return jsonify({'error': 'Job not found'}), 404
            
            return jsonify({
                'status': job['status'],
                'progress': job['progress'],
                'message': job['message'],
                'filename': job['filename'],
                'template': job['template']
            })
        
        @self.app.route('/download/<job_id>/<file_type>')
        def download_file(job_id: str, file_type: str):
            """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤"""
            job = self.get_job_status(job_id)
            if not job:
                flash('–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 'error')
                return redirect(url_for('index'))
            
            if job['status'] != 'completed':
                flash('–û–±—Ä–∞–±–æ—Ç–∫–∞ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', 'error')
                return redirect(url_for('status', job_id=job_id))
            
            try:
                if file_type == 'transcript':
                    file_path = job.get('transcript_file')
                    download_name = f"{Path(job['filename']).stem}_transcript.txt"
                elif file_type == 'summary':
                    file_path = job.get('summary_file')
                    download_name = f"{Path(job['filename']).stem}_summary.md"
                else:
                    flash('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞', 'error')
                    return redirect(url_for('status', job_id=job_id))
                
                if not file_path or not os.path.exists(file_path):
                    flash('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
                    return redirect(url_for('status', job_id=job_id))
                
                return send_file(file_path, as_attachment=True, download_name=download_name)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
                flash(f'–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}', 'error')
                return redirect(url_for('status', job_id=job_id))
        
        @self.app.route('/view/<job_id>/<file_type>')
        def view_file(job_id: str, file_type: str):
            """–ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–æ–≤ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ"""
            job = self.get_job_status(job_id)
            if not job:
                flash('–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 'error')
                return redirect(url_for('index'))
            
            if job['status'] != 'completed':
                flash('–û–±—Ä–∞–±–æ—Ç–∫–∞ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', 'error')
                return redirect(url_for('status', job_id=job_id))
            
            try:
                if file_type == 'transcript':
                    file_path = job.get('transcript_file')
                    file_title = "–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –≤—Å—Ç—Ä–µ—á–∏"
                    is_markdown = False
                elif file_type == 'summary':
                    file_path = job.get('summary_file')
                    file_title = "–ü—Ä–æ—Ç–æ–∫–æ–ª –≤—Å—Ç—Ä–µ—á–∏"
                    is_markdown = True
                else:
                    flash('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞', 'error')
                    return redirect(url_for('status', job_id=job_id))
                
                if not file_path or not os.path.exists(file_path):
                    flash('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
                    return redirect(url_for('status', job_id=job_id))
                
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                return render_template_string(
                    self.templates.get_view_template(),
                    content=content,
                    file_title=file_title,
                    filename=job['filename'],
                    job_id=job_id,
                    file_type=file_type,
                    is_markdown=is_markdown
                )
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∞–π–ª–∞: {e}")
                flash(f'–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∞–π–ª–∞: {str(e)}', 'error')
                return redirect(url_for('status', job_id=job_id))
        
        @self.app.route('/generate_protocol/<job_id>', methods=['POST'])
        def generate_protocol(job_id: str):
            """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –≤ –Ω–æ–≤–æ–º —à–∞–±–ª–æ–Ω–µ –∏–∑ –≥–æ—Ç–æ–≤–æ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞"""
            job = self.get_job_status(job_id)
            if not job:
                flash('–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 'error')
                return redirect(url_for('index'))
            
            if job['status'] != 'completed':
                flash('–û–±—Ä–∞–±–æ—Ç–∫–∞ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', 'error')
                return redirect(url_for('status', job_id=job_id))
            
            new_template = request.form.get('new_template')
            if not new_template:
                flash('–ù–µ –≤—ã–±—Ä–∞–Ω —à–∞–±–ª–æ–Ω', 'error')
                return redirect(url_for('status', job_id=job_id))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞
            transcript_file = job.get('transcript_file')
            if not transcript_file or not os.path.exists(transcript_file):
                flash('–§–∞–π–ª —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
                return redirect(url_for('status', job_id=job_id))
            
            try:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π ID –¥–ª—è –∑–∞–¥–∞—á–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
                protocol_job_id = f"{job_id}_protocol_{new_template}"
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
                with self.jobs_lock:
                    self.processing_jobs[protocol_job_id] = {
                        'status': 'processing',
                        'filename': f"{job['filename']} (–ø—Ä–æ—Ç–æ–∫–æ–ª {new_template})",
                        'template': new_template,
                        'original_job_id': job_id,
                        'transcript_file': transcript_file,
                        'created_at': datetime.now(),
                        'progress': 0,
                        'message': f'–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –≤ —à–∞–±–ª–æ–Ω–µ "{new_template}"...'
                    }
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                self.executor.submit(self.generate_protocol_sync, protocol_job_id, transcript_file, new_template)
                
                flash(f'–ó–∞–ø—É—â–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –≤ —à–∞–±–ª–æ–Ω–µ "{new_template}"', 'success')
                return redirect(url_for('status', job_id=protocol_job_id))
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞: {e}")
                flash(f'–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞: {str(e)}', 'error')
                return redirect(url_for('status', job_id=job_id))
        
        @self.app.route('/jobs')
        def jobs_list():
            """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á"""
            jobs = []
            with self.jobs_lock:
                for job_id, job_data in self.processing_jobs.items():
                    jobs.append({
                        'id': job_id,
                        'filename': job_data['filename'],
                        'status': job_data['status'],
                        'template': job_data['template'],
                        'created_at': job_data['created_at'].strftime('%Y-%m-%d %H:%M:%S'),
                        'progress': job_data['progress']
                    })
            
            jobs.sort(key=lambda x: x['created_at'], reverse=True)
            return render_template_string(self.templates.get_jobs_template(), jobs=jobs)
        
        @self.app.errorhandler(RequestEntityTooLarge)
        def handle_file_too_large(e):
            max_size = self.app.config['MAX_CONTENT_LENGTH'] // (1024 * 1024)
            flash(f'–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {max_size} –ú–ë', 'error')
            return redirect(url_for('index'))
    
    def process_file_sync(self, job_id: str):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        job = self.get_job_status(job_id)
        if not job:
            return
        
        def progress_callback(progress: int, message: str):
            """Callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
            self.update_job_status(job_id, progress=progress, message=message)
        
        try:
            output_dir = self.output_folder / job_id
            output_dir.mkdir(exist_ok=True)
            
            processor = MeetingProcessor(
                deepgram_api_key=self.deepgram_key,
                claude_api_key=self.claude_key,
                deepgram_timeout=self.processing_settings.get('deepgram_timeout_seconds', 300),
                claude_model=self.processing_settings.get('claude_model', 'claude-sonnet-4-20250514'),
                chunk_duration_minutes=self.processing_settings.get('chunk_duration_minutes', 15),
                template_type=job['template'],
                progress_callback=progress_callback
            )
            
            # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
            success = processor.process_meeting(
                input_file_path=job['file_path'],
                output_dir=str(output_dir),
                name_mapping=None,
                keep_audio_file=False,
                template_type=job['template']
            )
            
            if success:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
                original_filename = Path(job['file_path']).name
                if original_filename.startswith(job_id + '_'):
                    original_filename = original_filename[len(job_id) + 1:]
                
                input_name = Path(original_filename).stem
                transcript_file = output_dir / f"{input_name}_transcript.txt"
                summary_file = output_dir / f"{input_name}_summary.md"
                
                if transcript_file.exists() and summary_file.exists():
                    self.update_job_status(job_id,
                                         status='completed',
                                         progress=100,
                                         message='–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!',
                                         transcript_file=str(transcript_file),
                                         summary_file=str(summary_file),
                                         completed_at=datetime.now())
                    
                    logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ {job_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                else:
                    # –ò—â–µ–º –ª—é–±—ã–µ —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                    all_files = list(output_dir.glob("*"))
                    transcript_files = [f for f in all_files if "_transcript.txt" in f.name]
                    summary_files = [f for f in all_files if "_summary.md" in f.name]
                    
                    logger.info(f"üìÅ –í—Å–µ —Ñ–∞–π–ª—ã –≤ {output_dir}: {[f.name for f in all_files]}")
                    
                    if transcript_files and summary_files:
                        transcript_file = transcript_files[0]
                        summary_file = summary_files[0]
                        
                        self.update_job_status(job_id,
                                             status='completed',
                                             progress=100,
                                             message='–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!',
                                             transcript_file=str(transcript_file),
                                             summary_file=str(summary_file),
                                             completed_at=datetime.now())
                        
                        logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ {job_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                        return
                    
                    raise Exception(f"–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ï—Å—Ç—å: {[f.name for f in all_files]}")
            else:
                raise Exception("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {job_id}: {e}")
            self.update_job_status(job_id,
                                 status='error',
                                 progress=0,
                                 message=f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}',
                                 error=str(e))
        
        finally:
            # –û—á–∏—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
            try:
                if os.path.exists(job['file_path']):
                    os.remove(job['file_path'])
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {e}")
    
    def generate_protocol_sync(self, job_id: str, transcript_file: str, template_type: str):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        job = self.get_job_status(job_id)
        if not job:
            return
        
        def progress_callback(progress: int, message: str):
            """Callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
            self.update_job_status(job_id, progress=progress, message=message)
        
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
            output_dir = self.output_folder / job_id
            output_dir.mkdir(exist_ok=True)
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Ç–æ–ª—å–∫–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
            processor = MeetingProcessor(
                deepgram_api_key="dummy",  # –ù–µ –Ω—É–∂–µ–Ω –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
                claude_api_key=self.claude_key,
                claude_model=self.processing_settings.get('claude_model', 'claude-sonnet-4-20250514'),
                template_type=template_type,
                templates_config_file=self.config.get("paths", {}).get("templates_config", "templates_config.json"),
                team_config_file=self.config.get("paths", {}).get("team_config", "team_config.json"),
                progress_callback=progress_callback
            )
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª –∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞
            success = processor.generate_protocol_from_transcript(
                transcript_file_path=transcript_file,
                output_dir=str(output_dir),
                template_type=template_type
            )
            
            if success:
                # –ò—â–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª
                all_files = list(output_dir.glob("*"))
                summary_files = [f for f in all_files if "_summary.md" in f.name]
                
                if summary_files:
                    summary_file = summary_files[0]
                    
                    self.update_job_status(job_id,
                                         status='completed',
                                         progress=100,
                                         message='–ü—Ä–æ—Ç–æ–∫–æ–ª —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!',
                                         transcript_file=transcript_file,  # –°—Å—ã–ª–∫–∞ –Ω–∞ –∏—Å—Ö–æ–¥–Ω—ã–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
                                         summary_file=str(summary_file),
                                         completed_at=datetime.now())
                    
                    logger.info(f"‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ {job_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                else:
                    raise Exception(f"–§–∞–π–ª –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ï—Å—Ç—å: {[f.name for f in all_files]}")
            else:
                raise Exception("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ {job_id}: {e}")
            self.update_job_status(job_id,
                                 status='error',
                                 progress=0,
                                 message=f'–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞: {str(e)}',
                                 error=str(e))
    
    def run(self, host: str = '127.0.0.1', port: int = 5000, debug: bool = False):
        """–ó–∞–ø—É—Å–∫ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        logger.info(f"üåê –ó–∞–ø—É—Å–∫ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ http://{host}:{port}")
        
        try:
            self.app.run(host=host, port=port, debug=debug, threaded=True)
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—É–ª –ø–æ—Ç–æ–∫–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            self.executor.shutdown(wait=True)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description="–†–∞–±–æ—á–∏–π –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å—Ç—Ä–µ—á")
    parser.add_argument("-c", "--config", default="config.json", help="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    parser.add_argument("--host", default="127.0.0.1", help="IP –∞–¥—Ä–µ—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
    parser.add_argument("--port", type=int, default=5000, help="–ü–æ—Ä—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
    parser.add_argument("--debug", action="store_true", help="–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏")
    
    args = parser.parse_args()
    
    try:
        # –°–æ–∑–¥–∞–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        web_app = WorkingMeetingWebApp(args.config)
        
        print("\n" + "="*60)
        print("üöÄ MEETING PROCESSOR WEB SERVER (–†–ê–ë–û–ß–ê–Ø –í–ï–†–°–ò–Ø)")
        print("="*60)
        print(f"üì± –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:{args.port}")
        print("üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: config.json")
        print("üîë API –∫–ª—é—á–∏: api_keys.json")
        print("üìÅ –ó–∞–≥—Ä—É–∑–∫–∏: web_uploads/")
        print("üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: web_output/")
        print("üßµ –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: ‚úÖ")
        print("üîÑ –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤: ‚úÖ")
        print("\nüí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        print("="*60)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        web_app.run(host=args.host, port=args.port, debug=args.debug)
        
    except KeyboardInterrupt:
        print("\nüëã –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return 1
    
    return 0

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
