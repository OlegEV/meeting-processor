#!/usr/bin/env python3
"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å—Ç—Ä–µ—á
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏, –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤
"""

import os
import sys
import re
from pathlib import Path
from typing import Dict, List, Optional, Tuple, Callable

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    missing_packages = []
    
    try:
        from deepgram import DeepgramClient, PrerecordedOptions
    except ImportError:
        missing_packages.append("deepgram-sdk")
    
    try:
        import anthropic
    except ImportError:
        missing_packages.append("anthropic")
    
    try:
        import requests
    except ImportError:
        missing_packages.append("requests")
    
    try:
        from fuzzywuzzy import fuzz
    except ImportError:
        missing_packages.append("fuzzywuzzy python-Levenshtein")
    
    if missing_packages:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –ø–∞–∫–µ—Ç—ã:")
        for pkg in missing_packages:
            print(f"   {pkg}")
        print("\nüí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞–∫–µ—Ç—ã:")
        print("   pip install deepgram-sdk anthropic requests fuzzywuzzy python-Levenshtein")
        return False
    
    return True

if not check_dependencies():
    sys.exit(1)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
try:
    from audio_processor import AudioProcessor
    from transcription_service import TranscriptionService
    from protocol_generator import ProtocolGenerator
    from file_utils import FileUtils
    from config_loader import ConfigLoader
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π —Å–∏—Å—Ç–µ–º—ã: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –æ–¥–Ω–æ–π –ø–∞–ø–∫–µ")
    sys.exit(1)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏
try:
    from meeting_templates import MeetingTemplates
except ImportError:
    MeetingTemplates = None

try:
    from team_identifier import TeamIdentifier
except ImportError:
    TeamIdentifier = None

try:
    from speaker_mapper import SpeakerMapper
except ImportError:
    SpeakerMapper = None

class MeetingProcessor:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å—Ç—Ä–µ—á"""
    
    def __init__(self, 
                 deepgram_api_key: str, 
                 claude_api_key: str, 
                 deepgram_timeout: int = 300,
                 claude_model: str = "claude-3-sonnet-20240229",
                 deepgram_options: dict = None,
                 chunk_duration_minutes: int = 10,
                 template_type: str = "standard",
                 templates_config_file: str = "templates_config.json",
                 team_config_file: str = "team_config.json",
                 progress_callback: Callable[[int, str], None] = None,
                 deepgram_max_retries: int = 3):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –≤—Å—Ç—Ä–µ—á
        
        Args:
            progress_callback: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (progress, message)
            deepgram_max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ —Ç–∞–π–º–∞—É—Ç–µ Deepgram
        """
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.audio_processor = AudioProcessor()
        self.transcription_service = TranscriptionService(deepgram_api_key, deepgram_timeout, deepgram_options, deepgram_max_retries)
        self.protocol_generator = ProtocolGenerator(claude_api_key, claude_model)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.chunk_duration_minutes = chunk_duration_minutes
        self.template_type = template_type
        self.progress_callback = progress_callback
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–æ–≤ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤
        self._initialize_templates(templates_config_file)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã
        self._initialize_team_identification(team_config_file)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è mapper'–∞ —Å–ø–∏–∫–µ—Ä–æ–≤
        self.speaker_mapper = SpeakerMapper(self.team_identifier) if SpeakerMapper else None
    
    def set_progress_callback(self, callback: Callable[[int, str], None]):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç callback —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        self.progress_callback = callback
    
    def _update_progress(self, progress: int, message: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å —á–µ—Ä–µ–∑ callback"""
        if self.progress_callback:
            self.progress_callback(progress, message)
        else:
            print(f"[{progress}%] {message}")
    
    def _initialize_templates(self, templates_config_file: str):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É —à–∞–±–ª–æ–Ω–æ–≤"""
        if MeetingTemplates:
            try:
                self.templates = MeetingTemplates(templates_config_file)
            except Exception as e:
                self.templates = None
        else:
            self.templates = None
    
    def _initialize_team_identification(self, team_config_file: str):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã"""
        if TeamIdentifier:
            try:
                self.team_identifier = TeamIdentifier(team_config_file)
            except Exception as e:
                self.team_identifier = None
        else:
            self.team_identifier = None
    
    def _print_initialization_info(self, deepgram_timeout: int, claude_model: str, deepgram_options: dict):
        """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö"""
        print(f"\nüîß –ù–ê–°–¢–†–û–ô–ö–ò –ü–†–û–¶–ï–°–°–û–†–ê:")
        print(f"   ‚è∞ –¢–∞–π–º–∞—É—Ç Deepgram: {deepgram_timeout} —Å–µ–∫")
        print(f"   ü§ñ –ú–æ–¥–µ–ª—å Claude: {claude_model}")
        print(f"   üìù –¢–∏–ø —à–∞–±–ª–æ–Ω–∞: {self.template_type}")
        print(f"   ‚úÇÔ∏è –†–∞–∑–º–µ—Ä —á–∞—Å—Ç–µ–π: {self.chunk_duration_minutes} –º–∏–Ω")
        if deepgram_options:
            print(f"   üé§ –û–ø—Ü–∏–∏ Deepgram: {', '.join([k for k, v in deepgram_options.items() if v])}")
    
    def process_meeting(self, 
                       input_file_path: str, 
                       output_dir: str = "output",
                       name_mapping: Optional[Dict[str, str]] = None,
                       keep_audio_file: bool = False,
                       template_type: str = None) -> bool:
        """
        –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å—Ç—Ä–µ—á–∏ —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –∫–æ–º–∞–Ω–¥—ã
        """
        try:
            self._update_progress(5, "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
            
            # –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            Path(output_dir).mkdir(exist_ok=True)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            self._update_progress(10, "–ê–Ω–∞–ª–∏–∑ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞...")
            file_type, file_ext, file_info = self.audio_processor.get_audio_info(input_file_path)
            file_datetime_info = FileUtils.get_file_datetime_info(input_file_path)
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Ç–∏ –¥–ª—è –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            input_name = Path(input_file_path).stem
            transcript_path = f"{output_dir}/{input_name}_transcript.txt"
            summary_path = f"{output_dir}/{input_name}_summary.md"
            team_info_path = f"{output_dir}/{input_name}_team_info.txt"
            
            print(f"\nüéØ –ù–ê–ß–ò–ù–ê–Æ –û–ë–†–ê–ë–û–¢–ö–£ –í–°–¢–†–ï–ß–ò")
            print("=" * 50)
            print(f"üìÑ –§–∞–π–ª: {input_file_path}")
            print(f"üìä –¢–∏–ø: {file_type} ({file_ext})")
            print(f"‚ÑπÔ∏è  {file_info}")
            print(f"üìÖ –î–∞—Ç–∞: {file_datetime_info['datetime_full']} ({file_datetime_info['weekday_ru']})")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —à–∞–±–ª–æ–Ω–∞
            if template_type is None:
                template_type = self.template_type
            print(f"üìù –®–∞–±–ª–æ–Ω: {template_type}")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∞—É–¥–∏–æ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
            self._update_progress(15, "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞...")
            audio_file_for_deepgram, temp_audio_created = self.audio_processor.prepare_audio_file(
                input_file_path, file_type, output_dir, input_name
            )
            
            if not audio_file_for_deepgram:
                self._update_progress(0, "–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞")
                return False
            
            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∞—É–¥–∏–æ
            self._update_progress(25, "–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ...")
            transcript = self.transcription_service.transcribe_audio(audio_file_for_deepgram, self.chunk_duration_minutes)
            if transcript is None:
                self._update_progress(0, "–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–∏—è –∞—É–¥–∏–æ")
                return False
            elif transcript == "":
                self._update_progress(30, "–§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–∏—à–∏–Ω—É –∏–ª–∏ –Ω–µ—Ä–∞–∑–±–æ—Ä—á–∏–≤—É—é —Ä–µ—á—å")
                # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                transcript = "–§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–∏—à–∏–Ω—É –∏–ª–∏ –Ω–µ—Ä–∞–∑–±–æ—Ä—á–∏–≤—É—é —Ä–µ—á—å. –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –ø—É—Å—Ç."
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª –≤—Å—Ç—Ä–µ—á–∏ –°–ù–ê–ß–ê–õ–ê
            self._update_progress(50, "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞...")
            summary = self.protocol_generator.generate_meeting_summary(
                transcript, file_datetime_info, template_type, None, self.templates
            )
            if not summary:
                self._update_progress(0, "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞")
                return False
            
            # –ò–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã –ö–û–ú–ü–õ–ï–ö–°–ù–û
            self._update_progress(65, "–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...")
            team_identification = None
            final_transcript = transcript
            
            if self.team_identifier and self.speaker_mapper:
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
                protocol_identification = self.team_identifier.identify_participants(summary, template_type)
                transcript_identification = self.team_identifier.identify_participants(transcript, template_type)
                
                # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –∑–∞–º–µ–Ω
                combined_replacements = self.speaker_mapper.create_combined_speaker_mapping(
                    transcript, summary, protocol_identification, transcript_identification
                )
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–º–µ–Ω—ã –∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç—É
                if combined_replacements:
                    final_transcript = self.speaker_mapper.apply_speaker_replacements_to_transcript(
                        transcript, combined_replacements
                    )
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ–±—ä–µ–∫—Ç team_identification
                    team_identification = self.speaker_mapper.create_final_team_identification(
                        combined_replacements, protocol_identification, transcript_identification
                    )
                else:
                    team_identification = transcript_identification
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self._update_progress(80, "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞...")
            FileUtils.save_transcript(transcript_path, final_transcript, file_datetime_info, template_type, team_identification)
            
            if team_identification and team_identification.get("identified", False):
                FileUtils.save_team_info(team_info_path, team_identification, file_datetime_info, input_file_path, template_type)
                
                # –†–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–º–∞–Ω–¥–µ
                self._update_progress(90, "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏...")
                summary = self.protocol_generator.generate_meeting_summary(
                    final_transcript, file_datetime_info, template_type, team_identification, self.templates
                )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª
            self._update_progress(95, "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞...")
            with open(summary_path, "w", encoding="utf-8") as f:
                f.write(summary)
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            self._update_progress(98, "–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
            FileUtils.cleanup_temp_files(temp_audio_created, audio_file_for_deepgram, keep_audio_file)
            
            self._update_progress(100, "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            return True
            
        except Exception as e:
            self._update_progress(0, f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Å—Ç—Ä–µ—á–∏: {e}")
            import traceback
            traceback.print_exc()
            return False
    
    def generate_protocol_from_transcript(self, 
                                        transcript_file_path: str, 
                                        output_dir: str = "output",
                                        template_type: str = None) -> bool:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª –∏–∑ –≥–æ—Ç–æ–≤–æ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞
        """
        try:
            self._update_progress(10, "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞
            if not os.path.exists(transcript_file_path):
                self._update_progress(0, f"–§–∞–π–ª —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {transcript_file_path}")
                return False
            
            # –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            Path(output_dir).mkdir(exist_ok=True)
            
            # –ß–∏—Ç–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
            self._update_progress(20, "–ß—Ç–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞...")
            with open(transcript_file_path, "r", encoding="utf-8") as f:
                transcript = f.read()
            
            if not transcript.strip():
                self._update_progress(0, f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –ø—É—Å—Ç–æ–π: {transcript_file_path}")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –¥–∞—Ç—ã
            file_datetime_info = FileUtils.get_file_datetime_info(transcript_file_path)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —à–∞–±–ª–æ–Ω–∞
            if template_type is None:
                template_type = self.template_type
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Ç–∏ –¥–ª—è –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            input_name = Path(transcript_file_path).stem
            # –£–±–∏—Ä–∞–µ–º —Å—É—Ñ—Ñ–∏–∫—Å _transcript –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if input_name.endswith("_transcript"):
                input_name = input_name[:-11]
            
            summary_path = f"{output_dir}/{input_name}_summary.md"
            team_info_path = f"{output_dir}/{input_name}_team_info.txt"
            
            print(f"ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –∏–∑: {transcript_file_path}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª –≤—Å—Ç—Ä–µ—á–∏ –°–ù–ê–ß–ê–õ–ê
            self._update_progress(40, "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞...")
            summary = self.protocol_generator.generate_meeting_summary(
                transcript, file_datetime_info, template_type, None, self.templates
            )
            if not summary:
                self._update_progress(0, "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞")
                return False
            
            # –ò–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã –ö–û–ú–ü–õ–ï–ö–°–ù–û
            self._update_progress(60, "–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...")
            team_identification = None
            final_transcript = transcript
            
            if self.team_identifier and self.speaker_mapper:
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
                protocol_identification = self.team_identifier.identify_participants(summary, template_type)
                transcript_identification = self.team_identifier.identify_participants(transcript, template_type)
                
                # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –∑–∞–º–µ–Ω
                combined_replacements = self.speaker_mapper.create_combined_speaker_mapping(
                    transcript, summary, protocol_identification, transcript_identification
                )
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–º–µ–Ω—ã –∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç—É
                if combined_replacements:
                    final_transcript = self.speaker_mapper.apply_speaker_replacements_to_transcript(
                        transcript, combined_replacements
                    )
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ–±—ä–µ–∫—Ç team_identification
                    team_identification = self.speaker_mapper.create_final_team_identification(
                        combined_replacements, protocol_identification, transcript_identification
                    )
                    
                    # –†–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–º–∞–Ω–¥–µ
                    self._update_progress(80, "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏...")
                    summary = self.protocol_generator.generate_meeting_summary(
                        final_transcript, file_datetime_info, template_type, team_identification, self.templates
                    )
                else:
                    team_identification = transcript_identification
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self._update_progress(90, "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
            if team_identification and team_identification.get("identified", False):
                FileUtils.save_team_info(team_info_path, team_identification, file_datetime_info, transcript_file_path, template_type)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —Å –∑–∞–º–µ–Ω–∞–º–∏ (–µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏)
            if final_transcript != transcript:
                updated_transcript_path = f"{output_dir}/{input_name}_transcript_updated.txt"
                FileUtils.save_transcript(updated_transcript_path, final_transcript, file_datetime_info, template_type, team_identification)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª
            with open(summary_path, "w", encoding="utf-8") as f:
                f.write(summary)
            
            self._update_progress(100, "–ü—Ä–æ—Ç–æ–∫–æ–ª —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")
            
            print(f"‚úÖ –ü—Ä–æ—Ç–æ–∫–æ–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {summary_path}")
            if team_identification and team_identification.get("identified", False):
                stats = team_identification.get("statistics", {})
                print(f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ: {stats.get('total_identified', 0)}")
            
            return True
            
        except Exception as e:
            self._update_progress(0, f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞: {str(e)}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞: {e}")
            return False
    
    def replace_speaker_names(self, transcript: str, name_mapping: Dict[str, str]) -> str:
        """–ó–∞–º–µ–Ω—è–µ—Ç –∏–º–µ–Ω–∞ —Å–ø–∏–∫–µ—Ä–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –º–∞–ø–ø–∏–Ω–≥—É (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥)"""
        if self.speaker_mapper:
            return self.speaker_mapper.replace_speaker_names_legacy(transcript, name_mapping)
        
        # Fallback –µ—Å–ª–∏ –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        if not name_mapping:
            return transcript
        
        modified_transcript = transcript
        for old_name, new_name in name_mapping.items():
            pattern = rf'\b{re.escape(old_name)}\b'
            modified_transcript = re.sub(pattern, new_name, modified_transcript, flags=re.IGNORECASE)
        
        return modified_transcript
    
    def transcribe_only(self, 
                       input_file_path: str, 
                       output_dir: str = "output",
                       keep_audio_file: bool = False) -> bool:
        """
        –¢–æ–ª—å–∫–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ –±–µ–∑ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
        """
        try:
            self._update_progress(10, "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–∏—è...")
            
            # –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            Path(output_dir).mkdir(exist_ok=True)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            self._update_progress(20, "–ê–Ω–∞–ª–∏–∑ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞...")
            file_type, file_ext, file_info = self.audio_processor.get_audio_info(input_file_path)
            file_datetime_info = FileUtils.get_file_datetime_info(input_file_path)
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Ç–∏ –¥–ª—è –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            input_name = Path(input_file_path).stem
            transcript_path = f"{output_dir}/{input_name}_transcript.txt"
            
            print(f"üé§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–∏–µ: {input_file_path}")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∞—É–¥–∏–æ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
            self._update_progress(30, "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞...")
            audio_file_for_deepgram, temp_audio_created = self.audio_processor.prepare_audio_file(
                input_file_path, file_type, output_dir, input_name
            )
            
            if not audio_file_for_deepgram:
                self._update_progress(0, "–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞")
                return False
            
            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∞—É–¥–∏–æ
            self._update_progress(50, "–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ...")
            transcript = self.transcription_service.transcribe_audio(audio_file_for_deepgram, self.chunk_duration_minutes)
            if transcript is None:
                self._update_progress(0, "–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–∏—è –∞—É–¥–∏–æ")
                return False
            elif transcript == "":
                self._update_progress(60, "–§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–∏—à–∏–Ω—É –∏–ª–∏ –Ω–µ—Ä–∞–∑–±–æ—Ä—á–∏–≤—É—é —Ä–µ—á—å")
                # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                transcript = "–§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–∏—à–∏–Ω—É –∏–ª–∏ –Ω–µ—Ä–∞–∑–±–æ—Ä—á–∏–≤—É—é —Ä–µ—á—å. –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –ø—É—Å—Ç."
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
            self._update_progress(90, "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞...")
            FileUtils.save_transcript(transcript_path, transcript, file_datetime_info, "transcription_only", None)
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            self._update_progress(95, "–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
            FileUtils.cleanup_temp_files(temp_audio_created, audio_file_for_deepgram, keep_audio_file)
            
            self._update_progress(100, "–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            print(f"‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {transcript_path}")
            return True
            
        except Exception as e:
            self._update_progress(0, f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return False
    
    def _print_completion_summary(self, output_dir: str, template_type: str, team_identification: Dict):
        """–í—ã–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ"""
        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {output_dir}")
        if team_identification and team_identification.get("identified", False):
            stats = team_identification.get("statistics", {})
            print(f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ: {stats.get('total_identified', 0)}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    import argparse
    
    parser = argparse.ArgumentParser(
        description="–°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å—Ç—Ä–µ—á —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π, –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –∫–æ–º–∞–Ω–¥—ã –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

–ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞:
  python meeting_processor_fixed.py meeting.mp4
  python meeting_processor_fixed.py meeting.mp3 --template standup

–¢–æ–ª—å–∫–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–∏–µ:
  python meeting_processor_fixed.py meeting.mp4 --transcribe-only
  python meeting_processor_fixed.py meeting.mp3 --transcribe-only --output transcripts

–¢–æ–ª—å–∫–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞:
  python meeting_processor_fixed.py --protocol-only meeting_transcript.txt
  python meeting_processor_fixed.py --protocol-only meeting_transcript.txt --template standup --output protocols

–ù–∞—Å—Ç—Ä–æ–π–∫–∏:
  python meeting_processor_fixed.py meeting.mp4 --timeout 600 --chunks 10 --template standup
        """
    )
    
    parser.add_argument(
        "input_file",
        nargs="?",
        help="–ü—É—Ç—å –∫ –≤—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É (–≤–∏–¥–µ–æ –∏–ª–∏ –∞—É–¥–∏–æ)"
    )
    
    parser.add_argument(
        "-o", "--output",
        help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
    )
    
    parser.add_argument(
        "-c", "--config",
        default="config.json",
        help="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
    )
    
    parser.add_argument(
        "-t", "--timeout",
        type=int,
        help="–¢–∞–π–º–∞—É—Ç –¥–ª—è Deepgram –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"
    )
    
    parser.add_argument(
        "--chunks",
        type=int,
        help="–†–∞–∑–º–µ—Ä —á–∞—Å—Ç–µ–π –≤ –º–∏–Ω—É—Ç–∞—Ö"
    )
    
    parser.add_argument(
        "--template",
        help="–¢–∏–ø —à–∞–±–ª–æ–Ω–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞"
    )
    
    parser.add_argument(
        "--transcribe-only",
        action="store_true",
        help="–¢–æ–ª—å–∫–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ –±–µ–∑ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞"
    )
    
    parser.add_argument(
        "--protocol-only",
        help="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª –∏–∑ –≥–æ—Ç–æ–≤–æ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ (—É–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É)"
    )
    
    args = parser.parse_args()
    
    # –¢–æ–ª—å–∫–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–∏–µ
    if args.transcribe_only:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = ConfigLoader.load_config(args.config)
        if not config:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ {args.config}")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings = ConfigLoader.get_settings_from_config(config, args)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
        if not os.path.exists(settings['input_file']):
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {settings['input_file']}")
            return
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á Deepgram
        api_keys_data = ConfigLoader.load_api_keys(settings['api_keys_file'])
        deepgram_valid, _, deepgram_key, _ = ConfigLoader.validate_api_keys(api_keys_data)
        
        if not deepgram_valid:
            print(f"‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω API –∫–ª—é—á –¥–ª—è Deepgram")
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–∏—è
        processor = MeetingProcessor(
            deepgram_api_key=deepgram_key,
            claude_api_key="dummy",  # –ù–µ –Ω—É–∂–µ–Ω –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–∏—è
            deepgram_timeout=settings['deepgram_timeout'],
            chunk_duration_minutes=settings['chunk_minutes']
        )
        
        success = processor.transcribe_only(
            input_file_path=settings['input_file'],
            output_dir=settings['output_dir'],
            keep_audio_file=settings['keep_audio']
        )
        
        return 0 if success else 1
    
    # –¢–æ–ª—å–∫–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
    if args.protocol_only:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = ConfigLoader.load_config(args.config)
        if not config:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ {args.config}")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings = ConfigLoader.get_settings_from_config(config, args)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á Claude
        api_keys_data = ConfigLoader.load_api_keys(settings['api_keys_file'])
        _, claude_valid, _, claude_key = ConfigLoader.validate_api_keys(api_keys_data)
        
        if not claude_valid:
            print(f"‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω API –∫–ª—é—á –¥–ª—è Claude")
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Ç–æ–ª—å–∫–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
        processor = MeetingProcessor(
            deepgram_api_key="dummy",  # –ù–µ –Ω—É–∂–µ–Ω –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
            claude_api_key=claude_key,
            claude_model=settings['claude_model'],
            template_type=settings['template_type'],
            templates_config_file=settings['templates_config'],
            team_config_file=settings['team_config']
        )
        
        success = processor.generate_protocol_from_transcript(
            transcript_file_path=args.protocol_only,
            output_dir=settings['output_dir'],
            template_type=settings['template_type']
        )
        
        return 0 if success else 1
    
    # –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = ConfigLoader.load_config(args.config)
    if not config:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ {args.config}")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    settings = ConfigLoader.get_settings_from_config(config, args)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
    if not os.path.exists(settings['input_file']):
        print(f"\n‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {settings['input_file']}")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á–∏
    api_keys_data = ConfigLoader.load_api_keys(settings['api_keys_file'])
    deepgram_valid, claude_valid, deepgram_key, claude_key = ConfigLoader.validate_api_keys(api_keys_data)
    
    if not deepgram_valid:
        print(f"\n‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω API –∫–ª—é—á –¥–ª—è Deepgram")
        return
    
    if not claude_valid:
        print(f"\n‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω API –∫–ª—é—á –¥–ª—è Claude")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
    try:
        processor = MeetingProcessor(
            deepgram_api_key=deepgram_key,
            claude_api_key=claude_key,
            deepgram_timeout=settings['deepgram_timeout'],
            claude_model=settings['claude_model'],
            deepgram_options=settings['deepgram_options'],
            chunk_duration_minutes=settings['chunk_minutes'],
            template_type=settings['template_type'],
            templates_config_file=settings['templates_config'],
            team_config_file=settings['team_config']
        )
        
        success = processor.process_meeting(
            input_file_path=settings['input_file'],
            output_dir=settings['output_dir'],
            keep_audio_file=settings['keep_audio'],
            template_type=settings['template_type']
        )
        
        if success:
            print(f"\nüéâ –í–°–Ø –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        else:
            print(f"\n‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
            return 1
            
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
