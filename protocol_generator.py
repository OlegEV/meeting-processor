#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ –≤—Å—Ç—Ä–µ—á —á–µ—Ä–µ–∑ Claude API
"""

from typing import Dict, Optional

try:
    import anthropic
except ImportError:
    print("‚ùå –ú–æ–¥—É–ª—å anthropic –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: pip install anthropic")
    anthropic = None

class ProtocolGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ –≤—Å—Ç—Ä–µ—á —á–µ—Ä–µ–∑ Claude API"""
    
    def __init__(self, api_key: str, model: str = "claude-3-sonnet-20240229"):
        if not anthropic:
            raise ImportError("anthropic –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        self.client = anthropic.Anthropic(api_key=api_key)
        self.model = model
    
    def generate_meeting_summary(self, 
                               transcript: str, 
                               file_datetime_info: Dict = None, 
                               template_type: str = "standard",
                               team_identification: Dict = None,
                               templates_system = None) -> Optional[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª –≤—Å—Ç—Ä–µ—á–∏ —á–µ—Ä–µ–∑ Claude API"""
        try:
            print(f"ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø—Ä–æ—Ç–æ–∫–æ–ª –≤—Å—Ç—Ä–µ—á–∏ —á–µ—Ä–µ–∑ Claude ({self.model})...")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–º–ø—Ç
            if templates_system:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º—É —à–∞–±–ª–æ–Ω–æ–≤
                prompt = templates_system.get_template(template_type, transcript, file_datetime_info)
                prompt = prompt.format(transcript=transcript)
                print(f"üìù –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —à–∞–±–ª–æ–Ω: {template_type}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
                if team_identification and team_identification.get("identified", False):
                    team_context = self._generate_team_context(team_identification, template_type)
                    prompt = f"{prompt}\n\n{team_context}"
                    print("üë• –î–æ–±–∞–≤–ª–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã –≤ –ø—Ä–æ–º–ø—Ç")
                
            else:
                # –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω
                prompt = self._generate_builtin_prompt(transcript, file_datetime_info, team_identification)
                print("üìù –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à–∞–±–ª–æ–Ω")
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤
            max_tokens = 2000
            if templates_system and hasattr(templates_system, 'config'):
                max_tokens = templates_system.config.get("template_settings", {}).get("max_tokens", 2000)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Claude
            response = self.client.messages.create(
                model=self.model,
                max_tokens=max_tokens,
                messages=[{"role": "user", "content": prompt}]
            )
            
            summary = response.content[0].text
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            summary = self._add_technical_info(
                summary, file_datetime_info, template_type, 
                team_identification, templates_system
            )
            
            print("‚úÖ –ü—Ä–æ—Ç–æ–∫–æ–ª –≤—Å—Ç—Ä–µ—á–∏ —Å–æ–∑–¥–∞–Ω")
            return summary
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞: {e}")
            return None
    
    def _generate_builtin_prompt(self, transcript: str, file_datetime_info: Dict = None, 
                               team_identification: Dict = None) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è Claude"""
        datetime_info = ""
        if file_datetime_info:
            datetime_info = f"""
–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏: {file_datetime_info['date']} ({file_datetime_info['weekday_ru']}) –≤ {file_datetime_info['time']}
"""
        
        team_info = ""
        if team_identification and team_identification.get("identified", False):
            team_info = f"\n\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∞–Ω–¥–µ:\n{team_identification.get('participant_summary', '')}"
        
        return f"""
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –≤—Å—Ç—Ä–µ—á–∏ –∏ —Å–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª.
{datetime_info}{team_info}
–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç:
{transcript}

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π –ø—Ä–æ—Ç–æ–∫–æ–ª –≤—Å—Ç—Ä–µ—á–∏, –≤–∫–ª—é—á–∞—é—â–∏–π:

1. **–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏**{f" - {file_datetime_info['datetime_full']}" if file_datetime_info else " - —É–∫–∞–∑–∞—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –∫–∞–∫ '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'"}
2. **–£—á–∞—Å—Ç–Ω–∏–∫–∏ –≤—Å—Ç—Ä–µ—á–∏** - –æ–ø—Ä–µ–¥–µ–ª–∏ –∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞{' (—É—á—Ç–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ)' if team_identification else ''}
3. **–ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –≤—Å—Ç—Ä–µ—á–∏**
4. **–û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã**
5. **–ü—Ä–∏–Ω—è—Ç—ã–µ —Ä–µ—à–µ–Ω–∏—è**
6. **–ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ**
7. **–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏**
8. **–î–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–π –≤—Å—Ç—Ä–µ—á–∏ (–µ—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞–ª–∞—Å—å)**

–û—Ñ–æ—Ä–º–∏ –æ—Ç–≤–µ—Ç –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ —Å —á–µ—Ç–∫–∏–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏.
–ï—Å–ª–∏ –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω—ã –≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ.
"""
    
    def _generate_team_context(self, team_identification: Dict, template_type: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø—Ä–æ–º–ø—Ç"""
        context_parts = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö
        participant_summary = team_identification.get("participant_summary", "")
        if participant_summary:
            context_parts.append("–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ö–û–ú–ê–ù–î–ï:")
            context_parts.append(participant_summary)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = team_identification.get("statistics", {})
        if stats.get("teams_present"):
            teams_ru = {
                "management": "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ",
                "development": "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞", 
                "testing": "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
                "analytics": "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞"
            }
            teams_list = [teams_ru.get(team, team.title()) for team in stats["teams_present"]]
            context_parts.append(f"–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: {', '.join(teams_list)}")
        
        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤—Å—Ç—Ä–µ—á
        if template_type == "standup":
            context_parts.append("–ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ —Å—Ç–µ–Ω–¥–∞–ø–∞ –≥—Ä—É–ø–ø–∏—Ä—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∏ –∏—Ö –∫–æ–º–∞–Ω–¥–∞–º.")
        elif template_type == "project": 
            context_parts.append("–£—á–∏—Ç—ã–≤–∞–π —Ä–æ–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏.")
        elif template_type == "review":
            context_parts.append("–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –∏ —Ä–æ–ª—è–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
        
        return "\n".join(context_parts)
    
    def _add_technical_info(self, summary: str, file_datetime_info: Dict = None, 
                          template_type: str = None, team_identification: Dict = None,
                          templates_system = None) -> str:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫ –ø—Ä–æ—Ç–æ–∫–æ–ª—É"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–ª—è—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        include_tech_info = True
        if templates_system and hasattr(templates_system, 'config'):
            include_tech_info = templates_system.config.get("template_settings", {}).get("include_technical_info", True)
        
        if not include_tech_info:
            return summary
        
        technical_info = f"""

---
**–¢–ï–•–ù–ò–ß–ï–°–ö–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø**
- –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {file_datetime_info['datetime_full'] if file_datetime_info else '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
- –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {file_datetime_info['weekday_ru'] if file_datetime_info else '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
- –¢–∏–ø —à–∞–±–ª–æ–Ω–∞: {template_type or 'standard'}
- –ú–æ–¥–µ–ª—å Claude: {self.model}
- –ü—Ä–æ—Ç–æ–∫–æ–ª —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–∏"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã
        if team_identification and team_identification.get("identified", False):
            stats = team_identification.get("statistics", {})
            avg_confidence = self._calculate_average_confidence(team_identification)
            technical_info += f"""
- –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã: ‚úÖ –≤–∫–ª—é—á–µ–Ω–∞
- –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ: {stats.get('total_identified', 0)}
- –ö–æ–º–∞–Ω–¥—ã –Ω–∞ –≤—Å—Ç—Ä–µ—á–µ: {', '.join(stats.get('teams_present', []))}
- –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: {avg_confidence:.0%}"""
        else:
            technical_info += f"""
- –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã: –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–º–µ–Ω—è–ª–∞—Å—å"""
        
        return summary + technical_info
    
    def _calculate_average_confidence(self, team_identification: Dict) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ä–µ–¥–Ω—é—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        confidence_scores = team_identification.get("confidence_scores", {})
        if not confidence_scores:
            return 0.0
        
        return sum(confidence_scores.values()) / len(confidence_scores)