#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ Deepgram API
"""

import os
import time
from pathlib import Path
from typing import List, Optional
from concurrent.futures import ThreadPoolExecutor, TimeoutError as FutureTimeoutError

try:
    from deepgram import DeepgramClient, PrerecordedOptions
except ImportError:
    print("‚ùå –ú–æ–¥—É–ª—å deepgram-sdk –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: pip install deepgram-sdk")
    DeepgramClient = None
    PrerecordedOptions = None

try:
    import httpx
except ImportError:
    print("‚ö†Ô∏è –ú–æ–¥—É–ª—å httpx –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç–∞–π–º–∞—É—Ç—ã")
    httpx = None

class TranscriptionService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ Deepgram"""
    
    def __init__(self, api_key: str, timeout: int = 300, options: dict = None, max_retries: int = 3):
        if not DeepgramClient:
            raise ImportError("deepgram-sdk –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        self.client = DeepgramClient(api_key)
        self.timeout = timeout
        self.max_retries = max_retries
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Deepgram –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        default_options = {
            "punctuate": True,
            "diarize": True,
            "smart_format": True,
            "paragraphs": True,
            "utterances": False,
            "summarize": False,
            "detect_language": False
        }
        
        self.options = {**default_options, **(options or {})}
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∞–µ–º –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–ø–∏–∫–µ—Ä–æ–≤
        self.options["diarize"] = True
    
    def transcribe_audio_with_timeout(self, audio_data: bytes, timeout_override: Optional[int] = None) -> Optional[str]:
        """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ —Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º –∏ retry –ø—Ä–∏ —Ç–∞–π–º–∞—É—Ç–∞—Ö"""
        timeout = timeout_override or self.timeout
        
        def transcribe_request():
            """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏"""
            # –°–æ–∑–¥–∞–µ–º –æ–ø—Ü–∏–∏
            options = PrerecordedOptions(
                model="nova-2",
                language="ru",
                punctuate=self.options.get("punctuate", True),
                diarize=self.options.get("diarize", True),
                smart_format=self.options.get("smart_format", True),
                paragraphs=self.options.get("paragraphs", True),
                utterances=self.options.get("utterances", False),
                summarize=self.options.get("summarize", False),
                detect_language=self.options.get("detect_language", False)
            )
            
            payload = {"buffer": audio_data}
            response = self.client.listen.rest.v("1").transcribe_file(payload, options)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
            channels = response.results.channels
            
            if channels and len(channels) > 0:
                alternatives = channels[0].alternatives
                
                if alternatives and len(alternatives) > 0:
                    transcript_data = alternatives[0]
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                    has_transcript = hasattr(transcript_data, 'transcript') and transcript_data.transcript
                    has_words = hasattr(transcript_data, 'words') and transcript_data.words
                    has_paragraphs = hasattr(transcript_data, 'paragraphs') and transcript_data.paragraphs
                    
                    if has_words:
                        words_with_speakers = [w for w in transcript_data.words if hasattr(w, 'speaker')]
                        
                        if words_with_speakers:
                            unique_speakers = set(getattr(w, 'speaker') for w in words_with_speakers)
                    
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
                    if has_words and self.options.get("diarize", True):
                        return self._format_transcript_with_speakers(transcript_data)
                    elif has_paragraphs and self.options.get("paragraphs", True):
                        return self._format_transcript_with_paragraphs(transcript_data)
                    else:
                        return transcript_data.transcript
            
            return "–û—à–∏–±–∫–∞: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞"
        
        # Retry –ª–æ–≥–∏–∫–∞ –ø—Ä–∏ —Ç–∞–π–º–∞—É—Ç–∞—Ö
        for attempt in range(1, self.max_retries + 1):
            try:
                if attempt == 1:
                    print(f"üé§ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Deepgram:")
                    print(f"   model: nova-2, language: ru")
                    for option, value in self.options.items():
                        print(f"   {option}: {value}")
                else:
                    print(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ {attempt}/{self.max_retries}")
                
                with ThreadPoolExecutor(max_workers=1) as executor:
                    future = executor.submit(transcribe_request)
                    
                    try:
                        result = future.result(timeout=timeout)
                        if attempt > 1:
                            print(f"‚úÖ –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω —Å –ø–æ–ø—ã—Ç–∫–∏ {attempt}")
                        else:
                            print(f"üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ Deepgram:")
                            channels = result.count("–°–ø–∏–∫–µ—Ä") if "–°–ø–∏–∫–µ—Ä" in result else 0
                            print(f"   –ù–∞–π–¥–µ–Ω–æ —Å–ø–∏–∫–µ—Ä–æ–≤: {channels}")
                        return result
                    except FutureTimeoutError:
                        print(f"‚è∞ –¢–∞–π–º–∞—É—Ç {timeout} —Å–µ–∫—É–Ω–¥ –ø—Ä–µ–≤—ã—à–µ–Ω (–ø–æ–ø—ã—Ç–∫–∞ {attempt}/{self.max_retries})")
                        future.cancel()
                        
                        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –∂–¥–µ–º –ø–µ—Ä–µ–¥ retry
                        if attempt < self.max_retries:
                            wait_time = min(10 * attempt, 30)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, –º–∞–∫—Å–∏–º—É–º 30 —Å–µ–∫
                            print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...")
                            time.sleep(wait_time)
                        continue
                        
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ (–ø–æ–ø—ã—Ç–∫–∞ {attempt}/{self.max_retries}): {e}")
                
                # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –∂–¥–µ–º –ø–µ—Ä–µ–¥ retry
                if attempt < self.max_retries:
                    wait_time = min(5 * attempt, 15)  # –ö–æ—Ä–æ—Ç–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–∫–∞—Ö
                    print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...")
                    time.sleep(wait_time)
                continue
        
        print(f"‚ùå –í—Å–µ {self.max_retries} –ø–æ–ø—ã—Ç–æ–∫ –∏—Å—á–µ—Ä–ø–∞–Ω—ã")
        return None
    
    def _format_transcript_with_paragraphs(self, transcript_data) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —Å –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞–º–∏"""
        try:
            if hasattr(transcript_data, 'paragraphs') and transcript_data.paragraphs:
                paragraphs = transcript_data.paragraphs.paragraphs
                formatted_paragraphs = []
                
                for i, paragraph in enumerate(paragraphs):
                    if hasattr(paragraph, 'sentences'):
                        sentences = [sentence.text for sentence in paragraph.sentences]
                        paragraph_text = ' '.join(sentences)
                        formatted_paragraphs.append(f"–ü–∞—Ä–∞–≥—Ä–∞—Ñ {i+1}:\n{paragraph_text}")
                    elif hasattr(paragraph, 'text'):
                        formatted_paragraphs.append(f"–ü–∞—Ä–∞–≥—Ä–∞—Ñ {i+1}:\n{paragraph.text}")
                
                if formatted_paragraphs:
                    print(f"üìù –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(formatted_paragraphs)} –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤")
                    return '\n\n'.join(formatted_paragraphs)
            
            return transcript_data.transcript
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤: {e}")
            return transcript_data.transcript

    def _format_transcript_with_speakers(self, transcript_data) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–ø–∏–∫–µ—Ä–∞—Ö"""
        try:
            if not hasattr(transcript_data, 'words') or not transcript_data.words:
                return transcript_data.transcript
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–ª–æ–≤–∞ –ø–æ —Å–ø–∏–∫–µ—Ä–∞–º –∏ –≤—Ä–µ–º–µ–Ω–∏
            current_speaker = None
            current_segment = []
            segments = []
            
            for word in transcript_data.words:
                if hasattr(word, 'speaker'):
                    speaker = getattr(word, 'speaker')
                    word_text = getattr(word, 'word', '')
                    
                    if speaker != current_speaker:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–µ–≥–º–µ–Ω—Ç
                        if current_segment and current_speaker is not None:
                            segments.append((current_speaker, ' '.join(current_segment)))
                        
                        # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Å–µ–≥–º–µ–Ω—Ç
                        current_speaker = speaker
                        current_segment = [word_text]
                    else:
                        current_segment.append(word_text)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–µ–≥–º–µ–Ω—Ç
            if current_segment and current_speaker is not None:
                segments.append((current_speaker, ' '.join(current_segment)))
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if segments:
                formatted_segments = []
                for speaker, text in segments:
                    formatted_segments.append(f"–°–ø–∏–∫–µ—Ä {speaker}: {text}")
                
                result = '\n\n'.join(formatted_segments)
                print(f"üìù –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(segments)} —Å–µ–≥–º–µ–Ω—Ç–æ–≤ —Å {len(set(s[0] for s in segments))} —Å–ø–∏–∫–µ—Ä–∞–º–∏")
                return result
            else:
                return transcript_data.transcript
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Å–ø–∏–∫–µ—Ä–∞–º–∏: {e}")
            return transcript_data.transcript

    def transcribe_audio_chunks(self, chunk_paths: List[str], chunk_duration_minutes: int = 10) -> Optional[str]:
        """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
        try:
            print(f"üé§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É—é {len(chunk_paths)} —á–∞—Å—Ç–µ–π...")
            
            full_transcript = []
            
            for i, chunk_path in enumerate(chunk_paths, 1):
                print(f"üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —á–∞—Å—Ç—å {i}/{len(chunk_paths)}: {Path(chunk_path).name}")
                
                try:
                    with open(chunk_path, "rb") as file:
                        buffer_data = file.read()
                    
                    transcript = self.transcribe_audio_with_timeout(
                        buffer_data, 
                        timeout_override=min(self.timeout, 180)
                    )
                    
                    if transcript and transcript.strip():
                        start_time = (i-1) * chunk_duration_minutes
                        end_time = i * chunk_duration_minutes
                        time_marker = f"\n\n=== –ß–ê–°–¢–¨ {i} ({start_time}:{end_time:02d} –º–∏–Ω—É—Ç) ===\n"
                        full_transcript.append(time_marker + transcript)
                        print(f"‚úÖ –ß–∞—Å—Ç—å {i} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ ({len(transcript)} —Å–∏–º–≤–æ–ª–æ–≤)")
                    else:
                        print(f"‚ö†Ô∏è –ß–∞—Å—Ç—å {i} –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞")
                        
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —á–∞—Å—Ç–∏ {i}: {e}")
                    continue
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —á–∞—Å—Ç–∏
                try:
                    os.remove(chunk_path)
                except:
                    pass
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                if i < len(chunk_paths):
                    print("‚è≥ –ü–∞—É–∑–∞ 5 —Å–µ–∫—É–Ω–¥...")
                    time.sleep(5)
            
            if full_transcript:
                combined_transcript = "\n".join(full_transcript)
                print(f"‚úÖ –í—Å–µ —á–∞—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã. –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {len(combined_transcript)} —Å–∏–º–≤–æ–ª–æ–≤")
                return combined_transcript
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –Ω–∏ –æ–¥–Ω–æ–π —á–∞—Å—Ç–∏")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —á–∞—Å—Ç–µ–π: {e}")
            return None

    def transcribe_audio(self, audio_path: str, chunk_duration_minutes: int = 10) -> Optional[str]:
        """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ —Ñ–∞–π–ª"""
        try:
            file_size_mb = os.path.getsize(audio_path) / (1024 * 1024)
            print(f"üìä –†–∞–∑–º–µ—Ä –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞: {file_size_mb:.1f} MB")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞
            import subprocess
            import json
            
            cmd = ['ffprobe', '-v', 'quiet', '-print_format', 'json', '-show_format', audio_path]
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            if result.returncode == 0:
                info = json.loads(result.stdout)
                duration_minutes = float(info['format']['duration']) / 60
                print(f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_minutes:.1f} –º–∏–Ω—É—Ç")
                
                # –†–∞–∑–±–∏–≤–∞–µ–º —Ñ–∞–π–ª –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –∏–ª–∏ –¥–ª–∏–Ω–Ω—ã–π
                if duration_minutes > 15 or file_size_mb > 25:
                    print("üî™ –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π/–±–æ–ª—å—à–æ–π, —Ä–∞–∑–±–∏–≤–∞—é –Ω–∞ —á–∞—Å—Ç–∏...")
                    from audio_processor import AudioProcessor
                    audio_proc = AudioProcessor()
                    chunk_paths = audio_proc.split_audio_file(audio_path, chunk_duration_minutes)
                    
                    if chunk_paths:
                        return self.transcribe_audio_chunks(chunk_paths, chunk_duration_minutes)
                    else:
                        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–∏—Ç—å —Ñ–∞–π–ª")
                        return None
            
            print("üé§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—é –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ Deepgram...")
            
            with open(audio_path, "rb") as file:
                buffer_data = file.read()
            
            transcript = self.transcribe_audio_with_timeout(buffer_data)
            
            if transcript:
                print("‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                return transcript
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}")
            return None
