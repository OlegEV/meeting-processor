#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ –∏ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤
"""

import os
import subprocess
import json
from pathlib import Path
from typing import List, Optional, Tuple

class AudioProcessor:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ –∏ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤"""
    
    def __init__(self):
        self.native_audio_formats = {'.mp3', '.wav', '.flac', '.aac', '.m4a', '.ogg'}
        self.convert_audio_formats = {'.wma', '.opus'}
        self.video_formats = {'.mp4', '.avi', '.mov', '.mkv', '.wmv', '.webm'}
    
    def check_ffmpeg(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å ffmpeg"""
        try:
            result = subprocess.run(['ffmpeg', '-version'], 
                                  capture_output=True, text=True)
            return result.returncode == 0
        except FileNotFoundError:
            return False
    
    def get_audio_info(self, file_path: str) -> Tuple[str, str, str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ —Ñ–∞–π–ª–µ
        
        Returns:
            (file_type, file_extension, duration_info)
        """
        file_path = Path(file_path)
        extension = file_path.suffix.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
        if not extension:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            filename = file_path.name.lower()
            print(f"‚ö†Ô∏è –§–∞–π–ª –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è: {file_path}")
            print(f"   –ü–æ–ª–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞: '{filename}'")
            
            # –ò—â–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –≤ –∫–æ–Ω—Ü–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            all_extensions = self.native_audio_formats | self.convert_audio_formats | self.video_formats
            for ext in all_extensions:
                ext_without_dot = ext.lstrip('.')
                if filename.endswith(ext_without_dot):
                    extension = ext
                    print(f"   –ù–∞–π–¥–µ–Ω–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞: '{extension}'")
                    break
            
            if not extension:
                return "unsupported", "", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: {file_path.name}"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        if extension in self.native_audio_formats:
            file_type = "native_audio"
        elif extension in self.convert_audio_formats:
            file_type = "convert_audio"
        elif extension in self.video_formats:
            file_type = "video"
        else:
            print(f"‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ: '{extension}' –¥–ª—è —Ñ–∞–π–ª–∞: {file_path}")
            return "unsupported", extension, "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç"
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        try:
            cmd = ['ffprobe', '-v', 'quiet', '-print_format', 'json', '-show_format', str(file_path)]
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            if result.returncode == 0:
                info = json.loads(result.stdout)
                duration = float(info['format']['duration'])
                duration_str = f"{int(duration//60)}:{int(duration%60):02d}"
                
                if file_type == "native_audio":
                    return "native_audio", extension, f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_str} (–Ω–∞—Ç–∏–≤–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞)"
                elif file_type == "convert_audio":
                    return "convert_audio", extension, f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_str} (—Ç—Ä–µ–±—É–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏)"
                else:
                    return "video", extension, f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_str}"
            else:
                return file_type, extension, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ: {e}")
            return file_type, extension, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
    
    def process_audio_file(self, audio_path: str, output_audio_path: str) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª (–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ)"""
        try:
            print(f"üéµ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞—É–¥–∏–æ—Ñ–∞–π–ª {audio_path}...")
            
            if not self.check_ffmpeg():
                print("‚ùå ffmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ!")
                return False
            
            cmd = [
                'ffmpeg', '-i', audio_path,           
                '-acodec', 'pcm_s16le',     
                '-ar', '44100',             
                '-ac', '2',                 
                '-y', output_audio_path           
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            if result.returncode == 0:
                print(f"‚úÖ –ê—É–¥–∏–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ {output_audio_path}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {result.stderr}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ: {e}")
            return False

    def extract_audio_from_video(self, video_path: str, audio_path: str) -> bool:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫—É –∏–∑ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞"""
        try:
            print(f"üé¨ –ò–∑–≤–ª–µ–∫–∞—é –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞ {video_path}...")
            
            if not self.check_ffmpeg():
                print("‚ùå ffmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return False
            
            cmd = [
                'ffmpeg', '-i', video_path,        
                '-vn',                   
                '-acodec', 'pcm_s16le',  
                '-ar', '44100',          
                '-ac', '2',              
                '-y', audio_path               
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            if result.returncode == 0:
                print(f"‚úÖ –ê—É–¥–∏–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {audio_path}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ ffmpeg: {result.stderr}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∞—É–¥–∏–æ: {e}")
            return False

    def split_audio_file(self, audio_path: str, chunk_duration_minutes: int = 10) -> List[str]:
        """–†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª –Ω–∞ —á–∞—Å—Ç–∏"""
        try:
            print(f"‚úÇÔ∏è –†–∞–∑–±–∏–≤–∞—é –∞—É–¥–∏–æ—Ñ–∞–π–ª –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ {chunk_duration_minutes} –º–∏–Ω—É—Ç...")
            
            audio_path_obj = Path(audio_path)
            audio_dir = audio_path_obj.parent
            audio_name = audio_path_obj.stem
            original_extension = audio_path_obj.suffix.lower()
            chunk_duration_seconds = chunk_duration_minutes * 60
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ —Ä–∞–∑–±–∏–≤–∫–µ
            keep_original_format = original_extension in self.native_audio_formats
            
            if keep_original_format:
                print(f"üéØ –°–æ—Ö—Ä–∞–Ω—è—é –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç {original_extension}")
                output_extension = original_extension
                audio_codec_params = ['-c:a', 'copy']
            else:
                print(f"üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≤ WAV –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏")
                output_extension = '.wav'
                audio_codec_params = ['-acodec', 'pcm_s16le', '-ar', '44100', '-ac', '2']
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            cmd = ['ffprobe', '-v', 'quiet', '-print_format', 'json', '-show_format', audio_path]
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            if result.returncode != 0:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
                return []
            
            info = json.loads(result.stdout)
            total_duration = float(info['format']['duration'])
            
            num_chunks = int(total_duration // chunk_duration_seconds) + 1
            print(f"üìä –°–æ–∑–¥–∞—é {num_chunks} —á–∞—Å—Ç–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ {output_extension}...")
            
            chunk_paths = []
            
            for i in range(num_chunks):
                start_time = i * chunk_duration_seconds
                chunk_path = audio_dir / f"{audio_name}_part_{i+1:02d}{output_extension}"
                
                cmd = [
                    'ffmpeg', '-i', audio_path,
                    '-ss', str(start_time),
                    '-t', str(chunk_duration_seconds),
                    *audio_codec_params,
                    '-y', str(chunk_path)
                ]
                
                result = subprocess.run(cmd, capture_output=True, text=True)
                
                if result.returncode == 0:
                    if chunk_path.stat().st_size > 1000:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π
                        chunk_paths.append(str(chunk_path))
                        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —á–∞—Å—Ç—å {i+1}: {chunk_path.name}")
                    else:
                        chunk_path.unlink()  # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Å—Ç–∏ {i+1}")
            
            return chunk_paths
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∏–≤–∫–µ –∞—É–¥–∏–æ: {e}")
            return []
    
    def prepare_audio_file(self, input_file_path: str, file_type: str, output_dir: str, input_name: str) -> Tuple[Optional[str], bool]:
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏"""
        temp_audio_created = False
        
        if file_type == "native_audio":
            print("üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞—Ç–∏–≤–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ Deepgram - –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è!")
            return input_file_path, temp_audio_created
            
        elif file_type == "convert_audio":
            audio_file_for_deepgram = f"{output_dir}/{input_name}.wav"
            if not self.process_audio_file(input_file_path, audio_file_for_deepgram):
                return None, False
            return audio_file_for_deepgram, True
            
        elif file_type == "video":
            audio_file_for_deepgram = f"{output_dir}/{input_name}.wav"
            if not self.extract_audio_from_video(input_file_path, audio_file_for_deepgram):
                return None, False
            return audio_file_for_deepgram, True
        
        else:
            print(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: {file_type}")
            return None, False
