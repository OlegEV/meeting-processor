#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
"""

import json
import jwt
import time
from datetime import datetime, timedelta
import requests

def create_test_jwt(user_id: str, email: str = None, name: str = None) -> str:
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π JWT —Ç–æ–∫–µ–Ω"""
    
    # Payload —Ç–æ–∫–µ–Ω–∞
    now = datetime.utcnow()
    payload = {
        'sub': user_id,  # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        'iat': int(now.timestamp()),  # –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
        'exp': int((now + timedelta(hours=1)).timestamp()),  # –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è (—á–µ—Ä–µ–∑ —á–∞—Å)
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
    if email:
        payload['email'] = email
    if name:
        payload['name'] = name
    
    # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏ (–∞–ª–≥–æ—Ä–∏—Ç–º none)
    # –≠—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, —Ç–∞–∫ –∫–∞–∫ –º—ã –¥–æ–≤–µ—Ä—è–µ–º reverse proxy
    token = jwt.encode(payload, key='', algorithm='none')
    
    return token

def test_auth_endpoints(base_url: str = "http://localhost:5000"):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç endpoints —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π"""
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    test_users = [
        {
            'user_id': 'test_user_1',
            'email': 'user1@example.com',
            'name': 'Test User 1'
        },
        {
            'user_id': 'test_user_2', 
            'email': 'user2@example.com',
            'name': 'Test User 2'
        }
    ]
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    print("=" * 50)
    
    for user in test_users:
        print(f"\nüë§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user['name']} ({user['user_id']})")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        token = create_test_jwt(user['user_id'], user['email'], user['name'])
        print(f"üîë –°–æ–∑–¥–∞–Ω JWT —Ç–æ–∫–µ–Ω: {token[:50]}...")
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å —Ç–æ–∫–µ–Ω–æ–º
        headers = {
            'X-Identity-Token': token,
            'Content-Type': 'application/json'
        }
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º health check
        print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ /health")
        try:
            response = requests.get(f"{base_url}/health")
            print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
            if response.status_code == 200:
                data = response.json()
                print(f"   –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {data.get('database', {})}")
                print(f"   –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: {data.get('auth', {})}")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        print("\nüè† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ /")
        try:
            response = requests.get(f"{base_url}/", headers=headers)
            print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
            if response.status_code == 200:
                print("   ‚úÖ –î–æ—Å—Ç—É–ø –∫ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ–ª—É—á–µ–Ω")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞: {response.text[:100]}")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        print("\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ /jobs")
        try:
            response = requests.get(f"{base_url}/jobs", headers=headers)
            print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
            if response.status_code == 200:
                print("   ‚úÖ –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø–æ–ª—É—á–µ–Ω")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.text[:100]}")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º API —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–∏
        print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ /api/status/nonexistent")
        try:
            response = requests.get(f"{base_url}/api/status/nonexistent", headers=headers)
            print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
            if response.status_code == 404:
                print("   ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 404 –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–∏")
            else:
                print(f"   ‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {response.status_code}")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –±–µ–∑ —Ç–æ–∫–µ–Ω–∞
    print(f"\nüö´ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞")
    try:
        response = requests.get(f"{base_url}/")
        print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
        if response.status_code == 401:
            print("   ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –±–ª–æ–∫–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø –±–µ–∑ —Ç–æ–∫–µ–Ω–∞")
        else:
            print(f"   ‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {response.status_code}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
    print(f"\nüîí –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º")
    try:
        headers = {'X-Identity-Token': 'invalid.token.here'}
        response = requests.get(f"{base_url}/", headers=headers)
        print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
        if response.status_code == 401:
            print("   ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –±–ª–æ–∫–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º")
        else:
            print(f"   ‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {response.status_code}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")

def print_test_tokens():
    """–í—ã–≤–æ–¥–∏—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("\nüîë –¢–µ—Å—Ç–æ–≤—ã–µ JWT —Ç–æ–∫–µ–Ω—ã –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print("=" * 60)
    
    test_users = [
        {'user_id': 'alice', 'email': 'alice@company.com', 'name': 'Alice Johnson'},
        {'user_id': 'bob', 'email': 'bob@company.com', 'name': 'Bob Smith'},
        {'user_id': 'charlie', 'email': 'charlie@company.com', 'name': 'Charlie Brown'}
    ]
    
    for user in test_users:
        token = create_test_jwt(user['user_id'], user['email'], user['name'])
        print(f"\nüë§ {user['name']} ({user['user_id']}):")
        print(f"   Email: {user['email']}")
        print(f"   Token: {token}")
        print(f"   –ó–∞–≥–æ–ª–æ–≤–æ–∫: X-Identity-Token: {token}")

if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    parser.add_argument("--url", default="http://localhost:5000", help="URL –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    parser.add_argument("--tokens-only", action="store_true", help="–¢–æ–ª—å–∫–æ –≤—ã–≤–µ—Å—Ç–∏ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã")
    
    args = parser.parse_args()
    
    if args.tokens_only:
        print_test_tokens()
    else:
        test_auth_endpoints(args.url)
        print_test_tokens()