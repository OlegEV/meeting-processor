#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ JWT —Ç–æ–∫–µ–Ω–æ–≤
"""

import jwt
import json
from datetime import datetime, timedelta
import time

def create_debug_token():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π JWT —Ç–æ–∫–µ–Ω"""
    now = datetime.utcnow()
    payload = {
        'sub': 'debug_user',
        'email': 'debug@example.com',
        'name': 'Debug User',
        'iat': int(now.timestamp()),
        'exp': int((now + timedelta(hours=1)).timestamp()),
    }
    
    print("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞:")
    print(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {now}")
    print(f"–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è (iat): {payload['iat']} ({datetime.fromtimestamp(payload['iat'])})")
    print(f"–í—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è (exp): {payload['exp']} ({datetime.fromtimestamp(payload['exp'])})")
    print(f"Payload: {json.dumps(payload, indent=2)}")
    
    token = jwt.encode(payload, key='', algorithm='none')
    print(f"–°–æ–∑–¥–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω: {token}")
    
    return token

def decode_debug_token(token):
    """–î–µ–∫–æ–¥–∏—Ä—É–µ—Ç JWT —Ç–æ–∫–µ–Ω –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    print("\n–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞:")
    
    try:
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏
        decoded_unverified = jwt.decode(token, options={"verify_signature": False})
        print(f"–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π payload (–±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏): {json.dumps(decoded_unverified, indent=2)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
        exp = decoded_unverified.get('exp')
        if exp:
            exp_time = datetime.fromtimestamp(exp)
            current_time = datetime.utcnow()
            print(f"–í—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è: {exp_time}")
            print(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time}")
            print(f"–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫: {current_time > exp_time}")
        
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
        try:
            decoded_verified = jwt.decode(
                token, 
                key='', 
                algorithms=['none'],
                options={
                    "verify_signature": False,
                    "verify_exp": True,
                    "verify_aud": False,
                    "verify_iss": False,
                    "verify_nbf": True,
                    "verify_iat": True,
                }
            )
            print("‚úÖ –¢–æ–∫–µ–Ω –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è")
            return decoded_verified
        except jwt.ExpiredSignatureError:
            print("‚ùå –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫")
            return None
        except jwt.InvalidTokenError as e:
            print(f"‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω: {e}")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return None

def test_jwt_validation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é JWT"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ JWT –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
    print("=" * 40)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω
    token = create_debug_token()
    
    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
    decoded = decode_debug_token(token)
    
    if decoded:
        print("‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω")
    else:
        print("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ç–æ–∫–µ–Ω–æ–º")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –∏—Å—Ç–µ–∫—à–∏–º —Ç–æ–∫–µ–Ω–æ–º
    print("\n" + "=" * 40)
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–µ–∫—à–µ–≥–æ —Ç–æ–∫–µ–Ω–∞:")
    
    past_time = datetime.utcnow() - timedelta(hours=1)
    expired_payload = {
        'sub': 'expired_user',
        'iat': int(past_time.timestamp()),
        'exp': int((past_time + timedelta(minutes=30)).timestamp()),
    }
    
    expired_token = jwt.encode(expired_payload, key='', algorithm='none')
    print(f"–ò—Å—Ç–µ–∫—à–∏–π —Ç–æ–∫–µ–Ω: {expired_token}")
    
    decoded_expired = decode_debug_token(expired_token)
    if not decoded_expired:
        print("‚úÖ –ò—Å—Ç–µ–∫—à–∏–π —Ç–æ–∫–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω")
    else:
        print("‚ùå –ò—Å—Ç–µ–∫—à–∏–π —Ç–æ–∫–µ–Ω –ø—Ä–∏–Ω—è—Ç (–æ—à–∏–±–∫–∞)")

if __name__ == "__main__":
    test_jwt_validation()