#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π JWT
"""

import sys
from pathlib import Path
sys.path.insert(0, str(Path(__file__).parent))

from auth.jwt_utils import create_jwt_utils
from auth.token_validator import create_token_validator
import jwt
from datetime import datetime, timedelta

def test_jwt_fix():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è JWT"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π JWT")
    print("=" * 40)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω
    now = datetime.utcnow()
    payload = {
        'sub': 'test_user',
        'email': 'test@example.com',
        'name': 'Test User',
        'iat': int(now.timestamp()),
        'exp': int((now + timedelta(hours=1)).timestamp()),
    }
    
    token = jwt.encode(payload, key='', algorithm='none')
    print(f"–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω: {token[:50]}...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º JWT utils
    config = {
        'auth': {
            'jwt_algorithm': 'RS256',
            'token_validation': {
                'verify_signature': False,
                'verify_exp': True,
                'verify_aud': False
            }
        }
    }
    
    jwt_utils = create_jwt_utils(config)
    
    print("\n1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ decode_token:")
    decoded = jwt_utils.decode_token(token, verify_exp=False)
    if decoded:
        print(f"‚úÖ –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ä–æ–∫–∞: {decoded['sub']}")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ä–æ–∫–∞")
    
    print("\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ is_token_expired:")
    is_expired = jwt_utils.is_token_expired(token)
    print(f"–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫: {is_expired}")
    if not is_expired:
        print("‚úÖ –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω")
    else:
        print("‚ùå –¢–æ–∫–µ–Ω —Å—á–∏—Ç–∞–µ—Ç—Å—è –∏—Å—Ç–µ–∫—à–∏–º")
    
    print("\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ extract_user_info:")
    user_info = jwt_utils.extract_user_info(token)
    if user_info:
        print(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {user_info['user_id']}")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
    
    print("\n4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ token_validator:")
    token_validator = create_token_validator(config)
    is_valid, user_data, error = token_validator.validate_token(token)
    
    if is_valid:
        print(f"‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω: {user_data['user_id']}")
    else:
        print(f"‚ùå –¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω: {error}")
    
    return is_valid

if __name__ == "__main__":
    success = test_jwt_fix()
    if success:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:")
        print("python quick_test.py")
    else:
        print("\n‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å JWT")