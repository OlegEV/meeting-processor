#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã
–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø - —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ –ø–æ–¥—Å—á–µ—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
"""

import sys
import os
from pathlib import Path

try:
    from team_identifier import TeamIdentifier
except ImportError:
    print("‚ùå –ú–æ–¥—É–ª—å team_identifier.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    sys.exit(1)

def demo_standup_meeting():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞ —Å—Ç–µ–Ω–¥–∞–ø–µ"""
    print("üéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø: –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å—Ç–µ–Ω–¥–∞–ø")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–æ–≤—ã–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —Å—Ç–µ–Ω–¥–∞–ø–∞
    standup_transcript = """
–°–ø–∏–∫–µ—Ä 0: –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, –∫–æ–º–∞–Ω–¥–∞! –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞—à –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å—Ç–µ–Ω–¥–∞–ø. –í–ª–∞–¥, –∫–∞–∫ –¥–µ–ª–∞ —Å –Ω–æ–≤–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π?

–°–ø–∏–∫–µ—Ä 1: –ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! –í—á–µ—Ä–∞ –∑–∞–∫–æ–Ω—á–∏–ª –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é OAuth, —Å–µ–≥–æ–¥–Ω—è –ø–ª–∞–Ω–∏—Ä—É—é –∑–∞–Ω—è—Ç—å—Å—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º API endpoints. –ë–ª–æ–∫–µ—Ä–æ–≤ –Ω–µ—Ç, –≤—Å–µ –∏–¥–µ—Ç –ø–æ –ø–ª–∞–Ω—É.

–°–ø–∏–∫–µ—Ä 2: –û—Ç–ª–∏—á–Ω–æ, –í–ª–∞–¥–∏—Å–ª–∞–≤. –Æ–ª—è, –∫–∞–∫ –æ–±—Å—Ç–æ—è—Ç –¥–µ–ª–∞ —Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ä–µ–ª–∏–∑–∞?

–°–ø–∏–∫–µ—Ä 3: –í—á–µ—Ä–∞ –ø—Ä–æ–≥–Ω–∞–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã –Ω–∞ –Ω–æ–≤–æ–º –±–∏–ª–¥–µ, –Ω–∞—à–ª–∞ –¥–≤–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –±–∞–≥–∞ –≤ –º–æ–¥—É–ª–µ –ø–ª–∞—Ç–µ–∂–µ–π. –°–∞—à–∞ —Å–µ–≥–æ–¥–Ω—è –ø–æ–º–æ–∂–µ—Ç —Å —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º.

–°–ø–∏–∫–µ—Ä 4: –î–∞, –ø–æ–º–æ–≥—É –Æ–ª–µ —Å —Ç–µ—Å—Ç–∞–º–∏. –£ –º–µ–Ω—è –≤—á–µ—Ä–∞ –±—ã–ª–∞ —Ä–∞–±–æ—Ç–∞ —Å performance —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º, –≤—Å–µ –ø—Ä–æ—à–ª–æ –≥–ª–∞–¥–∫–æ.

–°–ø–∏–∫–µ—Ä 5: –û—Ç–ª–∏—á–Ω–æ! –ì–µ—Ä–º–∞–Ω, —á—Ç–æ —É –Ω–∞—Å —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –∫ –Ω–æ–≤–æ–π —Ñ–∏—á–µ?

–°–ø–∏–∫–µ—Ä 6: –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–∞, –æ—Å—Ç–∞–ª–æ—Å—å —Å–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å mockup —Å –¥–∏–∑–∞–π–Ω–µ—Ä–æ–º. –ï–ª–µ–Ω–∞ –ø–æ–º–æ–∂–µ—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏.

–°–ø–∏–∫–µ—Ä 7: –î–∞, –ì–µ—Ä–º–∞–Ω, —è —É–∂–µ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—É –Ω–∞–¥ user story –¥–ª—è –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏.
"""
    
    identifier = TeamIdentifier()
    
    if not identifier.identification_enabled:
        print("‚ùå –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        return
    
    print("üìù –ò—Å—Ö–æ–¥–Ω—ã–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç:")
    print(standup_transcript[:300] + "...\n")
    
    # –ò–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    result = identifier.identify_participants(standup_transcript, "standup")
    
    if result["identified"]:
        print("‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–î–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò")
        print(f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ: {result['statistics']['total_identified']}")
        print(f"–ö–æ–º–∞–Ω–¥—ã: {', '.join(result['statistics']['teams_present'])}")
        
        print("\nüë• –£–ß–ê–°–¢–ù–ò–ö–ò –í–°–¢–†–ï–ß–ò:")
        print(result["participant_summary"])
        
        print("\nüîÑ –ó–ê–ú–ï–ù–´ –°–ü–ò–ö–ï–†–û–í:")
        for old, new in result["replacements"].items():
            confidence = result["confidence_scores"].get(old, 0)
            print(f"   {old} ‚Üí {new} (—Ç–æ—á–Ω–æ—Å—Ç—å: {confidence:.0%})")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
        modified_transcript = identifier.apply_speaker_replacements(standup_transcript, "standup")
        print("\nüìù –ú–û–î–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–´–ô –¢–†–ê–ù–°–ö–†–ò–ü–¢:")
        print(modified_transcript[:400] + "...")
        
    else:
        print("‚ùå –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
        print(f"–ü—Ä–∏—á–∏–Ω–∞: {result.get('reason', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")

def demo_project_meeting():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞ –ø—Ä–æ–µ–∫—Ç–Ω–æ–π –≤—Å—Ç—Ä–µ—á–µ"""
    print("\nüéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø: –ü—Ä–æ–µ–∫—Ç–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞")
    print("=" * 50)
    
    project_transcript = """
–°–ø–∏–∫–µ—Ä 0: –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –≤—Å—Ç—Ä–µ—á—É –ø–æ –ø—Ä–æ–µ–∫—Ç—É. –û–±—Å—É–¥–∏–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∏ –ø–ª–∞–Ω—ã. –í–ª–∞–¥–∏—Å–ª–∞–≤, —Ä–∞—Å—Å–∫–∞–∂–∏ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.

–°–ø–∏–∫–µ—Ä 1: –°–ø–∞—Å–∏–±–æ, –û–ª–µ–≥. –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∞ 80% –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á. –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã, –æ—Å—Ç–∞–ª–∞—Å—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è.

–°–ø–∏–∫–µ—Ä 2: –û—Ç–ª–∏—á–Ω–æ! –Æ–ª–∏—è, –∫–∞–∫ –∏–¥–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π?

–°–ø–∏–∫–µ—Ä 3: –ú—ã –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–ª–∏ –±–æ–ª—å—à—É—é —á–∞—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞. –ù–∞—à–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–∞–≥–æ–≤ —Å—Ä–µ–¥–Ω–µ–π –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏, –Ω–æ –≤ —Ü–µ–ª–æ–º –∫–∞—á–µ—Å—Ç–≤–æ —Ö–æ—Ä–æ—à–µ–µ.

–°–ø–∏–∫–µ—Ä 4: –ì–µ—Ä–º–∞–Ω, –≥–æ—Ç–æ–≤—ã –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è?

–°–ø–∏–∫–µ—Ä 5: –î–∞, –≤—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω—ã —Å –∑–∞–∫–∞–∑—á–∏–∫–æ–º. –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞, –º–æ–∂–Ω–æ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É.
"""
    
    identifier = TeamIdentifier()
    result = identifier.identify_participants(project_transcript, "project")
    
    if result["identified"]:
        print("‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–î–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò")
        print(f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ: {result['statistics']['total_identified']}")
        
        print("\nüë• –£–ß–ê–°–¢–ù–ò–ö–ò –í–°–¢–†–ï–ß–ò:")
        print(result["participant_summary"])
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —à–∞–±–ª–æ–Ω–∞
        team_context = identifier.get_team_context_for_template("project", result["speakers"])
        print("\nüìã –ö–û–ù–¢–ï–ö–°–¢ –ö–û–ú–ê–ù–î–´ –î–õ–Ø –®–ê–ë–õ–û–ù–ê:")
        print(team_context)
        
    else:
        print("‚ùå –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")

def demo_configuration():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
    print("\nüéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    print("=" * 50)
    
    identifier = TeamIdentifier()
    
    print("üìã –¢–ï–ö–£–©–ò–ï –ù–ê–°–¢–†–û–ô–ö–ò:")
    print(f"–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞: {'‚úÖ' if identifier.identification_enabled else '‚ùå'}")
    
    config = identifier.config
    team_config = config.get("team_identification", {})
    
    print(f"–ü—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫ —à–∞–±–ª–æ–Ω–∞–º: {', '.join(team_config.get('apply_to_templates', ['–≤—Å–µ']))}")
    print(f"–ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {team_config.get('confidence_threshold', 0.7)}")
    print(f"–ù–µ—á–µ—Ç–∫–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ: {'‚úÖ' if team_config.get('fuzzy_matching', True) else '‚ùå'}")
    
    print(f"\nüë• –£–ß–ê–°–¢–ù–ò–ö–ò –ö–û–ú–ê–ù–î–´:")
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ get_team_statistics() –∏–∑ TeamIdentifier
    team_stats = identifier.get_team_statistics()
    
    for team_name, member_count in team_stats["teams"].items():
        team_display = {
            "management": "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ",
            "development": "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞",
            "testing": "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", 
            "analytics": "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞"
        }.get(team_name, team_name.title())
        
        print(f"   {team_display}: {member_count} —á–µ–ª.")
    
    print(f"   –í—Å–µ–≥–æ –≤ –±–∞–∑–µ: {team_stats['total_members']} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
    
    print(f"\nüîç –°–¢–†–ê–¢–ï–ì–ò–ò –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–Ø:")
    strategies = config.get("identification_rules", {}).get("matching_strategies", [])
    if strategies:
        for strategy in strategies:
            print(f"   {strategy['strategy']}: –≤–µ—Å {strategy['weight']}")
    else:
        print("   –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")

def demo_accuracy_test():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    print("\nüéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø: –¢–µ—Å—Ç —Ç–æ—á–Ω–æ—Å—Ç–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏ —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    test_cases = [
        {
            "name": "–ü—Ä—è–º–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–º–µ–Ω–∏",
            "text": "–°–ø–∏–∫–µ—Ä 0: –í–ª–∞–¥–∏—Å–ª–∞–≤, –∫–∞–∫ –¥–µ–ª–∞ —Å –∑–∞–¥–∞—á–µ–π?",
            "expected": "–£–ª—å—è–Ω–æ–≤ –í–ª–∞–¥–∏—Å–ª–∞–≤"
        },
        {
            "name": "–£–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏",
            "text": "–°–ø–∏–∫–µ—Ä 1: –í–ª–∞–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ –Ω–æ–≤–æ–π —Ñ–∏—á–µ–π",
            "expected": "–£–ª—å—è–Ω–æ–≤ –í–ª–∞–¥–∏—Å–ª–∞–≤"
        },
        {
            "name": "–ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏",
            "text": "–°–ø–∏–∫–µ—Ä 2: –í—á–µ—Ä–∞ –∑–∞–∫–æ–º–º–∏—Ç–∏–ª –Ω–æ–≤—ã–π –∫–æ–¥, —Å–µ–≥–æ–¥–Ω—è –±—É–¥—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å API",
            "expected": "—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞"
        },
        {
            "name": "–ö–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
            "text": "–°–ø–∏–∫–µ—Ä 3: –ù–∞—à–ª–∞ –±–∞–≥ –≤ –∞–≤—Ç–æ—Ç–µ—Å—Ç–∞—Ö, –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–≥—Ä–µ—Å—Å–∏—é",
            "expected": "—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
        },
        {
            "name": "–£–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ä–æ–ª–∏",
            "text": "–°–ø–∏–∫–µ—Ä 4: –ö–∞–∫ —Ç–∏–º–ª–∏–¥, —è –¥—É–º–∞—é –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã",
            "expected": "Team Lead"
        }
    ]
    
    identifier = TeamIdentifier()
    
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    correct_predictions = 0
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\n{i}. {test_case['name']}")
        print(f"   –¢–µ–∫—Å—Ç: '{test_case['text'][:50]}...'")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å
        result = identifier.identify_participants(test_case['text'], "standup")
        
        if result["identified"] and result["speakers"]:
            speaker_info = list(result["speakers"].values())[0]
            predicted = speaker_info.get("full_name", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            team_name = speaker_info.get("team_name", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            confidence = list(result["confidence_scores"].values())[0]
            
            print(f"   –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {predicted} (–∫–æ–º–∞–Ω–¥–∞: {team_name}, —Ç–æ—á–Ω–æ—Å—Ç—å: {confidence:.0%})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å
            expected_lower = test_case['expected'].lower()
            if (expected_lower in predicted.lower() or 
                expected_lower in speaker_info.get('role', '').lower() or
                expected_lower in team_name.lower()):
                print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ")
                correct_predictions += 1
            else:
                print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ (–æ–∂–∏–¥–∞–ª–æ—Å—å: {test_case['expected']})")
        else:
            print(f"   –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ")
            print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: ‚ùå –ù–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ")
    
    accuracy = correct_predictions / len(test_cases) * 100
    print(f"\nüìà –û–ë–©–ê–Ø –¢–û–ß–ù–û–°–¢–¨: {accuracy:.0f}% ({correct_predictions}/{len(test_cases)})")

def demo_template_application():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫ —Ä–∞–∑–Ω—ã–º —à–∞–±–ª–æ–Ω–∞–º"""
    print("\nüéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫ —à–∞–±–ª–æ–Ω–∞–º")
    print("=" * 50)
    
    identifier = TeamIdentifier()
    
    templates_to_test = ["standup", "project", "business", "review", "standard"]
    
    print("üìã –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –ò–î–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò –ü–û –®–ê–ë–õ–û–ù–ê–ú:")
    
    for template in templates_to_test:
        should_apply = identifier.should_apply_identification(template)
        status = "‚úÖ –ü—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è" if should_apply else "‚ùå –ù–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è"
        print(f"   {template:12} - {status}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    apply_to_templates = identifier.config.get("team_identification", {}).get("apply_to_templates", [])
    if apply_to_templates:
        print(f"\n‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ 'apply_to_templates': {', '.join(apply_to_templates)}")
    else:
        print(f"\n‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ 'apply_to_templates': –ø—É—Å—Ç–∞ (–ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫–æ –≤—Å–µ–º)")

def demo_team_statistics():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã"""
    print("\nüéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø: –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã")
    print("=" * 50)
    
    identifier = TeamIdentifier()
    
    if not identifier.team_members:
        print("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        return
    
    team_stats = identifier.get_team_statistics()
    
    print(f"üìä –ü–û–õ–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {team_stats['total_members']}")
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥: {len(team_stats['teams'])}")
    
    print(f"\nüë• –†–ê–ó–ë–ò–í–ö–ê –ü–û –ö–û–ú–ê–ù–î–ê–ú:")
    for team_name, member_ids in team_stats["team_breakdown"].items():
        team_display = {
            "management": "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ",
            "development": "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞",
            "testing": "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", 
            "analytics": "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞"
        }.get(team_name, team_name.title())
        
        print(f"\n**{team_display} ({len(member_ids)} —á–µ–ª.):**")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã
        for member_id in member_ids[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 5
            member_info = identifier.team_members.get(member_id, {})
            full_name = member_info.get("full_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            role = member_info.get("role", "–†–æ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞")
            print(f"   ‚Ä¢ {full_name} - {role}")
        
        if len(member_ids) > 5:
            print(f"   ‚Ä¢ ... –∏ –µ—â–µ {len(member_ids) - 5} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üë• –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ò–î–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò –£–ß–ê–°–¢–ù–ò–ö–û–í –ö–û–ú–ê–ù–î–´")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if not os.path.exists("team_config.json"):
        print("‚ùå –§–∞–π–ª team_config.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üí° –°–æ–∑–¥–∞–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ:")
        print("   python test_runner.py  # —Å–æ–∑–¥–∞—Å—Ç –æ–±—Ä–∞–∑–µ—Ü –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        return
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        demo_standup_meeting()
        demo_project_meeting()
        demo_configuration()
        demo_team_statistics()
        demo_accuracy_test()
        demo_template_application()
        
        print("\n" + "=" * 60)
        print("üéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê")
        print("=" * 60)
        
        print("\nüí° –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        print("1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ team_config.json –ø–æ–¥ –≤–∞—à—É –∫–æ–º–∞–Ω–¥—É")
        print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≤–∞–ª–∏–¥–∞—Ü–∏—é: python config_validator.py")
        print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã: python test_runner.py")
        print("4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤ production: python meeting_processor.py --template standup --team-id")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        
        print(f"\nüîß –í–û–ó–ú–û–ñ–ù–´–ï –†–ï–®–ï–ù–ò–Ø:")
        print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å team_config.json")
        print("2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω fuzzywuzzy: pip install fuzzywuzzy")
        print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≤–∞–ª–∏–¥–∞—Ü–∏—é: python config_validator.py")

if __name__ == "__main__":
    main()
