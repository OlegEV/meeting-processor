#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–∞–π–º–∞—É—Ç–∞ Deepgram
"""

import os
import time
from pathlib import Path
from meeting_processor import MeetingProcessor, load_config

def test_timeout_settings():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–π–º–∞—É—Ç–∞"""
    
    print("üß™ –¢–ï–°–¢ –ù–ê–°–¢–†–û–ï–ö –¢–ê–ô–ú–ê–£–¢–ê DEEPGRAM")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = load_config("config.json")
    
    DEEPGRAM_API_KEY = config.get("api_keys", {}).get("deepgram")
    CLAUDE_API_KEY = config.get("api_keys", {}).get("claude")
    
    if not DEEPGRAM_API_KEY or DEEPGRAM_API_KEY == "your_deepgram_api_key_here":
        print("‚ùå –£–∫–∞–∂–∏—Ç–µ API –∫–ª—é—á Deepgram –≤ config.json")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∞–π–º–∞—É—Ç—ã
    timeout_settings = [
        (60, "1 –º–∏–Ω—É—Ç–∞ - –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö —Ç–µ—Å—Ç–æ–≤"),
        (180, "3 –º–∏–Ω—É—Ç—ã - –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ñ–∞–π–ª–æ–≤"), 
        (300, "5 –º–∏–Ω—É—Ç - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞"),
        (600, "10 –º–∏–Ω—É—Ç - –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"),
        (900, "15 –º–∏–Ω—É—Ç - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ç–∞–π–º–∞—É—Ç")
    ]
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    test_file = input("üìÅ –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ç–µ—Å—Ç–æ–≤–æ–º—É –∞—É–¥–∏–æ—Ñ–∞–π–ª—É (–∏–ª–∏ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ").strip().strip('"')
    
    if not test_file or not os.path.exists(test_file):
        print("‚ö†Ô∏è –§–∞–π–ª –Ω–µ —É–∫–∞–∑–∞–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∫–∞–∑—ã–≤–∞—é —Ç–æ–ª—å–∫–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        show_timeout_recommendations()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
    file_size_mb = os.path.getsize(test_file) / (1024 * 1024)
    print(f"\nüìä –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {test_file}")
    print(f"üìè –†–∞–∑–º–µ—Ä: {file_size_mb:.1f} MB")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ç–∞–π–º–∞—É—Ç
    if file_size_mb < 5:
        recommended_timeout = 180
    elif file_size_mb < 15:
        recommended_timeout = 300
    elif file_size_mb < 30:
        recommended_timeout = 600
    else:
        recommended_timeout = 900
    
    print(f"üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ç–∞–π–º–∞—É—Ç: {recommended_timeout} —Å–µ–∫—É–Ω–¥")
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, –∫–∞–∫–æ–π —Ç–∞–π–º–∞—É—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å
    print(f"\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:")
    for i, (timeout, desc) in enumerate(timeout_settings, 1):
        marker = "üëà —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è" if timeout == recommended_timeout else ""
        print(f"{i}. {timeout} —Å–µ–∫ - {desc} {marker}")
    
    choice = input(f"\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π–º–∞—É—Ç (1-{len(timeout_settings)}) –∏–ª–∏ Enter –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–≥–æ: ").strip()
    
    if choice.isdigit() and 1 <= int(choice) <= len(timeout_settings):
        selected_timeout, desc = timeout_settings[int(choice) - 1]
    else:
        selected_timeout, desc = recommended_timeout, "—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π"
    
    print(f"\nüöÄ –¢–µ—Å—Ç–∏—Ä—É—é —Å —Ç–∞–π–º–∞—É—Ç–æ–º {selected_timeout} —Å–µ–∫—É–Ω–¥ ({desc})")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
    processor = MeetingProcessor(DEEPGRAM_API_KEY, CLAUDE_API_KEY, selected_timeout)
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
    output_dir = "timeout_test"
    Path(output_dir).mkdir(exist_ok=True)
    
    test_name = Path(test_file).stem
    audio_path = f"{output_dir}/{test_name}_test.wav"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
    is_audio_file, file_ext, file_info = processor.get_audio_info(test_file)
    print(f"üìÑ –¢–∏–ø —Ñ–∞–π–ª–∞: {'–ê—É–¥–∏–æ' if is_audio_file else '–í–∏–¥–µ–æ'} ({file_ext})")
    
    start_time = time.time()
    
    if is_audio_file:
        success = processor.process_audio_file(test_file, audio_path)
    else:
        success = processor.extract_audio_from_video(test_file, audio_path)
    
    if not success:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
    print(f"\n‚è±Ô∏è –ù–∞—á–∏–Ω–∞—é —Ç–µ—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —Å —Ç–∞–π–º–∞—É—Ç–æ–º {selected_timeout} —Å–µ–∫...")
    
    try:
        with open(audio_path, "rb") as file:
            audio_data = file.read()
        
        transcript = processor.transcribe_audio_with_timeout(audio_data, selected_timeout)
        
        end_time = time.time()
        duration = end_time - start_time
        
        if transcript:
            print(f"‚úÖ –£—Å–ø–µ—Ö! –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.1f} —Å–µ–∫—É–Ω–¥")
            print(f"üìù –î–ª–∏–Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞: {len(transcript)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"üìÑ –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤: {transcript[:200]}...")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result_path = f"{output_dir}/test_result_{selected_timeout}s.txt"
            with open(result_path, "w", encoding="utf-8") as f:
                f.write(f"–¢–∞–π–º–∞—É—Ç: {selected_timeout} —Å–µ–∫—É–Ω–¥\n")
                f.write(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.1f} —Å–µ–∫—É–Ω–¥\n")
                f.write(f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size_mb:.1f} MB\n\n")
                f.write(transcript)
            
            print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {result_path}")
        else:
            print(f"‚ùå –ù–µ—É–¥–∞—á–∞! –í—Ä–µ–º—è –¥–æ –æ—Ç–∫–∞–∑–∞: {duration:.1f} —Å–µ–∫—É–Ω–¥")
            
    except Exception as e:
        end_time = time.time()
        duration = end_time - start_time
        print(f"üí• –û—à–∏–±–∫–∞ –ø–æ—Å–ª–µ {duration:.1f} —Å–µ–∫—É–Ω–¥: {e}")
    
    # –û—á–∏—Å—Ç–∫–∞
    try:
        os.remove(audio_path)
    except:
        pass
    
    print(f"\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞:")
    print(f"   –¢–∞–π–º–∞—É—Ç: {selected_timeout} —Å–µ–∫—É–Ω–¥")
    print(f"   –§–∞–π–ª: {file_size_mb:.1f} MB")
    print(f"   –í—Ä–µ–º—è: {duration:.1f} —Å–µ–∫—É–Ω–¥")
    print(f"   –°—Ç–∞—Ç—É—Å: {'‚úÖ –£—Å–ø–µ—Ö' if transcript else '‚ùå –ù–µ—É–¥–∞—á–∞'}")

def show_timeout_recommendations():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ç–∞–π–º–∞—É—Ç–∞"""
    print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ù–ê–°–¢–†–û–ô–ö–ï –¢–ê–ô–ú–ê–£–¢–ê:")
    print("=" * 50)
    
    recommendations = [
        ("< 2 MB", "< 5 –º–∏–Ω—É—Ç", "60-180 —Å–µ–∫", "–ö–æ—Ä–æ—Ç–∫–∏–µ –∑–∞–ø–∏—Å–∏"),
        ("2-10 MB", "5-15 –º–∏–Ω—É—Ç", "180-300 —Å–µ–∫", "–°—Ä–µ–¥–Ω–∏–µ —Ñ–∞–π–ª—ã"),
        ("10-25 MB", "15-30 –º–∏–Ω—É—Ç", "300-600 —Å–µ–∫", "–î–ª–∏–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏"),
        ("25-50 MB", "30-60 –º–∏–Ω—É—Ç", "600-900 —Å–µ–∫", "–û—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–µ"),
        ("> 50 MB", "> 60 –º–∏–Ω—É—Ç", "900+ —Å–µ–∫", "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–±–∏–≤–∫—É")
    ]
    
    print(f"{'–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞':<12} {'–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å':<15} {'–¢–∞–π–º–∞—É—Ç':<15} {'–û–ø–∏—Å–∞–Ω–∏–µ'}")
    print("-" * 65)
    
    for size, duration, timeout, desc in recommendations:
        print(f"{size:<12} {duration:<15} {timeout:<15} {desc}")
    
    print(f"\nüìù –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤ config.json:")
    print(f'   "deepgram_timeout_seconds": 300')
    
    print(f"\n‚öôÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
    print(f"   ‚Ä¢ –î–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–±–∏–≤–∫—É —Ñ–∞–π–ª–æ–≤ > 25MB")
    print(f"   ‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –ø–∞—É–∑—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (request_pause_seconds: 5)")
    print(f"   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ (max_retries: 3)")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    test_timeout_settings()
    
    print(f"\nüéØ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print(f"1. –û–±–Ω–æ–≤–∏—Ç–µ config.json —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º")
    print(f"2. –î–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ process_long_audio.py")
    print(f"3. –ü—Ä–∏ —á–∞—Å—Ç—ã—Ö —Ç–∞–π–º–∞—É—Ç–∞—Ö —É–≤–µ–ª–∏—á—å—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–±–∏–≤–∫—É")

if __name__ == "__main__":
    main()